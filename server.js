// ÏïîÌò∏Ìôî Î™®Îìà import
const crypto = require('crypto');

// ÎπÑÎ∞ÄÎ≤àÌò∏ Ìï¥Ïãú Ìï®Ïàò
function hashPassword(password) {
    const salt = 'hanyang_salt'; // Í≥†Ï†ï ÏÜîÌä∏
    return crypto.createHash('sha256').update(password + salt).digest('hex');
}

const express = require('express');
const path = require('path');
const bodyParser = require('body-parser');
const session = require('express-session');
const MemoryStore = require('memorystore')(session);
const helmet = require('helmet');
const cors = require('cors');
const fs = require('fs-extra');
const multer = require('multer');
const { createClient } = require('@supabase/supabase-js');

const app = express();
const PORT = process.env.PORT || 3000;

// Trust proxy ÏÑ§Ï†ï (Render Îì± ÌîÑÎ°ùÏãú ÌôòÍ≤ΩÏóêÏÑú ÌïÑÏöî)
app.set('trust proxy', 1);

// ÌôòÍ≤Ω ÏÑ§Ï†ï Î∞è Í∏∞Î≥∏Í∞í
const NODE_ENV = process.env.NODE_ENV || 'development';
const SESSION_SECRET = process.env.SESSION_SECRET || 'hanyang-energy-secret-key-2025';

console.log(`üîß ÌôòÍ≤Ω: ${NODE_ENV}`);
console.log(`üîß Ìè¨Ìä∏: ${PORT}`);

// Supabase ÏÑ§Ï†ï
const supabaseUrl = process.env.SUPABASE_URL || 'https://aqcewkutnssgrioxlqba.supabase.co';

// ÌÇ§ ÏÑ†ÌÉù Î°úÏßÅ Í∞úÏÑ†
let supabaseKey;
if (process.env.NODE_ENV === 'production') {
    // ÌîÑÎ°úÎçïÏÖòÏóêÏÑúÎäî ÌôòÍ≤ΩÎ≥ÄÏàòÏùò ÏÑúÎπÑÏä§ Î°§ ÌÇ§ Ïö∞ÏÑ†, ÏóÜÏúºÎ©¥ ÌïòÎìúÏΩîÎî©Îêú ÌÇ§
    supabaseKey = process.env.SUPABASE_SERVICE_ROLE_KEY || 
        'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImFxY2V3a3V0bnNzZ3Jpb3hscWJhIiwicm9sZSI6InNlcnZpY2Vfcm9sZSIsImlhdCI6MTc1NDI5MDE0OCwiZXhwIjoyMDY5ODY2MTQ4fQ.Kz0ARhQd3lRDjF0qRDv9j5dqjzeQpw726QkbwghKX6I';
} else {
    // Í∞úÎ∞úÌôòÍ≤ΩÏóêÏÑúÎäî ÏÑúÎπÑÏä§ Î°§ ÌÇ§ Ïö∞ÏÑ†
    supabaseKey = process.env.SUPABASE_SERVICE_ROLE_KEY || 
        process.env.SUPABASE_ANON_KEY || 
        'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImFxY2V3a3V0bnNzZ3Jpb3hscWJhIiwicm9sZSI6InNlcnZpY2Vfcm9sZSIsImlhdCI6MTc1NDI5MDE0OCwiZXhwIjoyMDY5ODY2MTQ4fQ.Kz0ARhQd3lRDjF0qRDv9j5dqjzeQpw726QkbwghKX6I';
}

console.log('üîß Supabase URL:', supabaseUrl);
console.log('üîß Supabase Key:', supabaseKey ? 'ÏÑ§Ï†ïÎê®' : 'ÏÑ§Ï†ïÏïàÎê®');
console.log('üîß ÌÇ§ ÌÉÄÏûÖ:', supabaseKey.includes('service_role') ? 'service_role' : 'anon');

let supabase;
try {
    supabase = createClient(supabaseUrl, supabaseKey, {
        auth: {
            autoRefreshToken: false,
            persistSession: false
        }
    });
    console.log('‚úÖ Supabase ÌÅ¥ÎùºÏù¥Ïñ∏Ìä∏ Ï¥àÍ∏∞Ìôî ÏôÑÎ£å (ÌÇ§ ÌÉÄÏûÖ:', supabaseKey.includes('service_role') ? 'service_role' : 'anon', ')');
} catch (error) {
    console.error('‚ùå Supabase ÌÅ¥ÎùºÏù¥Ïñ∏Ìä∏ Ï¥àÍ∏∞Ìôî Ïã§Ìå®:', error);
    // Ïï±ÏùÄ Í≥ÑÏÜç Ïã§ÌñâÎêòÏßÄÎßå Îç∞Ïù¥ÌÑ∞Î≤†Ïù¥Ïä§ Í∏∞Îä•ÏùÄ Ï†úÌïúÎê®
}

// Multer ÏÑ§Ï†ï (ÌååÏùº ÏóÖÎ°úÎìú)
const storage = multer.diskStorage({
    destination: function (req, file, cb) {
        const uploadPath = path.join(__dirname, 'adm/uploads/popup_images');
        fs.ensureDirSync(uploadPath); // ÎîîÎ†âÌÜ†Î¶¨Í∞Ä ÏóÜÏúºÎ©¥ ÏÉùÏÑ±
        cb(null, uploadPath);
    },
    filename: function (req, file, cb) {
        const timestamp = Date.now();
        const originalName = Buffer.from(file.originalname, 'latin1').toString('utf8');
        const extension = path.extname(originalName);
        const filename = `${timestamp}_${originalName.replace(extension, '')}${extension}`;
        cb(null, filename);
    }
});

const upload = multer({ 
    storage: storage,
    limits: {
        fileSize: 5 * 1024 * 1024 // 5MB Ï†úÌïú
    },
    fileFilter: function (req, file, cb) {
        const allowedTypes = /jpeg|jpg|png|gif|webp/;
        const extname = allowedTypes.test(path.extname(file.originalname).toLowerCase());
        const mimetype = allowedTypes.test(file.mimetype);
        
        if (mimetype && extname) {
            return cb(null, true);
        } else {
            cb(new Error('Ïù¥ÎØ∏ÏßÄ ÌååÏùºÎßå ÏóÖÎ°úÎìú Í∞ÄÎä•Ìï©ÎãàÎã§.'));
        }
    }
});

// Î≥¥Ïïà ÎØ∏Îì§Ïõ®Ïñ¥
app.use(helmet({
    contentSecurityPolicy: false, // Í∏∞Ï°¥ Ïù∏ÎùºÏù∏ Ïä§ÌÉÄÏùºÏùÑ ÏúÑÌï¥ ÎπÑÌôúÏÑ±Ìôî
    crossOriginEmbedderPolicy: false
}));

// CORS ÏÑ§Ï†ï
// CORS ÏÑ§Ï†ï (Render Î∞∞Ìè¨ ÌôòÍ≤Ω ÏµúÏ†ÅÌôî)
app.use(cors({
    origin: true, // Î™®Îì† origin ÌóàÏö© (ÏûÑÏãú)
    credentials: true,
    optionsSuccessStatus: 200,
    methods: ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS'],
    allowedHeaders: ['Content-Type', 'Authorization', 'x-current-user', 'Cookie']
}));

// Body parser ÎØ∏Îì§Ïõ®Ïñ¥
app.use(bodyParser.urlencoded({ extended: true }));
app.use(bodyParser.json());

// ÏÑ∏ÏÖò ÏÑ§Ï†ï (Render Î∞∞Ìè¨ ÌôòÍ≤Ω ÏµúÏ†ÅÌôî)
app.use(session({
    secret: SESSION_SECRET,
    store: new MemoryStore({
        checkPeriod: 86400000 // ÌïòÎ£®ÎßàÎã§ ÎßåÎ£åÎêú ÏÑ∏ÏÖò Ï†ïÎ¶¨
    }),
    resave: false,
    saveUninitialized: true, // Î∞∞Ìè¨ ÌôòÍ≤ΩÏóêÏÑúÎäî trueÎ°ú ÏÑ§Ï†ï
    rolling: true, // ÏÑ∏ÏÖò ÎßåÎ£å ÏãúÍ∞Ñ Í∞±Ïã†
    cookie: {
        secure: false, // ÏûÑÏãúÎ°ú false (Î∞∞Ìè¨ÌôòÍ≤ΩÏóêÏÑúÎèÑ)
        httpOnly: true, // XSS Í≥µÍ≤© Î∞©ÏßÄ
        maxAge: 24 * 60 * 60 * 1000, // 24ÏãúÍ∞Ñ
        sameSite: 'lax' // Ìò∏ÌôòÏÑ±ÏùÑ ÏúÑÌï¥ lax
    },
    name: 'hanyang.sid' // Í∏∞Î≥∏ ÏÑ∏ÏÖò Ïù¥Î¶Ñ Î≥ÄÍ≤Ω
}));

// EJS ÌÖúÌîåÎ¶ø ÏóîÏßÑ ÏÑ§Ï†ï
app.set('view engine', 'ejs');
app.set('views', path.join(__dirname, 'views'));

// Ï†ïÏ†Å ÌååÏùº ÏÑúÎπô
app.use('/css', express.static(path.join(__dirname, 'css')));
app.use('/js', express.static(path.join(__dirname, 'js')));
app.use('/img', express.static(path.join(__dirname, 'img')));
app.use('/images', express.static(path.join(__dirname, 'images')));
app.use('/videos', express.static(path.join(__dirname, 'videos')));

// ÎîîÎ≤ÑÍπÖÏö© HTML ÌååÏùºÎèÑ ÏÑúÎπô
app.use(express.static(__dirname));

// Î™®Îì† ÏöîÏ≤≠ Î°úÍπÖ ÎØ∏Îì§Ïõ®Ïñ¥
app.use((req, res, next) => {
    console.log(`üì° ${req.method} ${req.url} - ${new Date().toISOString()}`);
    next();
});

// Í¥ÄÎ¶¨Ïûê Ï†ïÏ†Å ÌååÏùº ÏÑúÎπô
app.use('/admin/css', express.static(path.join(__dirname, 'admin/css')));
app.use('/admin/js', express.static(path.join(__dirname, 'admin/js')));
app.use('/admin/uploads', express.static(path.join(__dirname, 'adm/uploads')));

// Í∏∞Î≥∏ Í≥ÑÏ†ï ÏÉùÏÑ± Ìï®Ïàò (Î∞∞Ìè¨ ÌôòÍ≤ΩÏö©)
async function ensureBasicAccounts() {
    if (NODE_ENV !== 'production') return;
    
    try {
        console.log('üîç Î∞∞Ìè¨ ÌôòÍ≤Ω Í∏∞Î≥∏ Í≥ÑÏ†ï ÌôïÏù∏ Ï§ë...');
        
        // Í∏∞Î≥∏ Í≥ÑÏ†ïÎì§
        const basicAccounts = [
            {
                username: 'minj0010',
                password_hash: hashPassword('minj0010'),
                name: 'ÍπÄÎØºÏ†ï',
                email: 'minj0010@hanyang.com',
                role: 'admin',
                status: 'approved'
            },
            {
                username: 'admin',
                password_hash: hashPassword('admin123'),
                name: 'ÏãúÏä§ÌÖúÍ¥ÄÎ¶¨Ïûê',
                email: 'admin@hanyang.com',
                role: 'admin',
                status: 'approved'
            },
            {
                username: 'test',
                password_hash: hashPassword('test123'),
                name: 'ÌÖåÏä§Ìä∏ÏÇ¨Ïö©Ïûê',
                email: 'test@hanyang.com',
                role: 'user',
                status: 'approved'
            }
        ];
        
        for (const account of basicAccounts) {
            try {
                // Í∞Å Í≥ÑÏ†ï ÌôïÏù∏Ïóê ÌÉÄÏûÑÏïÑÏõÉ Ï†ÅÏö© (5Ï¥à)
                const timeoutPromise = new Promise((_, reject) => 
                    setTimeout(() => reject(new Error('timeout')), 5000)
                );
                
                const checkPromise = supabase
                    .from('members')
                    .select('username')
                    .eq('username', account.username)
                    .maybeSingle();
                
                const { data: existing } = await Promise.race([checkPromise, timeoutPromise]);
                
                if (!existing) {
                    console.log(`üìù ${account.username} Í≥ÑÏ†ï ÏÉùÏÑ± Ï§ë...`);
                    const { error } = await supabase
                        .from('members')
                        .insert([{
                            ...account,
                            created_at: new Date().toISOString(),
                            approved_at: new Date().toISOString()
                        }]);
                    
                    if (error) {
                        console.error(`‚ùå ${account.username} Í≥ÑÏ†ï ÏÉùÏÑ± Ïã§Ìå®:`, error);
                    } else {
                        console.log(`‚úÖ ${account.username} Í≥ÑÏ†ï ÏÉùÏÑ± ÏÑ±Í≥µ`);
                    }
                } else {
                    console.log(`‚úÖ ${account.username} Í≥ÑÏ†ï Ïù¥ÎØ∏ Ï°¥Ïû¨Ìï®`);
                }
            } catch (err) {
                console.warn(`‚ö†Ô∏è ${account.username} Í≥ÑÏ†ï Ï≤òÎ¶¨ Ï§ë Ïò§Î•ò (Í≥ÑÏÜç ÏßÑÌñâ):`, err.message);
            }
        }
        
    } catch (error) {
        console.error('Í∏∞Î≥∏ Í≥ÑÏ†ï ÏÉùÏÑ± Ï§ë Ïò§Î•ò:', error);
    }
}
async function convertHtmlToEjs() {
    const viewsDir = path.join(__dirname, 'views');
    await fs.ensureDir(viewsDir);
    
    // HTML ÌååÏùº Î™©Î°ù
    const htmlFiles = [
        'index.html',
        'login.html',
        'signup.html',
        'mypage.html',
        'introduce_product.html',
        'introduce_service.html',
        'product_list.html',
        'investment_detail.html',
        'my_investments.html',
        'withdraw_request.html',
        'ceo_message.html',
        'history.html',
        'faq.html',
        'announcements.html',
        'project_gallery.html',
        'inquiry_list.html',
        'my_inquiry.html'
    ];
    
    for (const file of htmlFiles) {
        const htmlPath = path.join(__dirname, file);
        const ejsPath = path.join(viewsDir, file.replace('.html', '.ejs'));
        
        if (await fs.pathExists(htmlPath)) {
            await fs.copy(htmlPath, ejsPath);
            console.log(`Converted ${file} to EJS`);
        }
    }
    
    // Í¥ÄÎ¶¨Ïûê ÌéòÏù¥ÏßÄÎì§ÎèÑ Î≥µÏÇ¨
    const adminDir = path.join(__dirname, 'admin');
    const adminViewsDir = path.join(viewsDir, 'admin');
    
    if (await fs.pathExists(adminDir)) {
        await fs.ensureDir(adminViewsDir);
        
        const adminFiles = await fs.readdir(adminDir);
        for (const file of adminFiles) {
            if (file.endsWith('.html')) {
                const htmlPath = path.join(adminDir, file);
                const ejsPath = path.join(adminViewsDir, file.replace('.html', '.ejs'));
                await fs.copy(htmlPath, ejsPath);
                console.log(`Converted admin/${file} to EJS`);
            }
        }
    }
}

// ÏÇ¨Ïö©Ïûê Îç∞Ïù¥ÌÑ∞ (Í∏∞Ï°¥ auth.jsÏôÄ ÎèôÏùº)
let users = [
    { id: '1', username: 'minj0010', password: 'minj0010', name: 'ÍπÄÎØºÏ†ï', role: 'admin', status: 'approved' },
    { id: '2', username: 'admin', password: 'admin123', name: 'Í¥ÄÎ¶¨Ïûê', role: 'admin', status: 'approved' },
    { id: '8', username: 'test_admin', password: '1234', name: 'ÌÖåÏä§Ìä∏Í¥ÄÎ¶¨Ïûê', role: 'admin', status: 'approved' },
    { id: '3', username: 'user1', password: 'user123', name: 'ÍπÄÌöåÏõê', role: 'user', status: 'approved' },
    { id: '4', username: 'user2', password: 'user456', name: 'Ïù¥Ìà¨Ïûê', role: 'user', status: 'approved' },
    { id: '5', username: 'test', password: 'test123', name: 'ÌÖåÏä§Ìä∏', role: 'user', status: 'approved' }
];

// ÎØ∏Îì§Ïõ®Ïñ¥: Î°úÍ∑∏Ïù∏ ÌôïÏù∏
function requireLogin(req, res, next) {
    console.log('üîê requireLogin ÎØ∏Îì§Ïõ®Ïñ¥ Ïã§ÌñâÎê®');
    console.log('üîê ÏöîÏ≤≠ Í≤ΩÎ°ú:', req.path);
    console.log('üîê ÏÑ∏ÏÖò ÏÇ¨Ïö©Ïûê:', req.session?.user?.username || 'ÏóÜÏùå');
    
    // ÏÑ∏ÏÖò Í∏∞Î∞ò Ïù∏Ï¶ù Î®ºÏ†Ä ÌôïÏù∏
    if (req.session.user) {
        console.log('‚úÖ ÏÑ∏ÏÖò Í∏∞Î∞ò Ïù∏Ï¶ù ÏÑ±Í≥µ');
        return next();
    }
    
    // Ìó§ÎçîÏóêÏÑú ÏÇ¨Ïö©Ïûê Ï†ïÎ≥¥ ÌôïÏù∏ (ÌÅ¥ÎùºÏù¥Ïñ∏Ìä∏ Ï∏° auth.jsÏôÄ Ïó∞Îèô)
    const userHeader = req.headers['x-current-user'];
    console.log('üîê ÏÇ¨Ïö©Ïûê Ìó§Îçî:', userHeader ? 'ÏûàÏùå' : 'ÏóÜÏùå');
    
    if (userHeader) {
        try {
            let user;
            // Base64Î°ú Ïù∏ÏΩîÎî©Îêú Ìó§ÎçîÏù∏ÏßÄ ÌôïÏù∏ ÌõÑ ÎîîÏΩîÎî©
            try {
                const decodedBase64 = Buffer.from(userHeader, 'base64').toString('utf-8');
                const decodedURI = decodeURIComponent(decodedBase64);
                user = JSON.parse(decodedURI);
            } catch (base64Error) {
                // Base64 ÎîîÏΩîÎî© Ïã§Ìå®Ïãú Í∏∞Ï°¥ Î∞©ÏãùÏúºÎ°ú ÏãúÎèÑ
                const decodedHeader = decodeURIComponent(userHeader);
                user = JSON.parse(decodedHeader);
            }
            
            console.log('üîê Ìó§ÎçîÏóêÏÑú ÌååÏã±Îêú ÏÇ¨Ïö©Ïûê:', user?.username || 'ÏóÜÏùå');
            
            if (user && user.status === 'approved') {
                console.log('‚úÖ Ìó§Îçî Í∏∞Î∞ò Ïù∏Ï¶ù ÏÑ±Í≥µ');
                // ÏÑ∏ÏÖòÏóêÎèÑ Ï†ÄÏû•
                req.session.user = user;
                return next();
            } else {
                console.log('‚ùå ÏÇ¨Ïö©Ïûê ÏÉÅÌÉúÍ∞Ä ÏäπÏù∏ÎêòÏßÄ ÏïäÏùå:', user?.status);
            }
        } catch (e) {
            console.log('‚ùå ÏÇ¨Ïö©Ïûê Ìó§Îçî ÌååÏã± Ïò§Î•ò:', e);
        }
    }
    
    console.log('‚ùå Ïù∏Ï¶ù Ïã§Ìå® - Î°úÍ∑∏Ïù∏ ÌïÑÏöî');
    
    // API ÏöîÏ≤≠Ïù∏ Í≤ΩÏö∞ JSON ÏùëÎãµ
    if (req.path.startsWith('/api/')) {
        return res.status(401).json({ 
            success: false, 
            message: 'Î°úÍ∑∏Ïù∏Ïù¥ ÌïÑÏöîÌï©ÎãàÎã§.' 
        });
    }
    
    // Î°úÍ∑∏Ïù∏Ïù¥ ÌïÑÏöîÌïú Í≤ΩÏö∞
    res.redirect('/login');
}

// ÎØ∏Îì§Ïõ®Ïñ¥: Í¥ÄÎ¶¨Ïûê Í∂åÌïú ÌôïÏù∏
function requireAdmin(req, res, next) {
    // ÏÑ∏ÏÖò Í∏∞Î∞ò Ïù∏Ï¶ù Î®ºÏ†Ä ÌôïÏù∏
    if (req.session.user && req.session.user.role === 'admin') {
        return next();
    }
    
    // Ìó§ÎçîÏóêÏÑú ÏÇ¨Ïö©Ïûê Ï†ïÎ≥¥ ÌôïÏù∏ (ÌÅ¥ÎùºÏù¥Ïñ∏Ìä∏ Ï∏° auth.jsÏôÄ Ïó∞Îèô)
    const userHeader = req.headers['x-current-user'];
    if (userHeader) {
        try {
            let user;
            // Base64Î°ú Ïù∏ÏΩîÎî©Îêú Ìó§ÎçîÏù∏ÏßÄ ÌôïÏù∏ ÌõÑ ÎîîÏΩîÎî©
            try {
                const decodedBase64 = Buffer.from(userHeader, 'base64').toString('utf-8');
                const decodedURI = decodeURIComponent(decodedBase64);
                user = JSON.parse(decodedURI);
            } catch (base64Error) {
                // Base64 ÎîîÏΩîÎî© Ïã§Ìå®Ïãú Í∏∞Ï°¥ Î∞©ÏãùÏúºÎ°ú ÏãúÎèÑ
                const decodedHeader = decodeURIComponent(userHeader);
                user = JSON.parse(decodedHeader);
            }
            
            if (user && user.role === 'admin' && user.status === 'approved') {
                return next();
            }
        } catch (e) {
            console.log('ÏÇ¨Ïö©Ïûê Ìó§Îçî ÌååÏã± Ïò§Î•ò:', e);
        }
    }
    
    // Í¥ÄÎ¶¨Ïûê Í∂åÌïúÏù¥ ÏóÜÎäî Í≤ΩÏö∞
    res.status(403).send(`
        <script>
            alert('Í¥ÄÎ¶¨Ïûê Í∂åÌïúÏù¥ ÌïÑÏöîÌï©ÎãàÎã§.');
            window.location.href = '/login';
        </script>
    `);
}

// ÎùºÏö∞Ìä∏ ÏÑ§Ï†ï

// Í±¥Í∞ï Ï≤¥ÌÅ¨ ÏóîÎìúÌè¨Ïù∏Ìä∏ (Render Îì± Î∞∞Ìè¨ ÌîåÎû´ÌèºÏö©)
app.get('/health', (req, res) => {
    res.status(200).json({ 
        status: 'healthy', 
        timestamp: new Date().toISOString(),
        uptime: process.uptime(),
        version: '2.1.0' // Î≤ÑÏ†Ñ ÏóÖÎç∞Ïù¥Ìä∏Î°ú Ïû¨Î∞∞Ìè¨ ÌôïÏù∏
    });
});

// Îπ†Î•∏ ÏùëÎãµÏö© Í∏∞Î≥∏ Ìó¨Ïä§Ï≤¥ÌÅ¨
app.get('/ping', (req, res) => {
    res.status(200).send('pong');
});

// Î£®Ìä∏ Í≤ΩÎ°úÎèÑ Îπ†Î•∏ ÏùëÎãµ
app.get('/status', (req, res) => {
    res.status(200).json({ ok: true, time: Date.now() });
});

// API Î™©Î°ù ÌôïÏù∏Ïö© (ÎîîÎ≤ÑÍπÖ)
app.get('/api/debug/routes', (req, res) => {
    const routes = [];
    app._router.stack.forEach(function(r) {
        if (r.route && r.route.path) {
            routes.push({
                method: Object.keys(r.route.methods).join(',').toUpperCase(),
                path: r.route.path
            });
        }
    });
    
    res.json({
        success: true,
        routes: routes,
        totalRoutes: routes.length,
        timestamp: new Date().toISOString()
    });
});

// Î©îÏù∏ ÌéòÏù¥ÏßÄ
app.get('/', (req, res) => {
    res.render('index', { user: req.session.user });
});

// Î°úÍ∑∏Ïù∏ ÌéòÏù¥ÏßÄ
app.get('/login', (req, res) => {
    if (req.session.user) {
        return res.redirect('/');
    }
    res.render('login');
});

// Î°úÍ∑∏Ïù∏ Ï≤òÎ¶¨ (Supabase Ïó∞Îèô) - Render Î∞∞Ìè¨ ÌôòÍ≤Ω ÏµúÏ†ÅÌôî
app.post('/login', async (req, res) => {
    const { username, password } = req.body;
    
    try {
        console.log('üîç Î°úÍ∑∏Ïù∏ ÏãúÎèÑ:', username, 'ÌôòÍ≤Ω:', NODE_ENV, 'ÏöîÏ≤≠ Ìó§Îçî:', req.headers.origin);
        console.log('üç™ Í∏∞Ï°¥ ÏÑ∏ÏÖò Ï†ïÎ≥¥:', req.session.user ? 'Ï°¥Ïû¨' : 'ÏóÜÏùå');
        console.log('üîó ÏÑ∏ÏÖò ID:', req.sessionID);
        console.log('üåê User-Agent:', req.headers['user-agent']);
        console.log('üîí Ïø†ÌÇ§ Ìó§Îçî:', req.headers.cookie);
        console.log('üì° ÏöîÏ≤≠ IP:', req.ip || req.connection.remoteAddress);
        
        // ÏûÖÎ†•Í∞í Í≤ÄÏ¶ù
        if (!username || !password) {
            console.log('‚ùå ÏûÖÎ†•Í∞í Í≤ÄÏ¶ù Ïã§Ìå®');
            return res.json({ success: false, message: 'ÏïÑÏù¥ÎîîÏôÄ ÎπÑÎ∞ÄÎ≤àÌò∏Î•º Î™®Îëê ÏûÖÎ†•Ìï¥Ï£ºÏÑ∏Ïöî.' });
        }
        
        // ÎπÑÎ∞ÄÎ≤àÌò∏ Ìï¥ÏãúÌôî
        const passwordHash = hashPassword(password);
        console.log('üîê ÎπÑÎ∞ÄÎ≤àÌò∏ Ìï¥Ïãú:', passwordHash);
        
        // Supabase Ïó∞Í≤∞ ÌôïÏù∏
        if (!supabase) {
            console.log('‚ùå Supabase ÌÅ¥ÎùºÏù¥Ïñ∏Ìä∏ ÏóÜÏùå');
            return res.json({ success: false, message: 'DB Ïó∞Í≤∞ Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§.' });
        }
        
        // Î®ºÏ†Ä ÏÇ¨Ïö©ÏûêÍ∞Ä Ï°¥Ïû¨ÌïòÎäîÏßÄ ÌôïÏù∏
        console.log('üîç DB Ï°∞Ìöå ÏãúÏûë:', { username, passwordHash });
        const { data: existingUser, error: userError } = await supabase
            .from('members')
            .select('username, password_hash, status, role')
            .eq('username', username)
            .single();
            
        console.log('üîç DB Ï°∞Ìöå Í≤∞Í≥º:', { existingUser, userError });
            
        if (userError) {
            console.log('‚ùå ÏÇ¨Ïö©Ïûê Ï°∞Ìöå Ïò§Î•ò:', userError);
            
            // Î™®Îì† ÏÇ¨Ïö©Ïûê Ï°∞ÌöåÎ°ú Ïû¨ÏãúÎèÑ
            const { data: allUsers, error: allError } = await supabase
                .from('members')
                .select('username, password_hash, status, role');
            
            console.log('üîç Ï†ÑÏ≤¥ ÏÇ¨Ïö©Ïûê Ïû¨Ï°∞Ìöå:', { count: allUsers?.length || 0, allError });
            if (allUsers && allUsers.length > 0) {
                console.log('üìã Ï≤´ Î≤àÏß∏ ÏÇ¨Ïö©Ïûê:', allUsers[0]);
            }
            
            return res.json({ success: false, message: 'ÏïÑÏù¥Îîî ÎòêÎäî ÎπÑÎ∞ÄÎ≤àÌò∏Í∞Ä Ïò¨Î∞îÎ•¥ÏßÄ ÏïäÏäµÎãàÎã§.' });
        }
        
        if (!existingUser) {
            console.log('‚ùå ÏÇ¨Ïö©Ïûê ÏóÜÏùå:', username);
            return res.json({ success: false, message: 'ÏïÑÏù¥Îîî ÎòêÎäî ÎπÑÎ∞ÄÎ≤àÌò∏Í∞Ä Ïò¨Î∞îÎ•¥ÏßÄ ÏïäÏäµÎãàÎã§.' });
        }
        
        console.log('‚úÖ ÏÇ¨Ïö©Ïûê Î∞úÍ≤¨:', existingUser.username, 'Ï†ÄÏû•Îêú Ìï¥Ïãú:', existingUser.password_hash);
        
        // ÎπÑÎ∞ÄÎ≤àÌò∏ ÌôïÏù∏
        if (existingUser.password_hash !== passwordHash) {
            console.log('‚ùå ÎπÑÎ∞ÄÎ≤àÌò∏ Î∂àÏùºÏπò');
            return res.json({ success: false, message: 'ÏïÑÏù¥Îîî ÎòêÎäî ÎπÑÎ∞ÄÎ≤àÌò∏Í∞Ä Ïò¨Î∞îÎ•¥ÏßÄ ÏïäÏäµÎãàÎã§.' });
        }
        
        // ÏäπÏù∏ ÏÉÅÌÉú ÌôïÏù∏
        if (existingUser.status === 'blocked') {
            console.log('‚ùå Ï∞®Îã®Îêú ÏÇ¨Ïö©Ïûê:', existingUser.status);
            return res.json({ success: false, message: 'Î°úÍ∑∏Ïù∏Ïù¥ Ï∞®Îã®Îêú Í≥ÑÏ†ïÏûÖÎãàÎã§. Í¥ÄÎ¶¨ÏûêÏóêÍ≤å Î¨∏ÏùòÌïòÏÑ∏Ïöî.' });
        }
        
        if (existingUser.status !== 'approved') {
            console.log('‚ùå ÏäπÏù∏ÎêòÏßÄ ÏïäÏùÄ ÏÇ¨Ïö©Ïûê:', existingUser.status);
            return res.json({ success: false, message: 'Í≥ÑÏ†ïÏù¥ ÏäπÏù∏ÎêòÏßÄ ÏïäÏïòÏäµÎãàÎã§.' });
        }
        
        // Ï†ÑÏ≤¥ ÏÇ¨Ïö©Ïûê Ï†ïÎ≥¥ Ï°∞Ìöå
        const { data: user, error } = await supabase
            .from('members')
            .select('*')
            .eq('username', username)
            .single();

        if (error || !user) {
            console.log('‚ùå Ï†ÑÏ≤¥ ÏÇ¨Ïö©Ïûê Ï†ïÎ≥¥ Ï°∞Ìöå Ïã§Ìå®:', username);
            return res.json({ success: false, message: 'Î°úÍ∑∏Ïù∏ Ï≤òÎ¶¨ Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§.' });
        }

        // ÏÑ∏ÏÖò ÏÑ§Ï†ï
        req.session.user = {
            id: user.id,
            username: user.username,
            name: user.name,
            email: user.email,
            role: user.role,
            status: user.status,
            loginTime: new Date().toISOString()
        };
        
        // ÏÑ∏ÏÖò Í∞ïÏ†ú Ï†ÄÏû•
        req.session.save((err) => {
            if (err) {
                console.error('‚ùå ÏÑ∏ÏÖò Ï†ÄÏû• Ïã§Ìå®:', err);
                return res.json({ success: false, message: 'ÏÑ∏ÏÖò Ï†ÄÏû• Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§.' });
            }
            
            console.log('‚úÖ Î°úÍ∑∏Ïù∏ ÏÑ±Í≥µ:', user.username, 'ÏÑ∏ÏÖò ID:', req.sessionID);
            console.log('üîí ÏÑ∏ÏÖò Ï†ÄÏû• ÏÉÅÌÉú:', req.session.user ? 'ÏÑ±Í≥µ' : 'Ïã§Ìå®');
            console.log('üíæ ÏÑ∏ÏÖò Îç∞Ïù¥ÌÑ∞:', req.session.user);
            
            res.json({ success: true, user: req.session.user });
        });
        
    } catch (error) {
        console.error('Î°úÍ∑∏Ïù∏ Ï≤òÎ¶¨ Ï§ë Ïò§Î•ò:', error);
        res.json({ success: false, message: 'Î°úÍ∑∏Ïù∏ Ï≤òÎ¶¨ Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§.' });
    }
});

// ÌöåÏõêÍ∞ÄÏûÖ ÌéòÏù¥ÏßÄ
app.get('/signup', (req, res) => {
    res.render('signup');
});

// ÌöåÏõêÍ∞ÄÏûÖ Ï≤òÎ¶¨ (Supabase Ïó∞Îèô)
app.post('/signup', async (req, res) => {
    const { 
        username, 
        password, 
        name, 
        email, 
        phone, 
        address, 
        detailAddress, 
        bank_name, 
        account_number, 
        referral_code 
    } = req.body;
    
    try {
        // Ï§ëÎ≥µ ÌôïÏù∏
        const { data: existingUsers, error: checkError } = await supabase
            .from('members')
            .select('username, email')
            .or(`username.eq.${username},email.eq.${email}`);

        if (checkError) {
            console.error('ÌöåÏõê Ï§ëÎ≥µ ÌôïÏù∏ Ïò§Î•ò:', checkError);
            return res.json({ success: false, message: 'ÌöåÏõêÍ∞ÄÏûÖ Ï≤òÎ¶¨ Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§.' });
        }

        if (existingUsers && existingUsers.length > 0) {
            return res.json({ success: false, message: 'Ïù¥ÎØ∏ ÏÇ¨Ïö© Ï§ëÏù∏ ÏïÑÏù¥Îîî ÎòêÎäî Ïù¥Î©îÏùºÏûÖÎãàÎã§.' });
        }

        // ÎπÑÎ∞ÄÎ≤àÌò∏ Ìï¥ÏãúÌôî
        const passwordHash = hashPassword(password);

        // ÏÉà ÌöåÏõê Ï∂îÍ∞Ä (Ï¶âÏãú ÏäπÏù∏)
        const { data: newUser, error: insertError } = await supabase
            .from('members')
            .insert([{
                username,
                password_hash: passwordHash,
                name,
                email,
                phone: phone || '',
                address: address || '',
                detail_address: detailAddress || '',
                bank_name: bank_name || '',
                account_number: account_number || '',
                referral_code: referral_code || '',
                role: 'user',
                status: 'approved', // Ï¶âÏãú ÏäπÏù∏
                approved_at: new Date().toISOString()
            }])
            .select()
            .single();

        if (insertError) {
            console.error('ÌöåÏõê Ï∂îÍ∞Ä Ïò§Î•ò:', insertError);
            return res.json({ success: false, message: 'ÌöåÏõêÍ∞ÄÏûÖ Ï≤òÎ¶¨ Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§.' });
        }

        console.log('‚úÖ ÏÉà ÌöåÏõê Í∞ÄÏûÖ:', newUser.username);
        
        res.json({ 
            success: true, 
            message: 'ÌöåÏõêÍ∞ÄÏûÖÏù¥ ÏôÑÎ£åÎêòÏóàÏäµÎãàÎã§. Î∞îÎ°ú Î°úÍ∑∏Ïù∏ÌïòÏã§ Ïàò ÏûàÏäµÎãàÎã§.',
            user: {
                id: newUser.id,
                username: newUser.username,
                name: newUser.name,
                email: newUser.email,
                role: newUser.role,
                status: newUser.status
            }
        });
    } catch (error) {
        console.error('ÌöåÏõêÍ∞ÄÏûÖ Ï≤òÎ¶¨ Ï§ë Ïò§Î•ò:', error);
        res.json({ success: false, message: 'ÏÑúÎ≤Ñ Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§.' });
    }
});

// ÏÑ∏ÏÖò ÏÉÅÌÉú ÌôïÏù∏Ïö© ÏóîÎìúÌè¨Ïù∏Ìä∏ (ÎîîÎ≤ÑÍπÖÏö©)
app.get('/api/session-check', (req, res) => {
    console.log('üîç ÏÑ∏ÏÖò Ï≤¥ÌÅ¨ ÏöîÏ≤≠');
    console.log('üîó ÏÑ∏ÏÖò ID:', req.sessionID);
    console.log('üë§ ÏÑ∏ÏÖò ÏÇ¨Ïö©Ïûê:', req.session.user);
    console.log('üç™ Ïø†ÌÇ§:', req.headers.cookie);
    console.log('üåê Origin:', req.headers.origin);
    console.log('üì° User-Agent:', req.headers['user-agent']);
    console.log('üîí Secure Context:', req.secure);
    console.log('üíª ÌôòÍ≤Ω:', NODE_ENV);
    
    res.json({
        sessionId: req.sessionID,
        user: req.session.user || null,
        isLoggedIn: !!req.session.user,
        cookie: req.headers.cookie,
        origin: req.headers.origin,
        secure: req.secure,
        environment: NODE_ENV,
        timestamp: new Date().toISOString()
    });
});

// Î°úÍ∑∏ÏïÑÏõÉ
app.post('/logout', (req, res) => {
    console.log('üö™ Î°úÍ∑∏ÏïÑÏõÉ ÏöîÏ≤≠ - ÏÇ¨Ïö©Ïûê:', req.session.user ? req.session.user.username : 'ÏóÜÏùå');
    
    req.session.destroy((err) => {
        if (err) {
            console.error('‚ùå ÏÑ∏ÏÖò ÏÇ≠Ï†ú Ïã§Ìå®:', err);
            return res.json({ success: false, message: 'Î°úÍ∑∏ÏïÑÏõÉ Ï≤òÎ¶¨ Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§.' });
        }
        
        console.log('‚úÖ Î°úÍ∑∏ÏïÑÏõÉ ÏôÑÎ£å');
        res.clearCookie('hanyang.sid'); // Ïø†ÌÇ§ÎèÑ Î™ÖÏãúÏ†ÅÏúºÎ°ú ÏÇ≠Ï†ú
        
        // JSON ÏùëÎãµ ÎåÄÏã† ÌôàÌéòÏù¥ÏßÄÎ°ú Î¶¨Îã§Ïù¥Î†âÌä∏
        res.redirect('/');
    });
});

// GET Î°úÍ∑∏ÏïÑÏõÉ ÎùºÏö∞Ìä∏ÎèÑ Ï∂îÍ∞Ä (URL ÏßÅÏ†ë Ï†ëÍ∑º ÎåÄÏùë)
app.get('/logout', (req, res) => {
    console.log('üö™ GET Î°úÍ∑∏ÏïÑÏõÉ ÏöîÏ≤≠ - ÏÇ¨Ïö©Ïûê:', req.session.user ? req.session.user.username : 'ÏóÜÏùå');
    
    req.session.destroy((err) => {
        if (err) {
            console.error('‚ùå ÏÑ∏ÏÖò ÏÇ≠Ï†ú Ïã§Ìå®:', err);
        }
        
        console.log('‚úÖ Î°úÍ∑∏ÏïÑÏõÉ ÏôÑÎ£å (GET)');
        res.clearCookie('hanyang.sid');
        res.redirect('/');
    });
});

// ÌôòÍ≤Ω Î≥ÄÏàò Ï≤¥ÌÅ¨ API (Î∞∞Ìè¨ ÌôòÍ≤Ω ÎîîÎ≤ÑÍπÖÏö©)
app.get('/api/debug/env', (req, res) => {
    res.json({
        NODE_ENV: NODE_ENV,
        PORT: PORT,
        SUPABASE_URL: supabaseUrl,
        SUPABASE_ANON_KEY: supabaseKey ? 'SET' : 'NOT SET',
        SESSION_SECRET: SESSION_SECRET ? 'SET' : 'NOT SET',
        timestamp: new Date().toISOString(),
        supabaseUrlFull: supabaseUrl,
        supabaseKeyLength: supabaseKey ? supabaseKey.length : 0
    });
});

// ÏÑ∏ÏÖò ÏÉÅÌÉú ÌôïÏù∏ API - Render Î∞∞Ìè¨ ÌôòÍ≤Ω ÎîîÎ≤ÑÍπÖ
app.get('/api/check-session', (req, res) => {
    console.log('üîç ÏÑ∏ÏÖò ÌôïÏù∏ ÏöîÏ≤≠ - ÏÑ∏ÏÖò ID:', req.sessionID);
    console.log('üîç ÏÑ∏ÏÖò ÏÇ¨Ïö©Ïûê:', req.session.user ? req.session.user.username : 'ÏóÜÏùå');
    
    if (req.session.user) {
        res.json({ user: req.session.user });
    } else {
        res.json({ user: null });
    }
});

// ÏÇ¨Ïö©Ïûê Ìà¨Ïûê Îç∞Ïù¥ÌÑ∞ Îß§Ìïë ÏàòÏ†ï API (ÏûÑÏãú ÎîîÎ≤ÑÍπÖÏö©)
app.get('/api/fix-user-mapping/:username', async (req, res) => {
    try {
        const { username } = req.params;
        console.log(`üîß ${username} ÏÇ¨Ïö©ÏûêÏùò Ìà¨Ïûê Îç∞Ïù¥ÌÑ∞ Îß§Ìïë ÏàòÏ†ï ÏãúÏûë...`);
        
        // 1. ÏÇ¨Ïö©Ïûê Ï†ïÎ≥¥ Ï°∞Ìöå
        const { data: user, error: userError } = await supabase
            .from('members')
            .select('*')
            .eq('username', username)
            .single();
            
        if (userError || !user) {
            console.error(`‚ùå ${username} ÏÇ¨Ïö©ÏûêÎ•º Ï∞æÏùÑ Ïàò ÏóÜÏäµÎãàÎã§:`, userError);
            return res.json({ success: false, error: 'User not found' });
        }
        
        console.log(`‚úÖ ${username} ÏÇ¨Ïö©Ïûê Ï†ïÎ≥¥:`, {
            id: user.id,
            username: user.username,
            name: user.name
        });
        
        // 2. ÏµúÍ∑º ÏÉùÏÑ±Îêú Î™®Îì† Ìà¨Ïûê Îç∞Ïù¥ÌÑ∞ Ï°∞Ìöå (ÌóàÏßÑÏ£º Í¥ÄÎ†®)
        const { data: allInvestments, error: investmentError } = await supabase
            .from('investments')
            .select('*')
            .order('created_at', { ascending: false })
            .limit(10);
            
        if (investmentError) {
            console.error('‚ùå Ìà¨Ïûê Îç∞Ïù¥ÌÑ∞ Ï°∞Ìöå Ïò§Î•ò:', investmentError);
            return res.json({ success: false, error: 'Investment query failed' });
        }
        
        console.log(`üîç ÏµúÍ∑º Ìà¨Ïûê Îç∞Ïù¥ÌÑ∞ ${allInvestments.length}Í±¥ Ï°∞ÌöåÎê®`);
        
        // 3. ÌóàÏßÑÏ£º Í¥ÄÎ†® Ìà¨Ïûê Ï∞æÍ∏∞ Î∞è ÏàòÏ†ï
        let updatedCount = 0;
        const results = [];
        
        for (const investment of allInvestments) {
            // 300kw ÏÉÅÌíàÏù¥Í≥† 5,000,000ÏõêÏù∏ Ìà¨Ïûê Ï∞æÍ∏∞
            if (investment.product_name && 
                investment.product_name.toLowerCase().includes('300kw') && 
                parseFloat(investment.amount) === 5000000) {
                
                console.log(`üéØ ÎåÄÏÉÅ Ìà¨Ïûê Î∞úÍ≤¨:`, {
                    id: investment.id,
                    member_id: investment.member_id,
                    product_name: investment.product_name,
                    amount: investment.amount,
                    status: investment.status
                });
                
                // member_idÎ•º ÌòÑÏû¨ ÏÇ¨Ïö©ÏûêÎ°ú ÏóÖÎç∞Ïù¥Ìä∏
                const { error: updateError } = await supabase
                    .from('investments')
                    .update({ member_id: user.id })
                    .eq('id', investment.id);
                    
                if (updateError) {
                    console.error(`‚ùå Ìà¨Ïûê ${investment.id} ÏóÖÎç∞Ïù¥Ìä∏ Ïã§Ìå®:`, updateError);
                    results.push({ id: investment.id, success: false, error: updateError.message });
                } else {
                    console.log(`‚úÖ Ìà¨Ïûê ${investment.id} member_id ÏóÖÎç∞Ïù¥Ìä∏ ÏôÑÎ£å`);
                    updatedCount++;
                    results.push({ id: investment.id, success: true });
                }
            }
        }
        
        // 4. ÏµúÏ¢Ö ÌôïÏù∏
        const { data: finalInvestments } = await supabase
            .from('investments')
            .select('*')
            .eq('member_id', user.id);
            
        console.log(`üéâ Îß§Ìïë ÏàòÏ†ï ÏôÑÎ£å: ${updatedCount}Í±¥ ÏóÖÎç∞Ïù¥Ìä∏`);
        console.log(`‚úÖ ${username}Ïùò ÏµúÏ¢Ö Ìà¨Ïûê Í∞úÏàò: ${finalInvestments ? finalInvestments.length : 0}Í±¥`);
        
        res.json({
            success: true,
            message: `${updatedCount}Í±¥Ïùò Ìà¨Ïûê Îç∞Ïù¥ÌÑ∞ Îß§Ìïë ÏàòÏ†ï ÏôÑÎ£å`,
            updatedCount,
            finalInvestmentCount: finalInvestments ? finalInvestments.length : 0,
            results
        });
        
    } catch (error) {
        console.error('‚ùå Îß§Ìïë ÏàòÏ†ï Ï§ë Ïò§Î•ò:', error);
        res.json({ success: false, error: error.message });
    }
});

// ÎßàÏù¥ÌéòÏù¥ÏßÄ
app.get('/mypage', requireLogin, async (req, res) => {
    try {
        console.log(`üîç ${req.session.user.username} ÎßàÏù¥ÌéòÏù¥ÏßÄ Ï†ëÍ∑º`);
        
        // ÌòÑÏû¨ Î°úÍ∑∏Ïù∏Ìïú ÏÇ¨Ïö©ÏûêÏùò ÏÉÅÏÑ∏ Ï†ïÎ≥¥ Ï°∞Ìöå
        const { data: userProfile, error } = await supabase
            .from('members')
            .select('*')
            .eq('username', req.session.user.username)
            .single();
            
        if (error) {
            console.error('‚ùå ÏÇ¨Ïö©Ïûê ÌîÑÎ°úÌïÑ Ï°∞Ìöå Ïò§Î•ò:', error);
            // Ïò§Î•ò Ïãú ÏÑ∏ÏÖò Ï†ïÎ≥¥Îßå ÏÇ¨Ïö©
            return res.render('mypage', { 
                user: req.session.user, 
                userProfile: null,
                currentBalance: 0,
                totalInvestment: 0,
                totalProfit: 0,
                productCount: 0,
                dailyProfit: 0
            });
        }
        
        console.log(`‚úÖ ÏÇ¨Ïö©Ïûê ÌîÑÎ°úÌïÑ Ï°∞Ìöå ÏÑ±Í≥µ:`);
        console.log(`   - ID: ${userProfile.id}`);
        console.log(`   - Ïù¥Î¶Ñ: ${userProfile.name}`);
        console.log(`   - ÏÇ¨Ïö©ÏûêÎ™Ö: ${userProfile.username}`);
        console.log(`   - Ïù¥Î©îÏùº: ${userProfile.email}`);
        
        // ÏÇ¨Ïö©ÏûêÏùò Î™®Îì† Ìà¨Ïûê Îç∞Ïù¥ÌÑ∞ Ï°∞Ìöå (Î™®Îì† ÏÉÅÌÉú Ìè¨Ìï®)
        const { data: investments, error: investmentError } = await supabase
            .from('investments')
            .select(`
                *,
                created_at,
                amount,
                product_type,
                status
            `)
            .eq('member_id', userProfile.id);
        
        if (investmentError) {
            console.error(`‚ùå ${req.session.user.username} Ìà¨Ïûê Îç∞Ïù¥ÌÑ∞ Ï°∞Ìöå Ïò§Î•ò:`, investmentError);
        } else {
            console.log(`üîç ${req.session.user.username} Ìà¨Ïûê Îç∞Ïù¥ÌÑ∞ Ï°∞Ìöå Í≤∞Í≥º:`);
            console.log(`   - Ï¥ù Ìà¨Ïûê Í±¥Ïàò: ${investments ? investments.length : 0}Í±¥`);
            if (investments && investments.length > 0) {
                investments.forEach((inv, index) => {
                    console.log(`   üìã Ìà¨Ïûê ${index + 1}:`);
                    console.log(`      - ID: ${inv.id}`);
                    console.log(`      - ÏÉÅÌíàÌÉÄÏûÖ: ${inv.product_type}`);
                    console.log(`      - Ï∂úÏûêÍ∏àÏï°: ‚Ç©${parseFloat(inv.amount || 0).toLocaleString()}`);
                    console.log(`      - ÏÉÅÌÉú: ${inv.status}`);
                    console.log(`      - Ïã†Ï≤≠Ïùº: ${new Date(inv.created_at).toLocaleString('ko-KR')}`);
                });
            } else {
                console.log(`   ‚ùå Ìà¨Ïûê Îç∞Ïù¥ÌÑ∞ ÏóÜÏùå`);
            }
        }
        
        let totalInvestment = 0;
        let productCount = 0;
        let accumulatedInterest = 0;
        let approvedInvestments = [];
        
        if (!investmentError && investments && investments.length > 0) {
            // Î™®Îì† Ìà¨Ïûê Í∞úÏàò (ÏÉÅÌÉú Î¨¥Í¥Ä)
            productCount = investments.length;
            
            // ÏäπÏù∏Îêú Ìà¨ÏûêÎßå ÌïÑÌÑ∞ÎßÅ
            approvedInvestments = investments.filter(inv => inv.status === 'approved');
            
            // ÏäπÏù∏Îêú Ìà¨ÏûêÏùò ÎàÑÏ†Å Ïù¥Ïûê Í≥ÑÏÇ∞
            approvedInvestments.forEach(investment => {
                const investmentAmount = parseFloat(investment.amount || 0);
                totalInvestment += investmentAmount;
                
                // Ìà¨Ïûê ÏãúÏûëÏùºÎ°úÎ∂ÄÌÑ∞ Í≤ΩÍ≥º ÏùºÏàò Í≥ÑÏÇ∞
                const investmentDate = new Date(investment.created_at);
                const currentDate = new Date();
                const daysDiff = Math.floor((currentDate - investmentDate) / (1000 * 60 * 60 * 24));
                
                // ÏÉÅÌíàÎ≥Ñ ÏùºÏùº ÏàòÏùµÎ•† Ï†ÅÏö©
                const dailyRate = getDailyRateByProduct(investment.product_type);
                
                console.log(`üí∞ Ìà¨Ïûê ÏÉÅÌíà Ïù¥Ïûê Í≥ÑÏÇ∞:`);
                console.log(`   - ÏÉÅÌíàÌÉÄÏûÖ: ${investment.product_type}`);
                console.log(`   - Ìà¨ÏûêÍ∏àÏï°: ‚Ç©${investmentAmount.toLocaleString()}`);
                console.log(`   - Ìà¨ÏûêÏùº: ${investmentDate.toLocaleDateString('ko-KR')}`);
                console.log(`   - Í≤ΩÍ≥ºÏùºÏàò: ${daysDiff}Ïùº`);
                console.log(`   - ÏùºÏùºÏàòÏùµÎ•†: ${(dailyRate * 100).toFixed(4)}%`);
                console.log(`   - ÏòàÏÉÅÏùºÏùºÏàòÏùµ: ‚Ç©${(investmentAmount * dailyRate).toLocaleString()}`);
                
                // ÎàÑÏ†Å Ïù¥Ïûê Í≥ÑÏÇ∞ (Î≥µÎ¶¨ ÏïÑÎãå Îã®Î¶¨Î°ú Í≥ÑÏÇ∞)
                const productInterest = investmentAmount * dailyRate * daysDiff;
                console.log(`   - ÎàÑÏ†ÅÏù¥Ïûê: ‚Ç©${productInterest.toLocaleString()}`);
                accumulatedInterest += productInterest;
            });
        }
        
        // ÏÇ¨Ïö©Ïûê ÌòÑÏû¨ ÏûîÏï° Ï°∞Ìöå
        let currentBalance = await getMemberBalance(userProfile.id);
        
        // ÏûîÏï°Ïóê ÎàÑÏ†Å Ïù¥Ïûê Ï∂îÍ∞Ä (Ïã§Ï†úÎ°úÎäî Î≥ÑÎèÑ ÌÖåÏù¥Î∏îÏóêÏÑú Í¥ÄÎ¶¨Ìï¥Ïïº Ìï®)
        currentBalance += accumulatedInterest;
        
        // ÏùºÏùº ÏàòÏùµ Í≥ÑÏÇ∞ (ÏäπÏù∏Îêú Ìà¨ÏûêÏùò ÏùºÏùº ÏàòÏùµ Ìï©Í≥Ñ)
        let dailyProfit = 0;
        if (approvedInvestments && approvedInvestments.length > 0) {
            console.log(`üìä ÏùºÏùº ÏàòÏùµ Í≥ÑÏÇ∞ ÏãúÏûë:`);
            dailyProfit = approvedInvestments.reduce((sum, investment) => {
                const investmentAmount = parseFloat(investment.amount || 0);
                const dailyRate = getDailyRateByProduct(investment.product_type);
                const dailyAmount = investmentAmount * dailyRate;
                
                console.log(`   - ${investment.product_type}: ‚Ç©${investmentAmount.toLocaleString()} √ó ${(dailyRate * 100).toFixed(4)}% = ‚Ç©${dailyAmount.toLocaleString()}`);
                
                return sum + dailyAmount;
            }, 0);
            console.log(`üìä Ï¥ù ÏùºÏùº ÏàòÏùµ: ‚Ç©${dailyProfit.toLocaleString()}`);
        }
        
        console.log(`‚úÖ ${req.session.user.username} ÎßàÏù¥ÌéòÏù¥ÏßÄ Îç∞Ïù¥ÌÑ∞ Ï°∞Ìöå ÏÑ±Í≥µ`);
        console.log(`ÔøΩ ÌÜµÍ≥Ñ: Ï°∞Ìï©ÏÉÅÌíà ${productCount}Í∞ú, Ï¥ù Ï∂úÏûê ${totalInvestment.toLocaleString()}Ïõê`);
        console.log(`üí∞ ÏûîÏï°: ${currentBalance.toLocaleString()}Ïõê, ÏùºÏùº ÏàòÏùµ: ${dailyProfit.toLocaleString()}Ïõê`);
        console.log(`üéØ ÎàÑÏ†Å Ïù¥Ïûê: ${accumulatedInterest.toLocaleString()}Ïõê`);
        
        res.render('mypage', { 
            user: req.session.user, 
            userProfile: userProfile,
            currentBalance: Math.round(currentBalance),
            totalInvestment: totalInvestment,
            totalProfit: Math.round(accumulatedInterest),
            productCount: productCount,
            dailyProfit: Math.round(dailyProfit),
            investments: investments || []
        });
        
    } catch (error) {
        console.error('ÎßàÏù¥ÌéòÏù¥ÏßÄ Î°úÎìú Ï§ë Ïò§Î•ò:', error);
        res.render('mypage', { 
            user: req.session.user, 
            userProfile: null,
            currentBalance: 0,
            totalInvestment: 0,
            totalProfit: 0,
            productCount: 0,
            dailyProfit: 0,
            investments: []
        });
    }
});

// Í≥ÑÏ¢å/Ï£ºÏÜå Ï†ïÎ≥¥ ÏóÖÎç∞Ïù¥Ìä∏ API
app.post('/api/update-account-info', requireLogin, async (req, res) => {
    try {
        const { bankName, accountNumber, address, detailAddress } = req.body;
        const userId = req.session.user.id;

        // ÏûÖÎ†•Í∞í Í≤ÄÏ¶ù
        if (!bankName || !accountNumber) {
            return res.json({
                success: false,
                message: 'ÏùÄÌñâÎ™ÖÍ≥º Í≥ÑÏ¢åÎ≤àÌò∏Îäî ÌïÑÏàò ÏûÖÎ†• Ìï≠Î™©ÏûÖÎãàÎã§.'
            });
        }

        // Í≥ÑÏ¢åÎ≤àÌò∏ ÌòïÏãù Í≤ÄÏ¶ù
        const accountRegex = /^[0-9-]+$/;
        if (!accountRegex.test(accountNumber)) {
            return res.json({
                success: false,
                message: 'Í≥ÑÏ¢åÎ≤àÌò∏Îäî Ïà´ÏûêÏôÄ ÌïòÏù¥Ìîà(-)Îßå ÏûÖÎ†• Í∞ÄÎä•Ìï©ÎãàÎã§.'
            });
        }

        // Îç∞Ïù¥ÌÑ∞Î≤†Ïù¥Ïä§ ÏóÖÎç∞Ïù¥Ìä∏
        const { data, error } = await supabase
            .from('members')
            .update({
                bank_name: bankName,
                account_number: accountNumber,
                address: address || null,
                detail_address: detailAddress || null,
                updated_at: new Date().toISOString()
            })
            .eq('id', userId);

        if (error) {
            console.error('Í≥ÑÏ¢å Ï†ïÎ≥¥ ÏóÖÎç∞Ïù¥Ìä∏ Ïò§Î•ò:', error);
            return res.json({
                success: false,
                message: 'Ï†ïÎ≥¥ Ï†ÄÏû• Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§.'
            });
        }

        console.log(`‚úÖ ${req.session.user.username} Í≥ÑÏ¢å/Ï£ºÏÜå Ï†ïÎ≥¥ ÏóÖÎç∞Ïù¥Ìä∏ ÏÑ±Í≥µ`);
        res.json({
            success: true,
            message: 'Í≥ÑÏ¢å/Ï£ºÏÜå Ï†ïÎ≥¥Í∞Ä ÏÑ±Í≥µÏ†ÅÏúºÎ°ú Ï†ÄÏû•ÎêòÏóàÏäµÎãàÎã§.'
        });

    } catch (error) {
        console.error('Í≥ÑÏ¢å Ï†ïÎ≥¥ ÏóÖÎç∞Ïù¥Ìä∏ Ï§ë Ïò§Î•ò:', error);
        res.json({
            success: false,
            message: 'ÏÑúÎ≤Ñ Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§.'
        });
    }
});

// Ìà¨Ïûê ÌÜµÍ≥Ñ Í≥ÑÏÇ∞ Ìï®ÏàòÎì§
function calculateMonthlyRevenue(approvedInvestments) {
    const monthlyData = [];
    const currentDate = new Date();
    
    // ÏµúÍ∑º 12Í∞úÏõî Îç∞Ïù¥ÌÑ∞ ÏÉùÏÑ±
    for (let i = 11; i >= 0; i--) {
        const month = new Date(currentDate.getFullYear(), currentDate.getMonth() - i, 1);
        const monthName = month.toLocaleDateString('ko-KR', { month: 'long' });
        
        // Ìï¥Îãπ ÏõîÏóê ÌôúÏÑ±ÌôîÎêú Ìà¨ÏûêÎì§Ïùò ÏàòÏùµ Í≥ÑÏÇ∞
        let monthlyRevenue = 0;
        approvedInvestments.forEach(investment => {
            const investmentDate = new Date(investment.investment_date);
            if (investmentDate <= month) {
                // ÏÉÅÌíàÎ≥Ñ Ïõî ÏàòÏùµÎ•† Ï†ÅÏö© (Ïã§Ï†úÎ°úÎäî DBÏóêÏÑú Í∞ÄÏ†∏ÏôÄÏïº Ìï®)
                const monthlyRate = getMonthlyRateByProduct(investment.product_name);
                monthlyRevenue += parseFloat(investment.investment_amount || 0) * monthlyRate;
            }
        });
        
        monthlyData.push({
            month: monthName,
            revenue: Math.round(monthlyRevenue)
        });
    }
    
    return monthlyData;
}

function calculatePortfolioAnalysis(approvedInvestments) {
    const totalAmount = approvedInvestments.reduce((sum, inv) => sum + parseFloat(inv.investment_amount || 0), 0);
    if (totalAmount === 0) return [];
    
    const productMap = {};
    
    approvedInvestments.forEach(investment => {
        const productName = investment.product_name;
        const amount = parseFloat(investment.investment_amount || 0);
        
        if (productMap[productName]) {
            productMap[productName] += amount;
        } else {
            productMap[productName] = amount;
        }
    });
    
    return Object.entries(productMap).map(([productName, amount]) => ({
        productName,
        amount,
        percentage: ((amount / totalAmount) * 100).toFixed(1)
    }));
}

function calculateAverageReturn(approvedInvestments) {
    if (approvedInvestments.length === 0) return 0;
    
    const totalAmount = approvedInvestments.reduce((sum, inv) => sum + parseFloat(inv.investment_amount || 0), 0);
    if (totalAmount === 0) return 0;
    
    let weightedReturn = 0;
    approvedInvestments.forEach(investment => {
        const amount = parseFloat(investment.investment_amount || 0);
        const productRate = getAnnualRateByProduct(investment.product_name);
        weightedReturn += (amount / totalAmount) * productRate;
    });
    
    return (weightedReturn * 100).toFixed(2); // Î∞±Î∂ÑÏú®Î°ú Î∞òÌôò
}

function getMonthlyRateByProduct(productName) {
    // Ïã§Ï†úÎ°úÎäî DBÏóêÏÑú ÏÉÅÌíàÎ≥Ñ ÏàòÏùµÎ•†ÏùÑ Í∞ÄÏ†∏ÏôÄÏïº Ìï®
    const rateMap = {
        '[300KW] Îã§Ìï®Íªò ÎèôÌñâ Îâ¥Î≤†Ïù¥ÏßÅ': 0.0025, // Ïõî 0.25%
        '[500KW] Îã§Ìï®Íªò ÎèôÌñâ Î©îÍ∞Ä': 0.003,     // Ïõî 0.3%
        '[1MW] Îã§Ìï®Íªò ÎèôÌñâ Í∏∞Í∞Ä': 0.0035,       // Ïõî 0.35%
        'Í∑∏Î¶∞ Ïä§ÌÉÄÌÑ∞ Ìå®ÌÇ§ÏßÄ': 0.002,             // Ïõî 0.2%
        'ÎùºÏò® Ìå®ÌÇ§ÏßÄ': 0.0028,                   // Ïõî 0.28%
        'Ïã¨Ìîå ÏóêÏΩî Ìå®ÌÇ§ÏßÄ': 0.0022              // Ïõî 0.22%
    };
    
    return rateMap[productName] || 0.0025; // Í∏∞Î≥∏ 0.25%
}

function getAnnualRateByProduct(productName) {
    // Ïã§Ï†úÎ°úÎäî DBÏóêÏÑú ÏÉÅÌíàÎ≥Ñ Ïó∞Í∞Ñ ÏàòÏùµÎ•†ÏùÑ Í∞ÄÏ†∏ÏôÄÏïº Ìï®
    const rateMap = {
        '[300KW] Îã§Ìï®Íªò ÎèôÌñâ Îâ¥Î≤†Ïù¥ÏßÅ': 0.03,   // Ïó∞ 3%
        '[500KW] Îã§Ìï®Íªò ÎèôÌñâ Î©îÍ∞Ä': 0.036,      // Ïó∞ 3.6%
        '[1MW] Îã§Ìï®Íªò ÎèôÌñâ Í∏∞Í∞Ä': 0.042,        // Ïó∞ 4.2%
        'Í∑∏Î¶∞ Ïä§ÌÉÄÌÑ∞ Ìå®ÌÇ§ÏßÄ': 0.024,            // Ïó∞ 2.4%
        'ÎùºÏò® Ìå®ÌÇ§ÏßÄ': 0.0336,                  // Ïó∞ 3.36%
        'Ïã¨Ìîå ÏóêÏΩî Ìå®ÌÇ§ÏßÄ': 0.0264             // Ïó∞ 2.64%
    };
    
    return rateMap[productName] || 0.03; // Í∏∞Î≥∏ 3%
}

// Ï°∞Ìï©ÏÉÅÌíà Í¥ÄÎ†® ÌéòÏù¥ÏßÄÎì§
app.get('/introduce_product', requireLogin, (req, res) => {
    res.render('introduce_product', { user: req.session.user });
});

app.get('/product_list', requireLogin, (req, res) => {
    res.render('product_list', { user: req.session.user });
});

app.get('/my_investments', requireLogin, async (req, res) => {
    try {
        const memberId = req.session.user.id;
        
        // ÏÇ¨Ïö©ÏûêÏùò Ìà¨Ïûê Îç∞Ïù¥ÌÑ∞ Ï°∞Ìöå (Î™®Îì† ÏÉÅÌÉúÏùò Ìà¨Ïûê Ìè¨Ìï®)
        const { data: investments, error } = await supabase
            .from('investments')
            .select('*')
            .eq('member_id', memberId)
            .order('created_at', { ascending: false });
        
        if (error) {
            console.error('Ìà¨Ïûê Îç∞Ïù¥ÌÑ∞ Ï°∞Ìöå Ïò§Î•ò:', error);
            return res.render('my_investments', { 
                user: req.session.user,
                investments: [],
                currentBalance: 0,
                error: 'Ìà¨Ïûê Îç∞Ïù¥ÌÑ∞Î•º Î∂àÎü¨Ïò§Îäî Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§.'
            });
        }
        
        // ÌÖúÌîåÎ¶ø Ìò∏ÌôòÏÑ±ÏùÑ ÏúÑÌï¥ Îç∞Ïù¥ÌÑ∞ Î≥ÄÌôò (amount -> investment_amount)
        const formattedInvestments = (investments || []).map(investment => ({
            ...investment,
            investment_amount: investment.amount || investment.investment_amount || 0,
            // ÏÉÅÌíà Ïù¥Î¶ÑÏù¥ ÏóÜÏúºÎ©¥ product_typeÏù¥ÎÇò product_nameÏóêÏÑú Í∞ÄÏ†∏Ïò§Í∏∞
            product_name: investment.product_name || 
                         getProductNameFromType(investment.product_type) || 
                         investment.product || 
                         'Ïïå Ïàò ÏóÜÎäî ÏÉÅÌíà',
            // Ìà¨Ïûê ÎÇ†Ïßú ÏÑ§Ï†ï (created_atÏù¥ÎÇò investment_date ÏÇ¨Ïö©)
            investment_date: investment.investment_date || investment.created_at || new Date().toISOString(),
            // ÏÉÅÌÉú Ï†ïÍ∑úÌôî (DBÏùò Ïã§Ï†ú ÏÉÅÌÉúÎ•º ÌÖúÌîåÎ¶øÏóêÏÑú Ïù¥Ìï¥Ìï† Ïàò ÏûàÎäî ÌòïÌÉúÎ°ú Î≥ÄÌôò)
            displayStatus: investment.status === 'approved' ? 'active' : 
                          investment.status === 'rejected' ? 'rejected' : 
                          investment.status === 'completed' ? 'completed' : 'pending',
            // ÏõêÎ≥∏ ÏÉÅÌÉúÎèÑ Ïú†ÏßÄ
            originalStatus: investment.status
        }));
        
        // Ïã§Ï†ú Îç∞Ïù¥ÌÑ∞ Í∏∞Î∞ò ÌÜµÍ≥Ñ Í≥ÑÏÇ∞
        const approvedInvestments = formattedInvestments.filter(inv => inv.originalStatus === 'approved');
        const rejectedInvestments = formattedInvestments.filter(inv => inv.originalStatus === 'rejected');
        const pendingInvestments = formattedInvestments.filter(inv => inv.originalStatus === 'pending');
        const completedInvestments = formattedInvestments.filter(inv => inv.originalStatus === 'completed');
        
        // Ï¥ù Ï∂úÏûê Í∏àÏï° (ÏäπÏù∏Îêú Ìà¨ÏûêÎßå)
        const totalInvestmentAmount = approvedInvestments.reduce((sum, inv) => sum + parseFloat(inv.investment_amount || 0), 0);
        
        // ÏßÑÌñâÏ§ëÏù∏ Ìà¨Ïûê Í∞úÏàò (ÏäπÏù∏Îêú Ìà¨Ïûê)
        const activeInvestmentCount = approvedInvestments.length;
        
        // ÏõîÎ≥Ñ ÏàòÏùµ Í≥ÑÏÇ∞ (Ïã§Ï†ú Ìà¨Ïûê ÏãúÏûëÏùº Í∏∞Ï§Ä)
        const monthlyRevenue = calculateMonthlyRevenue(approvedInvestments);
        
        // Ìè¨Ìä∏Ìè¥Î¶¨Ïò§ Î∂ÑÏÑù (ÏÉÅÌíàÎ≥Ñ ÎπÑÏ§ë)
        const portfolioAnalysis = calculatePortfolioAnalysis(approvedInvestments);
        
        // ÌèâÍ∑† ÏàòÏùµÎ•† Í≥ÑÏÇ∞ (ÏÉÅÌíàÎ≥Ñ ÏàòÏùµÎ•†Ïùò Í∞ÄÏ§ëÌèâÍ∑†)
        const averageReturn = calculateAverageReturn(approvedInvestments);
        
        // ÏÇ¨Ïö©Ïûê ÏûîÏï° Ï°∞Ìöå
        const currentBalance = await getMemberBalance(memberId);
        
        console.log(`‚úÖ ${req.session.user.username} Ìà¨Ïûê ÌòÑÌô© Ï°∞Ìöå ÏÑ±Í≥µ: ${formattedInvestments.length}Í±¥ (ÏäπÏù∏: ${activeInvestmentCount}Í±¥)`);
        
        res.render('my_investments', { 
            user: req.session.user,
            investments: formattedInvestments,
            currentBalance: currentBalance,
            // Ïã§ÏãúÍ∞Ñ ÌÜµÍ≥Ñ Îç∞Ïù¥ÌÑ∞
            totalInvestmentAmount: totalInvestmentAmount,
            activeInvestmentCount: activeInvestmentCount,
            monthlyRevenue: monthlyRevenue,
            portfolioAnalysis: portfolioAnalysis,
            averageReturn: averageReturn,
            // ÏÉÅÌÉúÎ≥Ñ Í∞úÏàò
            approvedCount: approvedInvestments.length,
            rejectedCount: rejectedInvestments.length,
            pendingCount: pendingInvestments.length,
            completedCount: completedInvestments.length
        });
    } catch (error) {
        console.error('Ìà¨Ïûê ÌòÑÌô© ÌéòÏù¥ÏßÄ Ïò§Î•ò:', error);
        res.render('my_investments', { 
            user: req.session.user,
            investments: [],
            currentBalance: 0,
            error: 'ÌéòÏù¥ÏßÄÎ•º Î∂àÎü¨Ïò§Îäî Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§.'
        });
    }
});

app.get('/withdraw_request', requireLogin, async (req, res) => {
    try {
        const memberId = req.session.user.id;
        
        // ÏÇ¨Ïö©Ïûê ÏûîÏï° Ï°∞Ìöå
        const currentBalance = await getMemberBalance(memberId);
        
        // ÏÇ¨Ïö©Ïûê ÌîÑÎ°úÌïÑ Ï†ïÎ≥¥ Ï°∞Ìöå
        const { data: userProfile, error: profileError } = await supabase
            .from('members')
            .select('*')
            .eq('id', memberId)
            .single();
        
        if (profileError) {
            console.error('ÏÇ¨Ïö©Ïûê ÌîÑÎ°úÌïÑ Ï°∞Ìöå Ïò§Î•ò:', profileError);
        }
        
        res.render('withdraw_request', { 
            user: req.session.user,
            userProfile: userProfile || {},
            currentBalance: currentBalance
        });
    } catch (error) {
        console.error('ÏûÖÏ∂úÍ∏à ÌéòÏù¥ÏßÄ Î°úÎìú Ïò§Î•ò:', error);
        res.render('withdraw_request', { 
            user: req.session.user,
            userProfile: {},
            currentBalance: 0
        });
    }
});

app.get('/investment_detail', requireLogin, async (req, res) => {
    try {
        const memberId = req.session.user.id;
        const currentBalance = await getMemberBalance(memberId);
        
        res.render('investment_detail', { 
            user: req.session.user,
            currentBalance: currentBalance
        });
    } catch (error) {
        console.error('Ìà¨Ïûê ÏÉÅÏÑ∏ ÌéòÏù¥ÏßÄ Î°úÎìú Ïò§Î•ò:', error);
        res.render('investment_detail', { 
            user: req.session.user,
            currentBalance: 0
        });
    }
});

app.get('/investment_detail_300kw', requireLogin, async (req, res) => {
    try {
        const memberId = req.session.user.id;
        const currentBalance = await getMemberBalance(memberId);
        
        res.render('investment_detail_300kw', { 
            user: req.session.user,
            currentBalance: currentBalance
        });
    } catch (error) {
        console.error('300kw Ìà¨Ïûê ÏÉÅÏÑ∏ ÌéòÏù¥ÏßÄ Î°úÎìú Ïò§Î•ò:', error);
        res.render('investment_detail_300kw', { 
            user: req.session.user,
            currentBalance: 0
        });
    }
});

app.get('/investment_detail_500kw', requireLogin, async (req, res) => {
    try {
        const memberId = req.session.user.id;
        const currentBalance = await getMemberBalance(memberId);
        
        res.render('investment_detail_500kw', { 
            user: req.session.user,
            currentBalance: currentBalance
        });
    } catch (error) {
        console.error('500kw Ìà¨Ïûê ÏÉÅÏÑ∏ ÌéòÏù¥ÏßÄ Î°úÎìú Ïò§Î•ò:', error);
        res.render('investment_detail_500kw', { 
            user: req.session.user,
            currentBalance: 0
        });
    }
});

app.get('/investment_detail_green_starter', requireLogin, async (req, res) => {
    try {
        const memberId = req.session.user.id;
        const currentBalance = await getMemberBalance(memberId);
        
        res.render('investment_detail_green_starter', { 
            user: req.session.user,
            currentBalance: currentBalance
        });
    } catch (error) {
        console.error('Í∑∏Î¶∞ Ïä§ÌÉÄÌÑ∞ Ìà¨Ïûê ÏÉÅÏÑ∏ ÌéòÏù¥ÏßÄ Î°úÎìú Ïò§Î•ò:', error);
        res.render('investment_detail_green_starter', { 
            user: req.session.user,
            currentBalance: 0
        });
    }
});

app.get('/investment_detail_laon', requireLogin, async (req, res) => {
    try {
        const memberId = req.session.user.id;
        const currentBalance = await getMemberBalance(memberId);
        
        res.render('investment_detail_laon', { 
            user: req.session.user,
            currentBalance: currentBalance
        });
    } catch (error) {
        console.error('ÎùºÏò® Ìà¨Ïûê ÏÉÅÏÑ∏ ÌéòÏù¥ÏßÄ Î°úÎìú Ïò§Î•ò:', error);
        res.render('investment_detail_laon', { 
            user: req.session.user,
            currentBalance: 0
        });
    }
});

app.get('/investment_detail_simple_eco', requireLogin, async (req, res) => {
    try {
        const memberId = req.session.user.id;
        const currentBalance = await getMemberBalance(memberId);
        
        res.render('investment_detail_simple_eco', { 
            user: req.session.user,
            currentBalance: currentBalance
        });
    } catch (error) {
        console.error('Ïã¨Ìîå ÏóêÏΩî Ìà¨Ïûê ÏÉÅÏÑ∏ ÌéòÏù¥ÏßÄ Î°úÎìú Ïò§Î•ò:', error);
        res.render('investment_detail_simple_eco', { 
            user: req.session.user,
            currentBalance: 0
        });
    }
});

// Í∏∞ÏóÖ ÏÜåÍ∞ú ÌéòÏù¥ÏßÄÎì§
app.get('/introduce_service', (req, res) => {
    res.render('introduce_service', { user: req.session.user });
});

app.get('/ceo_message', (req, res) => {
    res.render('ceo_message', { user: req.session.user });
});

app.get('/history', (req, res) => {
    res.render('history', { user: req.session.user });
});

// Í≥†Í∞ùÏÑºÌÑ∞ ÌéòÏù¥ÏßÄÎì§
app.get('/faq', (req, res) => {
    res.render('faq', { user: req.session.user });
});

app.get('/announcements', (req, res) => {
    res.render('announcements', { user: req.session.user });
});

app.get('/project_gallery', (req, res) => {
    res.render('project_gallery', { user: req.session.user });
});

app.get('/inquiry_list', (req, res) => {
    res.render('inquiry_list', { user: req.session.user });
});

app.get('/my_inquiry', requireLogin, (req, res) => {
    res.render('my_inquiry', { user: req.session.user });
});

// Í¥ÄÎ¶¨Ïûê ÌéòÏù¥ÏßÄÎì§
app.get('/admin/login', (req, res) => {
    res.render('admin/login');
});

app.get('/admin', requireAdmin, (req, res) => {
    res.redirect('/admin/dashboard');
});

app.get('/admin/member-manager', requireAdmin, (req, res) => {
    res.render('admin/member-manager', { user: req.session.user, currentPage: 'member-manager' });
});

app.get('/admin/dashboard', requireAdmin, (req, res) => {
    res.render('admin/dashboard', { user: req.session.user, currentPage: 'dashboard' });
});

app.get('/admin/investment-manager', requireAdmin, (req, res) => {
    res.render('admin/investment-manager', { user: req.session.user, currentPage: 'investment-manager' });
});

app.get('/admin/popup-manager', requireAdmin, (req, res) => {
    res.render('admin/popup-manager', { user: req.session.user, currentPage: 'popup-manager' });
});

app.get('/admin/site-settings', requireAdmin, (req, res) => {
    res.render('admin/site-settings', { user: req.session.user, currentPage: 'site-settings' });
});

app.get('/admin/account-manager', requireAdmin, async (req, res) => {
    try {
        // Î™®Îì† Ï°∞Ìï©Ïõê Ï†ïÎ≥¥ÏôÄ ÏûîÏï° Ï°∞Ìöå
        const { data: members, error: membersError } = await supabase
            .from('members')
            .select('id, username, name, email, phone, bank_name, account_number, created_at')
            .order('created_at', { ascending: false });
        
        if (membersError) {
            console.error('Ï°∞Ìï©Ïõê Î™©Î°ù Ï°∞Ìöå Ïò§Î•ò:', membersError);
            return res.render('admin/account-manager', { 
                user: req.session.user, 
                currentPage: 'account-manager',
                members: [],
                error: 'Ï°∞Ìï©Ïõê Î™©Î°ùÏùÑ Î∂àÎü¨Ïò§Îäî Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§.'
            });
        }
        
        // Í∞Å Ï°∞Ìï©ÏõêÏùò ÏûîÏï°Í≥º Ìà¨Ïûê Ï†ïÎ≥¥ Ï°∞Ìöå
        const membersWithBalance = await Promise.all(
            members.map(async (member) => {
                const balance = await getMemberBalance(member.id);
                
                // Ï¥ù Ìà¨Ïûê Í∏àÏï° Ï°∞Ìöå
                const { data: investments } = await supabase
                    .from('investments')
                    .select('amount')
                    .eq('member_id', member.id)
                    .eq('status', 'approved');
                
                const totalInvestment = investments 
                    ? investments.reduce((sum, inv) => sum + parseFloat(inv.amount), 0)
                    : 0;
                
                return {
                    ...member,
                    balance: balance,
                    totalInvestment: totalInvestment
                };
            })
        );
        
        res.render('admin/account-manager', { 
            user: req.session.user, 
            currentPage: 'account-manager',
            members: membersWithBalance
        });
        
    } catch (error) {
        console.error('Í≥ÑÏ¢å Í¥ÄÎ¶¨ ÌéòÏù¥ÏßÄ Ïò§Î•ò:', error);
        res.render('admin/account-manager', { 
            user: req.session.user, 
            currentPage: 'account-manager',
            members: [],
            error: 'ÌéòÏù¥ÏßÄÎ•º Î∂àÎü¨Ïò§Îäî Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§.'
        });
    }
});

app.get('/admin/notice-manager', requireAdmin, (req, res) => {
    res.render('admin/notice-manager', { user: req.session.user, currentPage: 'notice-manager' });
});

app.get('/admin/inquiry-manager', requireAdmin, (req, res) => {
    res.render('admin/inquiry-manager', { user: req.session.user, currentPage: 'inquiry-manager' });
});

app.get('/admin/transaction-management', requireAdmin, async (req, res) => {
    try {
        // Í±∞Îûò ÎÇ¥Ïó≠ Ï°∞Ìöå
        const { data: transactions, error: transactionsError } = await supabase
            .from('transactions')
            .select(`
                *,
                members:member_id (
                    username,
                    name
                )
            `)
            .order('created_at', { ascending: false })
            .limit(100);
        
        if (transactionsError) {
            console.error('Í±∞ÎûòÎÇ¥Ïó≠ Ï°∞Ìöå Ïò§Î•ò:', transactionsError);
            return res.render('admin/transaction-management', { 
                user: req.session.user, 
                currentPage: 'transaction-management',
                transactions: [],
                error: 'Í±∞ÎûòÎÇ¥Ïó≠ÏùÑ Î∂àÎü¨Ïò§Îäî Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§.'
            });
        }
        
        res.render('admin/transaction-management', { 
            user: req.session.user, 
            currentPage: 'transaction-management',
            transactions: transactions || []
        });
        
    } catch (error) {
        console.error('Í±∞Îûò Í¥ÄÎ¶¨ ÌéòÏù¥ÏßÄ Ïò§Î•ò:', error);
        res.render('admin/transaction-management', { 
            user: req.session.user, 
            currentPage: 'transaction-management',
            transactions: [],
            error: 'ÌéòÏù¥ÏßÄÎ•º Î∂àÎü¨Ïò§Îäî Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§.'
        });
    }
});

// API ÏóîÎìúÌè¨Ïù∏Ìä∏Îì§

// Í≥µÏßÄÏÇ¨Ìï≠ Îç∞Ïù¥ÌÑ∞ (ÏÉòÌîå)
let notices = [
    {
        id: 1,
        title: "ÌïúÏñëÏóêÎÑàÏßÄ Ìà¨Ïûê ÏÉÅÌíà ÏïàÎÇ¥",
        content: "ÏïàÎÖïÌïòÏÑ∏Ïöî. ÌïúÏñëÏóêÎÑàÏßÄÌòëÎèôÏ°∞Ìï©ÏûÖÎãàÎã§.\n\nÏÉàÎ°úÏö¥ Ìà¨Ïûê ÏÉÅÌíàÏóê ÎåÄÌï¥ ÏïàÎÇ¥ÎìúÎ¶ΩÎãàÎã§.\n\n1. 300KW Îã§Ìï®Íªò ÎèôÌñâ Îâ¥Î≤†Ïù¥ÏßÅ\n2. 1MW Îã§Ìï®Íªò ÎèôÌñâ Î©îÍ∞Ä\n3. Í∑∏Î¶∞ Ïä§ÌÉÄÌÑ∞ Ìå®ÌÇ§ÏßÄ\n\nÏûêÏÑ∏Ìïú ÎÇ¥Ïö©ÏùÄ Ìà¨Ïûê ÏÉÅÌíà ÌéòÏù¥ÏßÄÎ•º ÌôïÏù∏Ìï¥Ï£ºÏÑ∏Ïöî.",
        status: "published",
        isPinned: true,
        createdAt: "2025-01-10",
        updatedAt: "2025-01-10",
        views: 245,
        author: "Í¥ÄÎ¶¨Ïûê"
    },
    {
        id: 2,
        title: "2025ÎÖÑ ÏÉÅÎ∞òÍ∏∞ Ìà¨Ïûê ÏÑ§Î™ÖÌöå ÏïàÎÇ¥",
        content: "2025ÎÖÑ ÏÉÅÎ∞òÍ∏∞ Ìà¨Ïûê ÏÑ§Î™ÖÌöåÎ•º Îã§ÏùåÍ≥º Í∞ôÏù¥ Í∞úÏµúÌï©ÎãàÎã§.\n\nÏùºÏãú: 2025ÎÖÑ 2Ïõî 15Ïùº Ïò§ÌõÑ 2Ïãú\nÏû•ÏÜå: ÌïúÏñëÏóêÎÑàÏßÄ Î≥∏ÏÇ¨ ÏÑ∏ÎØ∏ÎÇòÏã§\n\nÎßéÏùÄ Ï∞∏Ïó¨ Î∂ÄÌÉÅÎìúÎ¶ΩÎãàÎã§.",
        status: "published",
        isPinned: false,
        createdAt: "2025-01-05",
        updatedAt: "2025-01-05",
        views: 189,
        author: "Í¥ÄÎ¶¨Ïûê"
    },
    {
        id: 3,
        title: "ÏãúÏä§ÌÖú Ï†êÍ≤Ä ÏïàÎÇ¥",
        content: "ÏãúÏä§ÌÖú ÏïàÏ†ïÏÑ± Ìñ•ÏÉÅÏùÑ ÏúÑÌï¥ Ï†ïÍ∏∞ Ï†êÍ≤ÄÏùÑ Ïã§ÏãúÌï©ÎãàÎã§.\n\nÏ†êÍ≤Ä ÏùºÏãú: 2025ÎÖÑ 1Ïõî 25Ïùº ÏÉàÎ≤Ω 2Ïãú ~ 4Ïãú\n\nÏ†êÍ≤Ä Ï§ëÏóêÎäî ÏÑúÎπÑÏä§ Ïù¥Ïö©Ïù¥ Ï†úÌïúÎê† Ïàò ÏûàÏäµÎãàÎã§.",
        status: "draft",
        isPinned: false,
        createdAt: "2025-01-08",
        updatedAt: "2025-01-08",
        views: 0,
        author: "Í¥ÄÎ¶¨Ïûê"
    }
];

// Í≥µÏßÄÏÇ¨Ìï≠ Î™©Î°ù Ï°∞Ìöå (Í¥ÄÎ¶¨ÏûêÏö©)
app.get('/api/notices', requireAdmin, (req, res) => {
    res.json({ success: true, data: notices });
});

// Í≥µÏßÄÏÇ¨Ìï≠ ÏÉùÏÑ± (Í¥ÄÎ¶¨ÏûêÏö©)
app.post('/api/notices', requireAdmin, (req, res) => {
    const { title, content, status, isPinned } = req.body;
    
    if (!title || !content) {
        return res.json({ success: false, message: 'Ï†úÎ™©Í≥º ÎÇ¥Ïö©ÏùÑ ÏûÖÎ†•Ìï¥Ï£ºÏÑ∏Ïöî.' });
    }
    
    const newNotice = {
        id: Date.now(),
        title,
        content,
        status: status || 'draft',
        isPinned: isPinned || false,
        createdAt: new Date().toISOString().split('T')[0],
        updatedAt: new Date().toISOString().split('T')[0],
        views: 0,
        author: req.session.user.name
    };
    
    notices.unshift(newNotice);
    res.json({ success: true, message: 'Í≥µÏßÄÏÇ¨Ìï≠Ïù¥ ÏÑ±Í≥µÏ†ÅÏúºÎ°ú Îì±Î°ùÎêòÏóàÏäµÎãàÎã§.', data: newNotice });
});

// Í≥µÏßÄÏÇ¨Ìï≠ ÏàòÏ†ï (Í¥ÄÎ¶¨ÏûêÏö©)
app.put('/api/notices/:id', requireAdmin, (req, res) => {
    const { id } = req.params;
    const { title, content, status, isPinned } = req.body;
    
    const noticeIndex = notices.findIndex(n => n.id === parseInt(id));
    if (noticeIndex === -1) {
        return res.json({ success: false, message: 'Í≥µÏßÄÏÇ¨Ìï≠ÏùÑ Ï∞æÏùÑ Ïàò ÏóÜÏäµÎãàÎã§.' });
    }
    
    notices[noticeIndex] = {
        ...notices[noticeIndex],
        title: title || notices[noticeIndex].title,
        content: content || notices[noticeIndex].content,
        status: status || notices[noticeIndex].status,
        isPinned: isPinned !== undefined ? isPinned : notices[noticeIndex].isPinned,
        updatedAt: new Date().toISOString().split('T')[0]
    };
    
    res.json({ success: true, message: 'Í≥µÏßÄÏÇ¨Ìï≠Ïù¥ ÏÑ±Í≥µÏ†ÅÏúºÎ°ú ÏàòÏ†ïÎêòÏóàÏäµÎãàÎã§.' });
});

// Í≥µÏßÄÏÇ¨Ìï≠ ÏÇ≠Ï†ú (Í¥ÄÎ¶¨ÏûêÏö©)
app.delete('/api/notices/:id', requireAdmin, (req, res) => {
    const { id } = req.params;
    
    const noticeIndex = notices.findIndex(n => n.id === parseInt(id));
    if (noticeIndex === -1) {
        return res.json({ success: false, message: 'Í≥µÏßÄÏÇ¨Ìï≠ÏùÑ Ï∞æÏùÑ Ïàò ÏóÜÏäµÎãàÎã§.' });
    }
    
    notices.splice(noticeIndex, 1);
    res.json({ success: true, message: 'Í≥µÏßÄÏÇ¨Ìï≠Ïù¥ ÏÑ±Í≥µÏ†ÅÏúºÎ°ú ÏÇ≠Ï†úÎêòÏóàÏäµÎãàÎã§.' });
});

// Î¨∏ÏùòÏÇ¨Ìï≠ ÏûëÏÑ± API
app.post('/api/inquiries', async (req, res) => {
    try {
        const { name, email, phone, subject, message } = req.body;
        
        console.log('üìù ÏÉàÎ°úÏö¥ Î¨∏Ïùò Ï†ëÏàò:', {
            name,
            email,
            phone: phone || 'ÎØ∏Ï†úÍ≥µ',
            subject,
            messageLength: message?.length || 0
        });

        // ÌïÑÏàò ÌïÑÎìú Í≤ÄÏ¶ù
        if (!name || !email || !subject || !message) {
            return res.status(400).json({ 
                success: false, 
                message: 'ÌïÑÏàò Ï†ïÎ≥¥Î•º Î™®Îëê ÏûÖÎ†•Ìï¥Ï£ºÏÑ∏Ïöî.' 
            });
        }

        // Îç∞Ïù¥ÌÑ∞Î≤†Ïù¥Ïä§Ïóê Î¨∏Ïùò Ï†ÄÏû•
        const { data, error } = await supabase
            .from('inquiries')
            .insert([
                {
                    member_id: req.session?.user?.id || null, // Î°úÍ∑∏Ïù∏Ìïú ÏÇ¨Ïö©ÏûêÏùò ID
                    name: name.trim(),
                    email: email.trim(),
                    subject: subject.trim(),
                    message: message.trim(),
                    status: 'pending'
                }
            ])
            .select()
            .single();

        if (error) {
            console.error('‚ùå Î¨∏Ïùò Ï†ÄÏû• Ïã§Ìå®:', error);
            return res.status(500).json({ 
                success: false, 
                message: 'Î¨∏Ïùò Ï†ÄÏû• Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§.' 
            });
        }

        console.log('‚úÖ Î¨∏Ïùò Ï†ÄÏû• ÏÑ±Í≥µ:', data.id);
        
        res.json({ 
            success: true, 
            message: 'Î¨∏ÏùòÍ∞Ä ÏÑ±Í≥µÏ†ÅÏúºÎ°ú Ï†ëÏàòÎêòÏóàÏäµÎãàÎã§.',
            inquiryId: data.id
        });

    } catch (error) {
        console.error('‚ùå Î¨∏Ïùò Ï†ëÏàò Ïò§Î•ò:', error);
        res.status(500).json({ 
            success: false, 
            message: 'ÏÑúÎ≤Ñ Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§.' 
        });
    }
});

// Î¨∏Ïùò Î™©Î°ù Ï°∞Ìöå (Í¥ÄÎ¶¨ÏûêÏö©) - Îç∞Ïù¥ÌÑ∞Î≤†Ïù¥Ïä§ÏóêÏÑú Ï°∞Ìöå
app.get('/api/inquiries', requireAdmin, async (req, res) => {
    try {
        console.log('üìã Í¥ÄÎ¶¨Ïûê Î¨∏Ïùò Î™©Î°ù Ï°∞Ìöå');
        
        const { data: inquiries, error } = await supabase
            .from('inquiries')
            .select('*')
            .order('created_at', { ascending: false });

        if (error) {
            console.error('‚ùå Î¨∏Ïùò Î™©Î°ù Ï°∞Ìöå Ïã§Ìå®:', error);
            return res.status(500).json({ 
                success: false, 
                message: 'Î¨∏Ïùò Î™©Î°ù Ï°∞Ìöå Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§.' 
            });
        }

        // ÌîÑÎ°†Ìä∏ÏóîÎìú Ìò∏ÌôòÏÑ±ÏùÑ ÏúÑÌï¥ ÌïÑÎìúÎ™Ö Î≥ÄÌôò
        const formattedInquiries = inquiries.map(inquiry => ({
            id: inquiry.id,
            name: inquiry.name,
            email: inquiry.email,
            phone: inquiry.phone || 'ÎØ∏Ï†úÍ≥µ',
            title: inquiry.subject, // subject -> title
            content: inquiry.message, // message -> content
            createdAt: new Date(inquiry.created_at).toLocaleDateString('ko-KR'), // created_at -> createdAt (ÌïúÍµ≠ ÎÇ†Ïßú ÌòïÏãù)
            status: inquiry.status,
            reply: inquiry.admin_reply,
            replyDate: inquiry.replied_at ? new Date(inquiry.replied_at).toLocaleDateString('ko-KR') : null
        }));

        console.log(`‚úÖ Î¨∏Ïùò Î™©Î°ù Ï°∞Ìöå ÏÑ±Í≥µ: ${formattedInquiries?.length || 0}Í±¥`);
        
        res.json({ 
            success: true, 
            data: formattedInquiries || []
        });

    } catch (error) {
        console.error('‚ùå Î¨∏Ïùò Î™©Î°ù Ï°∞Ìöå Ïò§Î•ò:', error);
        res.status(500).json({ 
            success: false, 
            message: 'ÏÑúÎ≤Ñ Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§.' 
        });
    }
});

// Î¨∏Ïùò ÎãµÎ≥Ä Ï≤òÎ¶¨ (Í¥ÄÎ¶¨ÏûêÏö©)
app.post('/api/inquiries/:id/reply', requireAdmin, async (req, res) => {
    try {
        const { id } = req.params;
        const { reply } = req.body;
        
        console.log(`üí¨ Î¨∏Ïùò ÎãµÎ≥Ä Ï≤òÎ¶¨: ${id}`);

        if (!reply || !reply.trim()) {
            return res.status(400).json({ 
                success: false, 
                message: 'ÎãµÎ≥Ä ÎÇ¥Ïö©ÏùÑ ÏûÖÎ†•Ìï¥Ï£ºÏÑ∏Ïöî.' 
            });
        }

        const { data, error } = await supabase
            .from('inquiries')
            .update({
                admin_reply: reply.trim(),
                status: 'answered',
                replied_at: new Date().toISOString()
            })
            .eq('id', id)
            .select()
            .single();

        if (error) {
            console.error('‚ùå Î¨∏Ïùò ÎãµÎ≥Ä Ïã§Ìå®:', error);
            return res.status(500).json({ 
                success: false, 
                message: 'ÎãµÎ≥Ä Ï†ÄÏû• Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§.' 
            });
        }

        if (!data) {
            return res.status(404).json({ 
                success: false, 
                message: 'Î¨∏ÏùòÎ•º Ï∞æÏùÑ Ïàò ÏóÜÏäµÎãàÎã§.' 
            });
        }

        console.log('‚úÖ Î¨∏Ïùò ÎãµÎ≥Ä ÏôÑÎ£å:', data.id);
        
        res.json({ 
            success: true, 
            message: 'ÎãµÎ≥ÄÏù¥ ÏÑ±Í≥µÏ†ÅÏúºÎ°ú Ï†ÑÏÜ°ÎêòÏóàÏäµÎãàÎã§.' 
        });

    } catch (error) {
        console.error('‚ùå Î¨∏Ïùò ÎãµÎ≥Ä Ïò§Î•ò:', error);
        res.status(500).json({ 
            success: false, 
            message: 'ÏÑúÎ≤Ñ Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§.' 
        });
    }
});

// ÏÇ¨Ïö©ÏûêÎ≥Ñ Î¨∏Ïùò Ï°∞Ìöå API
app.get('/api/my-inquiries', requireLogin, async (req, res) => {
    try {
        const userId = req.session.user.id;
        
        console.log(`üìã ÏÇ¨Ïö©Ïûê Î¨∏Ïùò Ï°∞Ìöå: ${userId}`);

        const { data, error } = await supabase
            .from('inquiries')
            .select('*')
            .eq('member_id', userId)
            .order('created_at', { ascending: false });

        if (error) {
            console.error('‚ùå ÏÇ¨Ïö©Ïûê Î¨∏Ïùò Ï°∞Ìöå Ïã§Ìå®:', error);
            return res.status(500).json({ 
                success: false, 
                message: 'Î¨∏Ïùò Ï°∞Ìöå Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§.' 
            });
        }

        // ÌïÑÎìúÎ™Ö Îß§Ìïë Î∞è ÎÇ†Ïßú Ìè¨Îß∑ÌåÖ
        const mappedData = data.map(inquiry => {
            const createdDate = new Date(inquiry.created_at);
            const repliedDate = inquiry.replied_at ? new Date(inquiry.replied_at) : null;
            
            return {
                id: inquiry.id,
                title: inquiry.subject || '', // subject -> title
                content: inquiry.message || '', // message -> content
                category: inquiry.category || 'ÏùºÎ∞ò Î¨∏Ïùò',
                status: inquiry.status === 'answered' ? 'replied' : inquiry.status, // status Îß§Ìïë
                createdAt: createdDate.toLocaleDateString('ko-KR', {
                    year: 'numeric',
                    month: '2-digit',
                    day: '2-digit'
                }).replace(/\. /g, '.').replace('.', ''), // 2024.03.15 ÌòïÌÉú
                createdTime: createdDate.toLocaleTimeString('ko-KR', {
                    hour: '2-digit',
                    minute: '2-digit',
                    hour12: false
                }),
                adminReply: inquiry.admin_reply || null,
                repliedAt: repliedDate ? repliedDate.toLocaleDateString('ko-KR', {
                    year: 'numeric',
                    month: '2-digit',
                    day: '2-digit'
                }).replace(/\. /g, '.').replace('.', '') : null,
                repliedTime: repliedDate ? repliedDate.toLocaleTimeString('ko-KR', {
                    hour: '2-digit',
                    minute: '2-digit',
                    hour12: false
                }) : null,
                phone: inquiry.phone || '',
                email: inquiry.email || ''
            };
        });

        console.log(`‚úÖ ÏÇ¨Ïö©Ïûê Î¨∏Ïùò Ï°∞Ìöå ÏôÑÎ£å: ${mappedData.length}Í±¥`);
        
        res.json({ 
            success: true, 
            inquiries: mappedData
        });

    } catch (error) {
        console.error('‚ùå ÏÇ¨Ïö©Ïûê Î¨∏Ïùò Ï°∞Ìöå Ïò§Î•ò:', error);
        res.status(500).json({ 
            success: false, 
            message: 'ÏÑúÎ≤Ñ Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§.' 
        });
    }
});

// Î¨∏Ïùò ÏÇ≠Ï†ú (Í¥ÄÎ¶¨ÏûêÏö©)
app.delete('/api/inquiries/:id', requireAdmin, async (req, res) => {
    try {
        const { id } = req.params;
        
        console.log(`üóëÔ∏è Î¨∏Ïùò ÏÇ≠Ï†ú: ${id}`);

        const { error } = await supabase
            .from('inquiries')
            .delete()
            .eq('id', id);

        if (error) {
            console.error('‚ùå Î¨∏Ïùò ÏÇ≠Ï†ú Ïã§Ìå®:', error);
            return res.status(500).json({ 
                success: false, 
                message: 'Î¨∏Ïùò ÏÇ≠Ï†ú Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§.' 
            });
        }

        console.log('‚úÖ Î¨∏Ïùò ÏÇ≠Ï†ú ÏôÑÎ£å');
        
        res.json({ 
            success: true, 
            message: 'Î¨∏ÏùòÍ∞Ä ÏÑ±Í≥µÏ†ÅÏúºÎ°ú ÏÇ≠Ï†úÎêòÏóàÏäµÎãàÎã§.' 
        });

    } catch (error) {
        console.error('‚ùå Î¨∏Ïùò ÏÇ≠Ï†ú Ïò§Î•ò:', error);
        res.status(500).json({ 
            success: false, 
            message: 'ÏÑúÎ≤Ñ Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§.' 
        });
    }
});

// ÌåùÏóÖ Îç∞Ïù¥ÌÑ∞ Ï†ÄÏû•ÏÜå (SupabaseÏóêÏÑú Î°úÎìú)
let popups = [];

// ÏÇ¨Ïù¥Ìä∏ ÏÑ§Ï†ï Îç∞Ïù¥ÌÑ∞ (SupabaseÏóêÏÑú Î°úÎìú)
let siteSettings = {};

// ÏÑúÎ≤Ñ ÏãúÏûë Ïãú SupabaseÏóêÏÑú Îç∞Ïù¥ÌÑ∞ Î°úÎìú
async function loadDataFromSupabase() {
    try {
        // ÌåùÏóÖ Îç∞Ïù¥ÌÑ∞ Î°úÎìú
        const { data: popupData, error: popupError } = await supabase
            .from('popups')
            .select('*')
            .order('created_at', { ascending: false });
        
        if (popupError) {
            console.error('ÌåùÏóÖ Îç∞Ïù¥ÌÑ∞ Î°úÎìú Ïò§Î•ò:', popupError);
            // Í∏∞Î≥∏Í∞í ÏÇ¨Ïö©
            popups = [
                {
                    id: 1,
                    name: "ÌïúÏñëÏóêÎÑàÏßÄ Ïã†Í∑ú Ìà¨Ïûê ÏÉÅÌíà Ï∂úÏãú",
                    image_url: "/adm/uploads/popup_images/1748313714_image_2025-05-20_15-37-49.png",
                    link_url: "/investment_detail_300kw",
                    status: "active",
                    created_at: "2025-05-20"
                },
                {
                    id: 2,
                    name: "ÏóêÎÑàÏßÄ ÌòëÎèôÏ°∞Ìï© ÌäπÎ≥Ñ ÌòúÌÉù ÏïàÎÇ¥",
                    image_url: "/adm/uploads/popup_images/1748313608_image_2025-05-27_11-39-31.png",
                    link_url: "/product_list",
                    status: "active",
                    created_at: "2025-05-27"
                }
            ];
        } else {
            popups = popupData || [];
        }

        // ÏÇ¨Ïù¥Ìä∏ ÏÑ§Ï†ï Îç∞Ïù¥ÌÑ∞ Î°úÎìú
        const { data: settingsData, error: settingsError } = await supabase
            .from('site_settings')
            .select('*');
        
        if (settingsError) {
            console.error('ÏÇ¨Ïù¥Ìä∏ ÏÑ§Ï†ï Î°úÎìú Ïò§Î•ò:', settingsError);
            // Í∏∞Î≥∏Í∞í ÏÇ¨Ïö©
            siteSettings = {
                companyName: "ÌïúÏñëÏóêÎÑàÏßÄÌòëÎèôÏ°∞Ìï©",
                accountNumber: "ÎÜçÌòë 123-456-789-10",
                accountHolder: "ÌïúÏñëÏóêÎÑàÏßÄÌòëÎèôÏ°∞Ìï©",
                contactPhone: "02-1234-5678",
                contactEmail: "info@hanyang-energy.co.kr",
                address: "ÏÑúÏö∏ÌäπÎ≥ÑÏãú Í∞ïÎÇ®Íµ¨ ÌÖåÌó§ÎûÄÎ°ú 123Í∏∏ 45"
            };
        } else {
            // ÏÑ§Ï†ï Îç∞Ïù¥ÌÑ∞Î•º Í∞ùÏ≤¥Î°ú Î≥ÄÌôò
            siteSettings = {};
            if (settingsData) {
                settingsData.forEach(setting => {
                    const key = setting.setting_key.replace(/_([a-z])/g, (match, letter) => letter.toUpperCase());
                    siteSettings[key] = setting.setting_value;
                });
            }
            
            // Í∏∞Î≥∏Í∞íÏù¥ ÏóÜÎäî Í≤ΩÏö∞ ÏÑ§Ï†ï
            if (Object.keys(siteSettings).length === 0) {
                siteSettings = {
                    companyName: "ÌïúÏñëÏóêÎÑàÏßÄÌòëÎèôÏ°∞Ìï©",
                    accountNumber: "ÎÜçÌòë 123-456-789-10",
                    accountHolder: "ÌïúÏñëÏóêÎÑàÏßÄÌòëÎèôÏ°∞Ìï©",
                    contactPhone: "02-1234-5678",
                    contactEmail: "info@hanyang-energy.co.kr",
                    address: "ÏÑúÏö∏ÌäπÎ≥ÑÏãú Í∞ïÎÇ®Íµ¨ ÌÖåÌó§ÎûÄÎ°ú 123Í∏∏ 45"
                };
            }
        }

        console.log('Supabase Îç∞Ïù¥ÌÑ∞ Î°úÎìú ÏôÑÎ£å');
        console.log('ÌåùÏóÖ Í∞úÏàò:', popups.length);
        console.log('ÏÇ¨Ïù¥Ìä∏ ÏÑ§Ï†ï:', Object.keys(siteSettings).length, 'Í∞ú');
        
    } catch (error) {
        console.error('Supabase Îç∞Ïù¥ÌÑ∞ Î°úÎìú Ï§ë Ïò§Î•ò:', error);
        // Ïò§Î•ò Ïãú Í∏∞Î≥∏Í∞í ÏÇ¨Ïö©
        popups = [];
        siteSettings = {
            companyName: "ÌïúÏñëÏóêÎÑàÏßÄÌòëÎèôÏ°∞Ìï©",
            accountNumber: "ÎÜçÌòë 123-456-789-10",
            accountHolder: "ÌïúÏñëÏóêÎÑàÏßÄÌòëÎèôÏ°∞Ìï©",
            contactPhone: "02-1234-5678",
            contactEmail: "info@hanyang-energy.co.kr",
            address: "ÏÑúÏö∏ÌäπÎ≥ÑÏãú Í∞ïÎÇ®Íµ¨ ÌÖåÌó§ÎûÄÎ°ú 123Í∏∏ 45"
        };
    }
}

// ÌåùÏóÖ Î™©Î°ù Ï°∞Ìöå API
app.get('/api/popups', async (req, res) => {
    try {
        const { data, error } = await supabase
            .from('popups')
            .select('*')
            .eq('status', 'active')
            .order('created_at', { ascending: false });

        if (error) {
            console.error('ÌåùÏóÖ Ï°∞Ìöå Ïò§Î•ò:', error);
            return res.json({ success: false, message: 'ÌåùÏóÖÏùÑ Î∂àÎü¨Ïò§ÎäîÎç∞ Ïã§Ìå®ÌñàÏäµÎãàÎã§.' });
        }

        // Îç∞Ïù¥ÌÑ∞ ÌòïÏãù Î≥ÄÌôò (ÌÅ¥ÎùºÏù¥Ïñ∏Ìä∏ Ìò∏ÌôòÏÑ±ÏùÑ ÏúÑÌï¥)
        const formattedData = data.map(popup => ({
            id: popup.id,
            name: popup.name,
            image: popup.image_url,
            link: popup.link_url,
            status: popup.status,
            createdAt: popup.created_at?.split('T')[0] || new Date().toISOString().split('T')[0]
        }));

        res.json({ success: true, data: formattedData });
    } catch (error) {
        console.error('ÌåùÏóÖ Ï°∞Ìöå Ï§ë Ïò§Î•ò:', error);
        res.json({ success: false, message: 'ÏÑúÎ≤Ñ Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§.' });
    }
});

// ÌåùÏóÖ Í¥ÄÎ¶¨ÏûêÏö© Î™©Î°ù Ï°∞Ìöå API
app.get('/api/admin/popups', requireAdmin, async (req, res) => {
    try {
        const { data, error } = await supabase
            .from('popups')
            .select('*')
            .order('created_at', { ascending: false });

        if (error) {
            console.error('ÌåùÏóÖ Ï°∞Ìöå Ïò§Î•ò:', error);
            return res.json({ success: false, message: 'ÌåùÏóÖÏùÑ Î∂àÎü¨Ïò§ÎäîÎç∞ Ïã§Ìå®ÌñàÏäµÎãàÎã§.' });
        }

        // Îç∞Ïù¥ÌÑ∞ ÌòïÏãù Î≥ÄÌôò (ÌÅ¥ÎùºÏù¥Ïñ∏Ìä∏ Ìò∏ÌôòÏÑ±ÏùÑ ÏúÑÌï¥)
        const formattedData = data.map(popup => ({
            id: popup.id,
            name: popup.name,
            image: popup.image_url,
            link: popup.link_url,
            status: popup.status,
            createdAt: popup.created_at?.split('T')[0] || new Date().toISOString().split('T')[0]
        }));

        res.json({ success: true, data: formattedData });
    } catch (error) {
        console.error('ÌåùÏóÖ Ï°∞Ìöå Ï§ë Ïò§Î•ò:', error);
        res.json({ success: false, message: 'ÏÑúÎ≤Ñ Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§.' });
    }
});

// ÌåùÏóÖ ÏÉùÏÑ± API (Ïù¥ÎØ∏ÏßÄ ÏóÖÎ°úÎìú Ìè¨Ìï®)
app.post('/api/admin/popups', requireAdmin, upload.single('popupImage'), async (req, res) => {
    const { name, link, status } = req.body;
    
    if (!name) {
        return res.json({ success: false, message: 'ÌåùÏóÖ Ïù¥Î¶ÑÏùÄ ÌïÑÏàòÏûÖÎãàÎã§.' });
    }
    
    if (!req.file) {
        return res.json({ success: false, message: 'ÌåùÏóÖ Ïù¥ÎØ∏ÏßÄÎäî ÌïÑÏàòÏûÖÎãàÎã§.' });
    }

    try {
        const { data, error } = await supabase
            .from('popups')
            .insert([
                {
                    name: name,
                    image_url: `/adm/uploads/popup_images/${req.file.filename}`,
                    link_url: link || null,
                    status: status || 'active'
                }
            ])
            .select()
            .single();

        if (error) {
            console.error('ÌåùÏóÖ ÏÉùÏÑ± Ïò§Î•ò:', error);
            return res.json({ success: false, message: 'ÌåùÏóÖ ÏÉùÏÑ±Ïóê Ïã§Ìå®ÌñàÏäµÎãàÎã§.' });
        }

        // Îç∞Ïù¥ÌÑ∞ ÌòïÏãù Î≥ÄÌôò
        const formattedData = {
            id: data.id,
            name: data.name,
            image: data.image_url,
            link: data.link_url,
            status: data.status,
            createdAt: data.created_at?.split('T')[0] || new Date().toISOString().split('T')[0]
        };

        res.json({ success: true, data: formattedData, message: 'ÌåùÏóÖÏù¥ ÏÑ±Í≥µÏ†ÅÏúºÎ°ú ÏÉùÏÑ±ÎêòÏóàÏäµÎãàÎã§.' });
    } catch (error) {
        console.error('ÌåùÏóÖ ÏÉùÏÑ± Ï§ë Ïò§Î•ò:', error);
        res.json({ success: false, message: 'ÏÑúÎ≤Ñ Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§.' });
    }
});

// ÌåùÏóÖ ÏàòÏ†ï API (Ïù¥ÎØ∏ÏßÄ ÏóÖÎ°úÎìú Ìè¨Ìï®)
app.put('/api/admin/popups/:id', requireAdmin, upload.single('popupImage'), async (req, res) => {
    const { id } = req.params;
    const { name, link, status } = req.body;

    try {
        let updateData = {
            name: name,
            link_url: link || null,
            status: status,
            updated_at: new Date().toISOString()
        };

        // ÏÉà Ïù¥ÎØ∏ÏßÄÍ∞Ä ÏóÖÎ°úÎìúÎêú Í≤ΩÏö∞
        if (req.file) {
            // Í∏∞Ï°¥ Ïù¥ÎØ∏ÏßÄ Ï†ïÎ≥¥ Ï°∞Ìöå
            const { data: existingPopup } = await supabase
                .from('popups')
                .select('image_url')
                .eq('id', id)
                .single();

            // Í∏∞Ï°¥ Ïù¥ÎØ∏ÏßÄ ÌååÏùº ÏÇ≠Ï†ú (ÏÑ†ÌÉùÏÇ¨Ìï≠)
            if (existingPopup && existingPopup.image_url && existingPopup.image_url.startsWith('/adm/uploads/')) {
                const fullPath = path.join(__dirname, existingPopup.image_url);
                fs.remove(fullPath).catch(console.error);
            }

            updateData.image_url = `/adm/uploads/popup_images/${req.file.filename}`;
        }

        const { data, error } = await supabase
            .from('popups')
            .update(updateData)
            .eq('id', id)
            .select()
            .single();

        if (error) {
            console.error('ÌåùÏóÖ ÏàòÏ†ï Ïò§Î•ò:', error);
            return res.json({ success: false, message: 'ÌåùÏóÖ ÏàòÏ†ïÏóê Ïã§Ìå®ÌñàÏäµÎãàÎã§.' });
        }

        // Îç∞Ïù¥ÌÑ∞ ÌòïÏãù Î≥ÄÌôò
        const formattedData = {
            id: data.id,
            name: data.name,
            image: data.image_url,
            link: data.link_url,
            status: data.status,
            createdAt: data.created_at?.split('T')[0] || new Date().toISOString().split('T')[0]
        };

        res.json({ success: true, data: formattedData, message: 'ÌåùÏóÖÏù¥ ÏÑ±Í≥µÏ†ÅÏúºÎ°ú ÏàòÏ†ïÎêòÏóàÏäµÎãàÎã§.' });
    } catch (error) {
        console.error('ÌåùÏóÖ ÏàòÏ†ï Ï§ë Ïò§Î•ò:', error);
        res.json({ success: false, message: 'ÏÑúÎ≤Ñ Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§.' });
    }
});

// ÌåùÏóÖ ÏÇ≠Ï†ú API
app.delete('/api/admin/popups/:id', requireAdmin, async (req, res) => {
    const { id } = req.params;

    try {
        // Í∏∞Ï°¥ Ïù¥ÎØ∏ÏßÄ Ï†ïÎ≥¥ Ï°∞Ìöå
        const { data: existingPopup } = await supabase
            .from('popups')
            .select('image_url')
            .eq('id', id)
            .single();

        // ÌåùÏóÖ ÏÇ≠Ï†ú
        const { error } = await supabase
            .from('popups')
            .delete()
            .eq('id', id);

        if (error) {
            console.error('ÌåùÏóÖ ÏÇ≠Ï†ú Ïò§Î•ò:', error);
            return res.json({ success: false, message: 'ÌåùÏóÖ ÏÇ≠Ï†úÏóê Ïã§Ìå®ÌñàÏäµÎãàÎã§.' });
        }

        // Ïù¥ÎØ∏ÏßÄ ÌååÏùº ÏÇ≠Ï†ú (ÏÑ†ÌÉùÏÇ¨Ìï≠)
        if (existingPopup && existingPopup.image_url && existingPopup.image_url.startsWith('/adm/uploads/')) {
            const fullPath = path.join(__dirname, existingPopup.image_url);
            fs.remove(fullPath).catch(console.error);
        }

        res.json({ success: true, message: 'ÌåùÏóÖÏù¥ ÏÑ±Í≥µÏ†ÅÏúºÎ°ú ÏÇ≠Ï†úÎêòÏóàÏäµÎãàÎã§.' });
    } catch (error) {
        console.error('ÌåùÏóÖ ÏÇ≠Ï†ú Ï§ë Ïò§Î•ò:', error);
        res.json({ success: false, message: 'ÏÑúÎ≤Ñ Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§.' });
    }
});

// Í≥µÏö© ÏÇ¨Ïù¥Ìä∏ ÏÑ§Ï†ï Ï°∞Ìöå API (Ïù∏Ï¶ù Î∂àÌïÑÏöî)
app.get('/api/settings', async (req, res) => {
    console.log('üîç Í≥µÏö© ÏÑ§Ï†ï Ï°∞Ìöå API Ìò∏Ï∂úÎê®');
    try {
        const { data, error } = await supabase
            .from('site_settings')
            .select('setting_key, setting_value');

        if (error) {
            console.error('Í≥µÏö© ÏÇ¨Ïù¥Ìä∏ ÏÑ§Ï†ï Ï°∞Ìöå Ïò§Î•ò:', error);
            return res.json({ success: false, message: 'ÏÑ§Ï†ïÏùÑ Î∂àÎü¨Ïò§ÎäîÎç∞ Ïã§Ìå®ÌñàÏäµÎãàÎã§.' });
        }

        // Îç∞Ïù¥ÌÑ∞ ÌòïÏãù Î≥ÄÌôò
        const settings = {};
        data.forEach(setting => {
            const key = setting.setting_key.replace(/_([a-z])/g, (match, letter) => letter.toUpperCase());
            settings[key] = setting.setting_value;
        });

        console.log('‚úÖ Í≥µÏö© ÏÑ§Ï†ï Ï°∞Ìöå ÏÑ±Í≥µ:', settings);
        res.json({ success: true, data: settings });
    } catch (error) {
        console.error('Í≥µÏö© ÏÇ¨Ïù¥Ìä∏ ÏÑ§Ï†ï Ï°∞Ìöå Ï§ë Ïò§Î•ò:', error);
        res.json({ success: false, message: 'ÏÑúÎ≤Ñ Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§.' });
    }
});

// ÏÇ¨Ïù¥Ìä∏ ÏÑ§Ï†ï Ï°∞Ìöå API (ÏûÑÏãúÎ°ú Ïù∏Ï¶ù Ï†úÍ±∞)
app.get('/api/admin/settings', async (req, res) => {
    console.log('üîç ÏÑ§Ï†ï Ï°∞Ìöå API Ìò∏Ï∂úÎê®');
    try {
        const { data, error } = await supabase
            .from('site_settings')
            .select('setting_key, setting_value');

        if (error) {
            console.error('ÏÇ¨Ïù¥Ìä∏ ÏÑ§Ï†ï Ï°∞Ìöå Ïò§Î•ò:', error);
            return res.json({ success: false, message: 'ÏÑ§Ï†ïÏùÑ Î∂àÎü¨Ïò§ÎäîÎç∞ Ïã§Ìå®ÌñàÏäµÎãàÎã§.' });
        }

        // Îç∞Ïù¥ÌÑ∞ ÌòïÏãù Î≥ÄÌôò
        const settings = {};
        data.forEach(setting => {
            const key = setting.setting_key.replace(/_([a-z])/g, (match, letter) => letter.toUpperCase());
            settings[key] = setting.setting_value;
        });

        console.log('‚úÖ ÏÑ§Ï†ï Ï°∞Ìöå ÏÑ±Í≥µ:', settings);
        res.json({ success: true, data: settings });
    } catch (error) {
        console.error('ÏÇ¨Ïù¥Ìä∏ ÏÑ§Ï†ï Ï°∞Ìöå Ï§ë Ïò§Î•ò:', error);
        res.json({ success: false, message: 'ÏÑúÎ≤Ñ Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§.' });
    }
});

// ÏÇ¨Ïù¥Ìä∏ ÏÑ§Ï†ï ÏóÖÎç∞Ïù¥Ìä∏ API (ÏûÑÏãúÎ°ú Ïù∏Ï¶ù Ï†úÍ±∞)
app.put('/api/admin/settings', async (req, res) => {
    console.log('üìù ÏÇ¨Ïù¥Ìä∏ ÏÑ§Ï†ï ÏóÖÎç∞Ïù¥Ìä∏ ÏöîÏ≤≠:', req.body);
    
    const { 
        companyName, accountNumber, accountHolder, contactPhone, contactEmail, address,
        footerCopyright, footerDescription, businessNumber, representativeName, faxNumber
    } = req.body;
    
    const settingsToUpdate = [
        { key: 'company_name', value: companyName },
        { key: 'account_number', value: accountNumber },
        { key: 'account_holder', value: accountHolder },
        { key: 'contact_phone', value: contactPhone },
        { key: 'contact_email', value: contactEmail },
        { key: 'address', value: address },
        { key: 'footer_copyright', value: footerCopyright },
        { key: 'footer_description', value: footerDescription },
        { key: 'business_number', value: businessNumber },
        { key: 'representative_name', value: representativeName },
        { key: 'fax_number', value: faxNumber }
    ];

    try {
        // Í∞Å ÏÑ§Ï†ïÏùÑ Í∞úÎ≥ÑÏ†ÅÏúºÎ°ú ÏóÖÎç∞Ïù¥Ìä∏ (upsert)
        for (const setting of settingsToUpdate) {
            if (setting.value !== undefined && setting.value !== null && setting.value !== '') {
                console.log(`üîÑ ÏóÖÎç∞Ïù¥Ìä∏ Ï§ë: ${setting.key} = ${setting.value}`);
                
                const { error } = await supabase
                    .from('site_settings')
                    .upsert(
                        { 
                            setting_key: setting.key, 
                            setting_value: setting.value,
                            updated_at: new Date().toISOString()
                        },
                        { onConflict: 'setting_key' }
                    );

                if (error) {
                    console.error(`‚ùå ${setting.key} ÏóÖÎç∞Ïù¥Ìä∏ Ïò§Î•ò:`, error);
                    return res.json({ success: false, message: `${setting.key} ÏóÖÎç∞Ïù¥Ìä∏Ïóê Ïã§Ìå®ÌñàÏäµÎãàÎã§.` });
                } else {
                    console.log(`‚úÖ ${setting.key} ÏóÖÎç∞Ïù¥Ìä∏ ÏÑ±Í≥µ`);
                }
            }
        }

        // ÏóÖÎç∞Ïù¥Ìä∏Îêú ÏÑ§Ï†ïÏùÑ Îã§Ïãú Î°úÎìú
        const { data: updatedSettings, error: loadError } = await supabase
            .from('site_settings')
            .select('*');

        if (loadError) {
            console.error('ÏÑ§Ï†ï Ïû¨Î°úÎìú Ïò§Î•ò:', loadError);
        } else {
            // Î©îÎ™®Î¶¨ Ï∫êÏãú ÏóÖÎç∞Ïù¥Ìä∏
            siteSettings = {};
            updatedSettings.forEach(setting => {
                switch(setting.setting_key) {
                    case 'company_name': siteSettings.companyName = setting.setting_value; break;
                    case 'account_number': siteSettings.accountNumber = setting.setting_value; break;
                    case 'account_holder': siteSettings.accountHolder = setting.setting_value; break;
                    case 'contact_phone': siteSettings.contactPhone = setting.setting_value; break;
                    case 'contact_email': siteSettings.contactEmail = setting.setting_value; break;
                    case 'address': siteSettings.address = setting.setting_value; break;
                }
            });
            console.log('üîÑ Î©îÎ™®Î¶¨ Ï∫êÏãú ÏóÖÎç∞Ïù¥Ìä∏ ÏôÑÎ£å:', siteSettings);
        }

        res.json({ success: true, data: siteSettings, message: 'ÏÑ§Ï†ïÏù¥ ÏÑ±Í≥µÏ†ÅÏúºÎ°ú ÏóÖÎç∞Ïù¥Ìä∏ÎêòÏóàÏäµÎãàÎã§.' });
    } catch (error) {
        console.error('ÏÇ¨Ïù¥Ìä∏ ÏÑ§Ï†ï ÏóÖÎç∞Ïù¥Ìä∏ Ï§ë Ïò§Î•ò:', error);
        res.json({ success: false, message: 'ÏÑúÎ≤Ñ Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§.' });
    }
});

// ÌÖåÏä§Ìä∏Ïö© API - Supabase Ïó∞Í≤∞ ÌôïÏù∏
app.get('/api/test/supabase', async (req, res) => {
    try {
        console.log('üß™ Supabase Ïó∞Í≤∞ ÌÖåÏä§Ìä∏ ÏãúÏûë');
        
        // site_settings ÌÖåÏù¥Î∏î Ï°¥Ïû¨ ÌôïÏù∏
        const { data, error } = await supabase
            .from('site_settings')
            .select('*')
            .limit(1);
        
        if (error) {
            console.log('‚ùå Supabase Ïò§Î•ò:', error);
            return res.json({ 
                success: false, 
                message: 'Supabase Ïó∞Í≤∞ Ïò§Î•ò', 
                error: error.message 
            });
        }
        
        console.log('‚úÖ Supabase Ïó∞Í≤∞ ÏÑ±Í≥µ, Îç∞Ïù¥ÌÑ∞:', data);
        res.json({ 
            success: true, 
            message: 'Supabase Ïó∞Í≤∞ ÏÑ±Í≥µ', 
            data: data,
            tableExists: true
        });
    } catch (error) {
        console.log('üí• ÏòàÏô∏ Ïò§Î•ò:', error);
        res.json({ 
            success: false, 
            message: 'ÏÑúÎ≤Ñ Ïò§Î•ò', 
            error: error.message 
        });
    }
});

// ÎπÑÎ∞ÄÎ≤àÌò∏ Ìï¥Ïãú ÌÖåÏä§Ìä∏ API
app.get('/api/test/hash/:password', (req, res) => {
    const { password } = req.params;
    const hash = hashPassword(password);
    
    console.log(`üîê ÎπÑÎ∞ÄÎ≤àÌò∏ "${password}" Ìï¥Ïãú:`, hash);
    
    res.json({
        success: true,
        password: password,
        hash: hash,
        message: `ÎπÑÎ∞ÄÎ≤àÌò∏ "${password}"Ïùò Ìï¥ÏãúÍ∞íÏûÖÎãàÎã§.`
    });
});

// DB Ìï¥Ïãú ÌôïÏù∏ API
app.get('/api/test/check-hash/:username', async (req, res) => {
    const { username } = req.params;
    
    try {
        const { data: user, error } = await supabase
            .from('members')
            .select('username, password_hash, name, status')
            .eq('username', username)
            .single();
        
        if (error || !user) {
            return res.json({
                success: false,
                message: 'ÏÇ¨Ïö©ÏûêÎ•º Ï∞æÏùÑ Ïàò ÏóÜÏäµÎãàÎã§.',
                error: error?.message
            });
        }
        
        // Ïó¨Îü¨ ÎπÑÎ∞ÄÎ≤àÌò∏ Ï°∞Ìï© ÌÖåÏä§Ìä∏
        const testPasswords = [username, 'minj0010', 'admin123', 'test123', '1234'];
        const hashTests = testPasswords.map(pwd => ({
            password: pwd,
            hash: hashPassword(pwd),
            match: hashPassword(pwd) === user.password_hash
        }));
        
        res.json({
            success: true,
            user: {
                username: user.username,
                name: user.name,
                status: user.status
            },
            storedHash: user.password_hash,
            hashTests: hashTests
        });
        
    } catch (error) {
        res.json({
            success: false,
            message: 'ÏÑúÎ≤Ñ Ïò§Î•ò',
            error: error.message
        });
    }
});

// ÎπÑÎ∞ÄÎ≤àÌò∏ Ìï¥Ïãú ÏàòÏ†ï API (Í∞úÎ∞úÏö©)
app.post('/api/test/fix-password', async (req, res) => {
    const { username, password } = req.body;
    
    if (!username || !password) {
        return res.json({
            success: false,
            message: 'ÏÇ¨Ïö©ÏûêÎ™ÖÍ≥º ÎπÑÎ∞ÄÎ≤àÌò∏Î•º Î™®Îëê ÏûÖÎ†•Ìï¥Ï£ºÏÑ∏Ïöî.'
        });
    }
    
    try {
        const newHash = hashPassword(password);
        console.log(`üîß ${username} Í≥ÑÏ†ï ÎπÑÎ∞ÄÎ≤àÌò∏ Ìï¥Ïãú ÏóÖÎç∞Ïù¥Ìä∏:`, newHash);
        
        const { data, error } = await supabase
            .from('members')
            .update({ 
                password_hash: newHash,
                updated_at: new Date().toISOString()
            })
            .eq('username', username)
            .select()
            .single();
        
        if (error) {
            console.error('ÎπÑÎ∞ÄÎ≤àÌò∏ ÏóÖÎç∞Ïù¥Ìä∏ Ïò§Î•ò:', error);
            return res.json({
                success: false,
                message: 'ÎπÑÎ∞ÄÎ≤àÌò∏ ÏóÖÎç∞Ïù¥Ìä∏ Ïã§Ìå®',
                error: error.message
            });
        }
        
        res.json({
            success: true,
            message: `${username} Í≥ÑÏ†ïÏùò ÎπÑÎ∞ÄÎ≤àÌò∏Í∞Ä ÏÑ±Í≥µÏ†ÅÏúºÎ°ú ÏóÖÎç∞Ïù¥Ìä∏ÎêòÏóàÏäµÎãàÎã§.`,
            user: {
                username: data.username,
                name: data.name,
                newHash: newHash
            }
        });
        
    } catch (error) {
        console.error('ÎπÑÎ∞ÄÎ≤àÌò∏ ÏàòÏ†ï Ï§ë Ïò§Î•ò:', error);
        res.json({
            success: false,
            message: 'ÏÑúÎ≤Ñ Ïò§Î•ò',
            error: error.message
        });
    }
});

// members ÌÖåÏù¥Î∏î Ï°∞Ìöå ÌÖåÏä§Ìä∏ API
app.get('/api/test/members', async (req, res) => {
    try {
        console.log('üß™ Members ÌÖåÏù¥Î∏î Ï°∞Ìöå ÌÖåÏä§Ìä∏');
        
        // Î™®Îì† members Ï°∞Ìöå
        const { data: allMembers, error: allError } = await supabase
            .from('members')
            .select('*');
        
        if (allError) {
            console.log('‚ùå Î™®Îì† Î©§Î≤Ñ Ï°∞Ìöå Ïò§Î•ò:', allError);
        } else {
            console.log('‚úÖ Î™®Îì† Î©§Î≤Ñ Ï°∞Ìöå ÏÑ±Í≥µ:', allMembers);
        }
        
        // minj0010 ÏÇ¨Ïö©ÏûêÎßå Ï°∞Ìöå
        const { data: minj0010, error: minjError } = await supabase
            .from('members')
            .select('*')
            .eq('username', 'minj0010');
        
        if (minjError) {
            console.log('‚ùå minj0010 Ï°∞Ìöå Ïò§Î•ò:', minjError);
        } else {
            console.log('‚úÖ minj0010 Ï°∞Ìöå ÏÑ±Í≥µ:', minj0010);
        }
        
        res.json({
            success: true,
            allMembers: allMembers,
            allMembersError: allError,
            minj0010: minj0010,
            minj0010Error: minjError
        });
        
    } catch (error) {
        console.error('Members ÌÖåÏù¥Î∏î Ï°∞Ìöå Ï§ë Ïò§Î•ò:', error);
        res.json({
            success: false,
            message: 'ÏÑúÎ≤Ñ Ïò§Î•ò',
            error: error.message
        });
    }
});

// Î°úÍ∑∏Ïù∏ ÌÖåÏä§Ìä∏ API
app.get('/api/test/login/:username/:password', async (req, res) => {
    const { username, password } = req.params;
    
    try {
        console.log(`üß™ Î°úÍ∑∏Ïù∏ ÌÖåÏä§Ìä∏: ${username}/${password}`);
        
        const passwordHash = hashPassword(password);
        console.log('üîê ÏÉùÏÑ±Îêú Ìï¥Ïãú:', passwordHash);
        
        // SupabaseÏóêÏÑú ÏÇ¨Ïö©Ïûê Ï°∞Ìöå (Ïó¨Îü¨ Î∞©Î≤ïÏúºÎ°ú ÏãúÎèÑ)
        console.log('üîç ÏÇ¨Ïö©Ïûê Ï°∞Ìöå ÏãúÎèÑ 1: single() ÏÇ¨Ïö©');
        const { data: user1, error: error1 } = await supabase
            .from('members')
            .select('*')
            .eq('username', username)
            .single();
        
        console.log('üîç ÏÇ¨Ïö©Ïûê Ï°∞Ìöå ÏãúÎèÑ 2: Î∞∞Ïó¥Î°ú Ï°∞Ìöå');
        const { data: user2, error: error2 } = await supabase
            .from('members')
            .select('*')
            .eq('username', username);
        
        if (error1 && error2) {
            console.log('‚ùå ÏÇ¨Ïö©Ïûê Ï°∞Ìöå Ïò§Î•ò1:', error1);
            console.log('‚ùå ÏÇ¨Ïö©Ïûê Ï°∞Ìöå Ïò§Î•ò2:', error2);
            return res.json({
                success: false,
                message: 'ÏÇ¨Ïö©Ïûê Ï°∞Ìöå Ïã§Ìå®',
                error1: error1?.message,
                error2: error2?.message
            });
        }
        
        const user = user1 || (user2 && user2[0]);
        
        if (!user) {
            return res.json({
                success: false,
                message: 'ÏÇ¨Ïö©ÏûêÎ•º Ï∞æÏùÑ Ïàò ÏóÜÏäµÎãàÎã§.',
                user1: user1,
                user2: user2
            });
        }
        
        console.log('üìã DBÏóê Ï†ÄÏû•Îêú ÏÇ¨Ïö©Ïûê Ï†ïÎ≥¥:');
        console.log('  - Username:', user.username);
        console.log('  - Ï†ÄÏû•Îêú Ìï¥Ïãú:', user.password_hash);
        console.log('  - ÏûÖÎ†•Îêú Ìï¥Ïãú:', passwordHash);
        console.log('  - Ìï¥Ïãú ÏùºÏπò:', user.password_hash === passwordHash);
        
        res.json({
            success: true,
            user: {
                username: user.username,
                name: user.name,
                role: user.role,
                status: user.status
            },
            storedHash: user.password_hash,
            inputHash: passwordHash,
            hashMatch: user.password_hash === passwordHash
        });
        
    } catch (error) {
        console.error('Î°úÍ∑∏Ïù∏ ÌÖåÏä§Ìä∏ Ï§ë Ïò§Î•ò:', error);
        res.json({
            success: false,
            message: 'ÏÑúÎ≤Ñ Ïò§Î•ò',
            error: error.message
        });
    }
});

// ÌÖåÏä§Ìä∏Ïö© API - Í≥ÑÏ†ï ÏÉùÏÑ± (Í∞úÎ∞úÏö©)
app.post('/api/test/create-accounts', async (req, res) => {
    try {
        console.log('üî® ÌÖåÏä§Ìä∏ Í≥ÑÏ†ï ÏÉùÏÑ± ÏãúÏûë');
        
        const accounts = [
            {
                username: 'minj0010',
                password_hash: hashPassword('minj0010'),
                name: 'ÍπÄÎØºÏ†ï',
                email: 'minj0010@hanyang.com',
                role: 'admin',
                status: 'approved'
            },
            {
                username: 'test',
                password_hash: hashPassword('test123'),
                name: 'ÌÖåÏä§Ìä∏ÏÇ¨Ïö©Ïûê',
                email: 'test@hanyang.com',
                role: 'user',
                status: 'approved'
            }
        ];
        
        const results = [];
        
        for (const account of accounts) {
            // Í∏∞Ï°¥ Í≥ÑÏ†ï ÌôïÏù∏
            const { data: existing } = await supabase
                .from('members')
                .select('username')
                .eq('username', account.username);
            
            if (existing && existing.length > 0) {
                results.push({ username: account.username, status: 'already_exists' });
                continue;
            }
            
            // ÏßÅÏ†ë INSERT ÏÇ¨Ïö©
            const { data, error } = await supabase
                .from('members')
                .insert({
                    username: account.username,
                    password_hash: account.password_hash,
                    name: account.name,
                    email: account.email,
                    role: account.role,
                    status: account.status,
                    created_at: new Date().toISOString(),
                    updated_at: new Date().toISOString()
                })
                .select()
                .single();
            
            if (error) {
                console.log(`‚ùå ${account.username} ÏÉùÏÑ± Ïã§Ìå®:`, error);
                results.push({ username: account.username, status: 'failed', error: error.message });
            } else {
                console.log(`‚úÖ ${account.username} ÏÉùÏÑ± ÏÑ±Í≥µ`);
                results.push({ username: account.username, status: 'created' });
            }
        }
        
        res.json({ success: true, results });
    } catch (error) {
        console.error('Í≥ÑÏ†ï ÏÉùÏÑ± Ï§ë Ïò§Î•ò:', error);
        res.json({ success: false, error: error.message });
    }
});

// ÌöåÏõê Î™©Î°ù Ï°∞Ìöå (Í¥ÄÎ¶¨ÏûêÏö©)
app.get('/api/members', requireAdmin, async (req, res) => {
    try {
        console.log('üîç ÌöåÏõê Î™©Î°ù Ï°∞Ìöå API Ìò∏Ï∂úÎê®');
        
        const { data: members, error } = await supabase
            .from('members')
            .select('*')
            .order('created_at', { ascending: false });

        if (error) {
            console.error('ÌöåÏõê Î™©Î°ù Ï°∞Ìöå Ïò§Î•ò:', error);
            return res.json({ success: false, message: 'ÌöåÏõê Î™©Î°ùÏùÑ Î∂àÎü¨Ïò§ÎäîÎç∞ Ïã§Ìå®ÌñàÏäµÎãàÎã§.' });
        }

        console.log('‚úÖ ÌöåÏõê Î™©Î°ù Ï°∞Ìöå ÏÑ±Í≥µ:', members.length, 'Î™Ö');
        res.json({ success: true, data: members });
    } catch (error) {
        console.error('ÌöåÏõê Î™©Î°ù Ï°∞Ìöå Ï§ë Ïò§Î•ò:', error);
        res.json({ success: false, message: 'ÏÑúÎ≤Ñ Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§.' });
    }
});

// ÌöåÏõê Ï∞®Îã® API (Í¥ÄÎ¶¨ÏûêÏö©)
app.post('/api/admin/members/:id/block', requireAdmin, async (req, res) => {
    const { id } = req.params;
    
    try {
        console.log('üö´ ÌöåÏõê Ï∞®Îã® ÏöîÏ≤≠:', id);
        
        // Î≥∏Ïù∏ÏùÄ Ï∞®Îã®Ìï† Ïàò ÏóÜÏùå
        if (req.session.user.id === id) {
            return res.json({ success: false, message: 'Î≥∏Ïù∏ Í≥ÑÏ†ïÏùÄ Ï∞®Îã®Ìï† Ïàò ÏóÜÏäµÎãàÎã§.' });
        }
        
        const { data: updatedMember, error } = await supabase
            .from('members')
            .update({ 
                status: 'blocked',
                updated_at: new Date().toISOString()
            })
            .eq('id', id)
            .select()
            .single();

        if (error) {
            console.error('ÌöåÏõê Ï∞®Îã® Ïò§Î•ò:', error);
            return res.json({ success: false, message: 'ÌöåÏõê Ï∞®Îã®Ïóê Ïã§Ìå®ÌñàÏäµÎãàÎã§.' });
        }

        console.log('‚úÖ ÌöåÏõê Ï∞®Îã® ÏÑ±Í≥µ:', updatedMember.username);
        res.json({ 
            success: true, 
            message: 'ÌöåÏõêÏù¥ ÏÑ±Í≥µÏ†ÅÏúºÎ°ú Ï∞®Îã®ÎêòÏóàÏäµÎãàÎã§.',
            member: updatedMember
        });
    } catch (error) {
        console.error('ÌöåÏõê Ï∞®Îã® Ï§ë Ïò§Î•ò:', error);
        res.json({ success: false, message: 'ÏÑúÎ≤Ñ Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§.' });
    }
});

// ÌöåÏõê Ï∞®Îã® Ìï¥Ï†ú API (Í¥ÄÎ¶¨ÏûêÏö©)
app.post('/api/admin/members/:id/unblock', requireAdmin, async (req, res) => {
    const { id } = req.params;
    
    try {
        console.log('‚úÖ ÌöåÏõê Ï∞®Îã® Ìï¥Ï†ú ÏöîÏ≤≠:', id);
        
        const { data: updatedMember, error } = await supabase
            .from('members')
            .update({ 
                status: 'approved',
                updated_at: new Date().toISOString()
            })
            .eq('id', id)
            .select()
            .single();

        if (error) {
            console.error('ÌöåÏõê Ï∞®Îã® Ìï¥Ï†ú Ïò§Î•ò:', error);
            return res.json({ success: false, message: 'ÌöåÏõê Ï∞®Îã® Ìï¥Ï†úÏóê Ïã§Ìå®ÌñàÏäµÎãàÎã§.' });
        }

        console.log('‚úÖ ÌöåÏõê Ï∞®Îã® Ìï¥Ï†ú ÏÑ±Í≥µ:', updatedMember.username);
        res.json({ 
            success: true, 
            message: 'ÌöåÏõê Ï∞®Îã®Ïù¥ ÏÑ±Í≥µÏ†ÅÏúºÎ°ú Ìï¥Ï†úÎêòÏóàÏäµÎãàÎã§.',
            member: updatedMember
        });
    } catch (error) {
        console.error('ÌöåÏõê Ï∞®Îã® Ìï¥Ï†ú Ï§ë Ïò§Î•ò:', error);
        res.json({ success: false, message: 'ÏÑúÎ≤Ñ Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§.' });
    }
});

// ÏÇ¨Ïö©Ïûê ÏÑ∏ÏÖò Ï†ïÎ≥¥ Ï°∞Ìöå
app.get('/api/user', (req, res) => {
    if (req.session.user) {
        res.json({ success: true, user: req.session.user });
    } else {
        res.json({ success: false, message: 'Î°úÍ∑∏Ïù∏Ïù¥ ÌïÑÏöîÌï©ÎãàÎã§.' });
    }
});

// ÏÇ¨Ïö©Ïûê ÌÜµÍ≥Ñ Ï†ïÎ≥¥ (Ïã§Ï†ú Îç∞Ïù¥ÌÑ∞)
app.get('/api/user/stats/:username', requireLogin, async (req, res) => {
    const { username } = req.params;
    
    try {
        // Î°úÍ∑∏Ïù∏Ìïú ÏÇ¨Ïö©ÏûêÍ∞Ä ÏûêÏã†Ïùò Ï†ïÎ≥¥Îßå Ï°∞ÌöåÌï† Ïàò ÏûàÎèÑÎ°ù Î≥¥Ïïà Ï≤¥ÌÅ¨
        if (req.session.user.username !== username && req.session.user.role !== 'admin') {
            return res.json({ success: false, message: 'Í∂åÌïúÏù¥ ÏóÜÏäµÎãàÎã§.' });
        }
        
        // ÏÇ¨Ïö©Ïûê Ï†ïÎ≥¥ Ï°∞Ìöå
        const { data: user, error: userError } = await supabase
            .from('members')
            .select('*')
            .eq('username', username)
            .single();
            
        if (userError || !user) {
            console.error('ÏÇ¨Ïö©Ïûê Ï°∞Ìöå Ïò§Î•ò:', userError);
            return res.json({ success: false, message: 'ÏÇ¨Ïö©ÏûêÎ•º Ï∞æÏùÑ Ïàò ÏóÜÏäµÎãàÎã§.' });
        }
        
        // Ìà¨Ïûê Í¥ÄÎ†® Îç∞Ïù¥ÌÑ∞Îäî ÏïÑÏßÅ ÌÖåÏù¥Î∏îÏù¥ ÏóÜÏúºÎØÄÎ°ú Í∏∞Î≥∏Í∞í ÏÇ¨Ïö©
        // Ï∂îÌõÑ investments ÌÖåÏù¥Î∏îÏù¥ ÏÉùÏÑ±ÎêòÎ©¥ Ïã§Ï†ú Îç∞Ïù¥ÌÑ∞Î°ú ÍµêÏ≤¥
        const stats = {
            products: 0,           // Î≥¥Ïú† ÏÉÅÌíà Ïàò
            balance: 0,            // Î≥¥Ïú† Í∏àÏï° (Ïõê)
            investment: 0,         // Ï¥ù Ìà¨Ïûê Í∏àÏï° (Ïõê)
            profit: 0              // ÎàÑÏ†Å ÏàòÏùµ (Ïõê)
        };
        
        console.log(`‚úÖ ${username} ÏÇ¨Ïö©Ïûê ÌÜµÍ≥Ñ Ï°∞Ìöå ÏÑ±Í≥µ`);
        res.json({ success: true, data: stats });
        
    } catch (error) {
        console.error('ÏÇ¨Ïö©Ïûê ÌÜµÍ≥Ñ Ï°∞Ìöå Ï§ë Ïò§Î•ò:', error);
        res.json({ success: false, message: 'ÏÑúÎ≤Ñ Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§.' });
    }
});

// Í∏∞Î≥∏ Í≥ÑÏ†ï Ï¥àÍ∏∞Ìôî Ìï®Ïàò
async function initializeDefaultAccounts() {
    try {
        console.log('üîç Í∏∞Î≥∏ Í≥ÑÏ†ï Ï¥àÍ∏∞Ìôî Ï§ë...');
        
        // Î®ºÏ†Ä Í∏∞Ï°¥ Í≥ÑÏ†ïÏù¥ ÏûàÎäîÏßÄ ÌôïÏù∏
        const { data: existingAdmin } = await supabase
            .from('members')
            .select('username')
            .eq('username', 'minj0010');

        if (!existingAdmin || existingAdmin.length === 0) {
            console.log('‚ö†Ô∏è Í¥ÄÎ¶¨Ïûê Í≥ÑÏ†ïÏù¥ ÏóÜÏäµÎãàÎã§. Supabase ÎåÄÏãúÎ≥¥ÎìúÏóêÏÑú ÏàòÎèôÏúºÎ°ú ÏÉùÏÑ±Ìï¥Ï£ºÏÑ∏Ïöî.');
            console.log('üìù ÏÉùÏÑ±Ìï† Í¥ÄÎ¶¨Ïûê Í≥ÑÏ†ï Ï†ïÎ≥¥:');
            console.log('   Username: minj0010');
            console.log('   Password Hash:', hashPassword('minj0010'));
            console.log('   Name: ÍπÄÎØºÏ†ï');
            console.log('   Role: admin');
            console.log('   Status: approved');
        } else {
            console.log('‚úÖ Í¥ÄÎ¶¨Ïûê Í≥ÑÏ†ï Ïù¥ÎØ∏ Ï°¥Ïû¨');
        }

        const { data: existingTest } = await supabase
            .from('members')
            .select('username')
            .eq('username', 'test');

        if (!existingTest || existingTest.length === 0) {
            console.log('‚ö†Ô∏è ÌÖåÏä§Ìä∏ Í≥ÑÏ†ïÏù¥ ÏóÜÏäµÎãàÎã§. Supabase ÎåÄÏãúÎ≥¥ÎìúÏóêÏÑú ÏàòÎèôÏúºÎ°ú ÏÉùÏÑ±Ìï¥Ï£ºÏÑ∏Ïöî.');
            console.log('üìù ÏÉùÏÑ±Ìï† ÌÖåÏä§Ìä∏ Í≥ÑÏ†ï Ï†ïÎ≥¥:');
            console.log('   Username: test');
            console.log('   Password Hash:', hashPassword('test123'));
            console.log('   Name: ÌÖåÏä§Ìä∏ÏÇ¨Ïö©Ïûê');
            console.log('   Role: user');
            console.log('   Status: approved');
        } else {
            console.log('‚úÖ ÌÖåÏä§Ìä∏ Í≥ÑÏ†ï Ïù¥ÎØ∏ Ï°¥Ïû¨');
        }

    } catch (error) {
        console.error('Í∏∞Î≥∏ Í≥ÑÏ†ï ÌôïÏù∏ Ï§ë Ïò§Î•ò:', error);
    }
}

// ÏÉÅÌíàÎ≥Ñ ÏùºÏùº ÏàòÏùµÎ•† Î∞òÌôò Ìï®Ïàò
function getDailyRateByProduct(productName) {
    // ÏÉÅÌíàÎ≥Ñ Ïó∞Í∞Ñ ÏàòÏùµÎ•†ÏùÑ ÏùºÏùº ÏàòÏùµÎ•†Î°ú ÌôòÏÇ∞
    const annualRates = {
        'HANYANG GREEN STARTER': 0.05,    // Ïó∞ 5%
        'green_starter': 0.05,            // Ïó∞ 5%
        'HANYANG LAON': 0.08,             // Ïó∞ 8%
        'laon': 0.08,                     // Ïó∞ 8%
        'SIMPLE ECO': 0.06,               // Ïó∞ 6%
        'simple_eco': 0.06,               // Ïó∞ 6%
        '300KW Î∞úÏ†ÑÏÜå': 0.219,            // Ïó∞ 21.9% (Ïùº 3,000Ïõê Í∏∞Ï§Ä)
        '300kw': 0.219,                   // Ïó∞ 21.9% (Ïùº 3,000Ïõê Í∏∞Ï§Ä)
        '500KW Î∞úÏ†ÑÏÜå': 0.09,             // Ïó∞ 9%
        '500kw': 0.09,                    // Ïó∞ 9%
        '1MW Î∞úÏ†ÑÏÜå': 0.10,               // Ïó∞ 10%
        '1mw': 0.10,                      // Ïó∞ 10%
        '2MW Î∞úÏ†ÑÏÜå': 0.12,               // Ïó∞ 12%
        '2mw': 0.12                       // Ïó∞ 12%
    };
    
    // Í∏∞Î≥∏Í∞í ÏÑ§Ï†ï (Ïïå Ïàò ÏóÜÎäî ÏÉÅÌíàÏùò Í≤ΩÏö∞)
    const defaultRate = 0.06; // Ïó∞ 6%
    
    // ÏÉÅÌíàÎ™ÖÏúºÎ°ú ÏàòÏùµÎ•† Ï∞æÍ∏∞ (ÎåÄÏÜåÎ¨∏Ïûê Íµ¨Î∂Ñ ÏóÜÏù¥)
    const productKey = productName ? productName.toLowerCase() : '';
    let annualRate = annualRates[productName] || annualRates[productKey] || defaultRate;
    
    // ÏÉÅÌíàÎ™ÖÏóê ÌÇ§ÏõåÎìúÍ∞Ä Ìè¨Ìï®Îêú Í≤ΩÏö∞ Ï≤òÎ¶¨
    if (!annualRates[productName] && !annualRates[productKey]) {
        for (const [key, value] of Object.entries(annualRates)) {
            if (productName && (productName.includes(key.split(' ')[0]) || key.includes(productKey))) {
                annualRate = value;
                break;
            }
        }
    }
    
    // Ïó∞Í∞Ñ ÏàòÏùµÎ•†ÏùÑ ÏùºÏùº ÏàòÏùµÎ•†Î°ú ÌôòÏÇ∞ (365Ïùº Í∏∞Ï§Ä)
    return annualRate / 365;
}

// ÌöåÏõê ÏûîÏï° Ï°∞Ìöå
async function getMemberBalance(memberId) {
    try {
        const { data, error } = await supabase
            .from('member_balances')
            .select('balance')
            .eq('member_id', memberId)
            .single();
        
        if (error) {
            // ÏûîÏï° Î†àÏΩîÎìúÍ∞Ä ÏóÜÏúºÎ©¥ ÏÉùÏÑ±
            if (error.code === 'PGRST116') {
                const { error: insertError } = await supabase
                    .from('member_balances')
                    .insert({ member_id: memberId, balance: 0 });
                
                if (insertError) {
                    console.error('ÏûîÏï° ÏÉùÏÑ± Ïò§Î•ò:', insertError);
                    return 0;
                }
                return 0;
            }
            console.error('ÏûîÏï° Ï°∞Ìöå Ïò§Î•ò:', error);
            return 0;
        }
        
        return parseFloat(data.balance) || 0;
    } catch (error) {
        console.error('ÏûîÏï° Ï°∞Ìöå Ï§ë Ïò§Î•ò:', error);
        return 0;
    }
}

// ÌöåÏõê ÏûîÏï° ÏóÖÎç∞Ïù¥Ìä∏
async function updateMemberBalance(memberId, newBalance) {
    try {
        const { error } = await supabase
            .from('member_balances')
            .upsert({ 
                member_id: memberId, 
                balance: newBalance,
                updated_at: new Date().toISOString()
            });
        
        if (error) {
            console.error('ÏûîÏï° ÏóÖÎç∞Ïù¥Ìä∏ Ïò§Î•ò:', error);
            return false;
        }
        
        return true;
    } catch (error) {
        console.error('ÏûîÏï° ÏóÖÎç∞Ïù¥Ìä∏ Ï§ë Ïò§Î•ò:', error);
        return false;
    }
}

// ÌÖåÏä§Ìä∏Ïö© API - investments ÌÖåÏù¥Î∏î Íµ¨Ï°∞ ÌôïÏù∏ Î∞è ÏÉùÏÑ±
app.get('/api/test/investments-table', async (req, res) => {
    try {
        console.log('üîç investments ÌÖåÏù¥Î∏î Íµ¨Ï°∞ ÌôïÏù∏');
        
        // 1Îã®Í≥Ñ: PostgreSQL ÏãúÏä§ÌÖú ÌÖåÏù¥Î∏îÏóêÏÑú Ïª¨Îüº Ï†ïÎ≥¥ Ï°∞Ìöå
        const { data: columnInfo, error: columnError } = await supabase
            .rpc('get_table_columns', { table_name: 'investments' })
            .then(result => {
                console.log('RPC Ìò∏Ï∂ú Í≤∞Í≥º:', result);
                return result;
            })
            .catch(err => {
                console.log('RPC Ìò∏Ï∂ú Ïã§Ìå®, ÎåÄÏïà Î∞©Î≤ï ÏãúÎèÑ');
                return { data: null, error: err };
            });
        
        // 2Îã®Í≥Ñ: ÏßÅÏ†ë ÌÖåÏù¥Î∏î Ï°∞Ìöå ÏãúÎèÑ
        const { data, error } = await supabase
            .from('investments')
            .select('*')
            .limit(1);
        
        if (error) {
            console.log('‚ùå investments ÌÖåÏù¥Î∏î Ï°∞Ìöå Ïò§Î•ò:', error);
            
            if (error.code === 'PGRST116') {
                // ÌÖåÏù¥Î∏îÏù¥ Ï°¥Ïû¨ÌïòÏßÄ ÏïäÏùå
                const createTableSQL = `
                    CREATE TABLE IF NOT EXISTS investments (
                        id UUID DEFAULT gen_random_uuid() PRIMARY KEY,
                        member_id UUID REFERENCES members(id) ON DELETE CASCADE,
                        product_type VARCHAR(50) NOT NULL,
                        amount DECIMAL(15,2) NOT NULL,
                        status VARCHAR(20) DEFAULT 'pending' CHECK (status IN ('pending', 'active', 'completed', 'cancelled')),
                        created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
                        updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
                    );
                `;
                
                return res.json({
                    success: false,
                    error: error,
                    message: 'investments ÌÖåÏù¥Î∏îÏù¥ Ï°¥Ïû¨ÌïòÏßÄ ÏïäÏäµÎãàÎã§.',
                    createTableSQL: createTableSQL,
                    suggestion: 'Supabase ÎåÄÏãúÎ≥¥Îìú SQL EditorÏóêÏÑú ÏúÑ SQLÏùÑ Ïã§ÌñâÌï¥Ï£ºÏÑ∏Ïöî.'
                });
            }
            
            return res.json({
                success: false,
                error: error,
                message: 'investments ÌÖåÏù¥Î∏î Ï°∞Ìöå Ïã§Ìå®'
            });
        }
        
        // 3Îã®Í≥Ñ: Ïã§Ï†ú Îç∞Ïù¥ÌÑ∞ Ï°∞ÌöåÌï¥ÏÑú Ïª¨Îüº ÌôïÏù∏
        const { data: sampleData, error: sampleError } = await supabase
            .from('investments')
            .select('*')
            .limit(5);
        
        console.log('‚úÖ investments ÌÖåÏù¥Î∏î ÏÉòÌîå Îç∞Ïù¥ÌÑ∞:', sampleData);
        
        // 4Îã®Í≥Ñ: Îç∞Ïù¥ÌÑ∞Í∞Ä ÏûàÎã§Î©¥ Ïª¨Îüº Ïù¥Î¶ÑÎì§ Ï∂îÏ∂ú
        let columnNames = [];
        if (sampleData && sampleData.length > 0) {
            columnNames = Object.keys(sampleData[0]);
        }
        
        res.json({
            success: true,
            sampleData: sampleData,
            sampleError: sampleError,
            columnNames: columnNames,
            columnInfo: columnInfo,
            message: 'investments ÌÖåÏù¥Î∏î Íµ¨Ï°∞ ÌôïÏù∏ ÏôÑÎ£å',
            tableExists: true
        });
        
    } catch (error) {
        console.error('investments ÌÖåÏù¥Î∏î Íµ¨Ï°∞ ÌôïÏù∏ Ï§ë Ïò§Î•ò:', error);
        res.json({
            success: false,
            error: error.message,
            message: 'ÌÖåÏù¥Î∏î Íµ¨Ï°∞ ÌôïÏù∏ Ï§ë ÏòàÏô∏ Ïò§Î•ò Î∞úÏÉù'
        });
    }
});

// ÏÉÅÌíà ÌÉÄÏûÖÏùÑ Ïù¥Î¶ÑÏúºÎ°ú Î≥ÄÌôòÌïòÎäî Ìï®Ïàò
function getProductNameFromType(productType) {
    const productNames = {
        '300kw': '[300KW] Îã§Ìï®Íªò ÎèôÌñâ Îâ¥Î≤†Ïù¥ÏßÅ',
        '500kw': '[500KW] Îã§Ìï®Íªò ÎèôÌñâ',
        '1mw': '[1MW] Îã§Ìï®Íªò ÎèôÌñâ Î©îÍ∞Ä',
        'green_starter': 'Í∑∏Î¶∞ Ïä§ÌÉÄÌÑ∞ Ìå®ÌÇ§ÏßÄ',
        'laon': 'ÎùºÏò® ÏóêÎÑàÏßÄ Ìå®ÌÇ§ÏßÄ',
        'simple_eco': 'Ïã¨Ìîå ÏóêÏΩî Ìå®ÌÇ§ÏßÄ'
    };
    return productNames[productType] || productType;
}

// Ìà¨Ïûê Ïã†Ï≤≠ Ï≤òÎ¶¨ API
app.post('/api/investment', requireLogin, async (req, res) => {
    try {
        console.log('üí∞ Ìà¨Ïûê Ïã†Ï≤≠ API ÏöîÏ≤≠ Î∞õÏùå');
        console.log('üí∞ ÏöîÏ≤≠ Î≥∏Î¨∏:', req.body);
        console.log('üí∞ ÏÑ∏ÏÖò ÏÇ¨Ïö©Ïûê:', req.session.user);
        
        const { productType, amount, bankName, accountNumber } = req.body;
        const memberId = req.session.user.id;
        
        // ÏûÖÎ†• Í≤ÄÏ¶ù
        if (!productType || !amount || isNaN(amount) || parseFloat(amount) <= 0) {
            console.log('‚ùå ÏûÖÎ†• Í≤ÄÏ¶ù Ïã§Ìå®:', { productType, amount });
            return res.status(400).json({ 
                success: false, 
                message: 'Ïò¨Î∞îÎ•∏ Ìà¨Ïûê Ï†ïÎ≥¥Î•º ÏûÖÎ†•Ìï¥Ï£ºÏÑ∏Ïöî.' 
            });
        }
        
        const investmentAmount = parseFloat(amount);
        
        // ÏµúÏÜå Ìà¨Ïûê Í∏àÏï° ÌôïÏù∏ (50ÎßåÏõê)
        if (investmentAmount < 500000) {
            console.log('‚ùå ÏµúÏÜå Ìà¨Ïûê Í∏àÏï° ÎØ∏Îã¨:', investmentAmount);
            return res.status(400).json({ 
                success: false, 
                message: 'ÏµúÏÜå Ìà¨Ïûê Í∏àÏï°ÏùÄ 500,000ÏõêÏûÖÎãàÎã§.' 
            });
        }
        
        // Ìà¨Ïûê Ïã†Ï≤≠ ÏÉùÏÑ± - Î™®Îì† Í∞ÄÎä•Ìïú Ïª¨ÎüºÎ™Ö ÏãúÎèÑ
        console.log('üîç Ìà¨Ïûê ÌÖåÏù¥Î∏î Íµ¨Ï°∞ ÌôïÏù∏ Ï§ë...');
        
        // 1Îã®Í≥Ñ: ÌÖåÏù¥Î∏î Íµ¨Ï°∞ ÌôïÏù∏
        const { data: tableCheck, error: tableError } = await supabase
            .from('investments')
            .select('*')
            .limit(1);
            
        console.log('üìã ÌÖåÏù¥Î∏î ÌôïÏù∏ Í≤∞Í≥º:', { tableCheck, tableError });
        
        // 2Îã®Í≥Ñ: Îã§ÏñëÌïú Ïª¨ÎüºÎ™ÖÍ≥º Íµ¨Ï°∞Î°ú ÏãúÎèÑ
        const attempts = [
            {
                name: 'Í∏∞Î≥∏ Íµ¨Ï°∞ ÏãúÎèÑ (product_type, amount)',
                data: {
                    member_id: memberId,
                    product_type: productType,
                    amount: investmentAmount,
                    status: 'pending'
                }
            },
            {
                name: 'ÎåÄÏïà Íµ¨Ï°∞ 1 (type, amount)',
                data: {
                    member_id: memberId,
                    type: productType,
                    amount: investmentAmount,
                    status: 'pending'
                }
            },
            {
                name: 'ÎåÄÏïà Íµ¨Ï°∞ 2 (product, investment_amount)',
                data: {
                    member_id: memberId,
                    product: getProductNameFromType(productType),
                    investment_amount: investmentAmount,
                    status: 'pending'
                }
            },
            {
                name: 'ÎåÄÏïà Íµ¨Ï°∞ 3 (product_name, amount)',
                data: {
                    member_id: memberId,
                    product_name: getProductNameFromType(productType),
                    amount: investmentAmount,
                    status: 'pending'
                }
            },
            {
                name: 'Í∞ÑÎã®Ìïú Íµ¨Ï°∞ (amountÎßå)',
                data: {
                    member_id: memberId,
                    amount: investmentAmount,
                    status: 'pending'
                }
            }
        ];
        
        let investment = null;
        let finalError = null;
        
        for (const attempt of attempts) {
            console.log(`üí∞ ${attempt.name}:`, attempt.data);
            
            const { data: result, error } = await supabase
                .from('investments')
                .insert(attempt.data)
                .select()
                .single();
                
            if (!error && result) {
                investment = result;
                console.log(`‚úÖ ${attempt.name} ÏÑ±Í≥µ!`);
                break;
            } else {
                console.log(`‚ùå ${attempt.name} Ïã§Ìå®:`, error);
                finalError = error;
            }
        }
        
        
        if (!investment) {
            console.error('‚ùå Î™®Îì† ÏãúÎèÑ Ïã§Ìå® - Ìà¨Ïûê Ïã†Ï≤≠ ÏÉùÏÑ± Ïò§Î•ò:', finalError);
            console.error('‚ùå Ïò§Î•ò ÏÑ∏Î∂ÄÏÇ¨Ìï≠:', JSON.stringify(finalError, null, 2));
            
            // ÌÖåÏù¥Î∏îÏù¥ Ï°¥Ïû¨ÌïòÏßÄ ÏïäÎäî Í≤ΩÏö∞ ÏÉùÏÑ± ÏïàÎÇ¥
            if (finalError?.code === 'PGRST116' || finalError?.message?.includes('does not exist')) {
                return res.status(500).json({ 
                    success: false, 
                    message: 'investments ÌÖåÏù¥Î∏îÏù¥ Ï°¥Ïû¨ÌïòÏßÄ ÏïäÏäµÎãàÎã§. Í¥ÄÎ¶¨ÏûêÏóêÍ≤å Î¨∏ÏùòÌï¥Ï£ºÏÑ∏Ïöî.',
                    error: 'TABLE_NOT_EXISTS',
                    createTableSQL: `
                        CREATE TABLE IF NOT EXISTS investments (
                            id UUID DEFAULT gen_random_uuid() PRIMARY KEY,
                            member_id UUID REFERENCES members(id) ON DELETE CASCADE,
                            product_type VARCHAR(50) NOT NULL,
                            amount DECIMAL(15,2) NOT NULL,
                            status VARCHAR(20) DEFAULT 'pending' CHECK (status IN ('pending', 'approved', 'rejected')),
                            created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
                            updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
                        );
                    `
                });
            }
            
            return res.status(500).json({ 
                success: false, 
                message: 'Ìà¨Ïûê Ïã†Ï≤≠ Ï≤òÎ¶¨ Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§. Îç∞Ïù¥ÌÑ∞Î≤†Ïù¥Ïä§ Íµ¨Ï°∞Î•º ÌôïÏù∏Ìï¥Ï£ºÏÑ∏Ïöî.',
                error: finalError?.message || 'Ïïå Ïàò ÏóÜÎäî Ïò§Î•ò',
                suggestion: 'http://localhost:3000/api/test/investments-table ÌéòÏù¥ÏßÄÏóêÏÑú ÌÖåÏù¥Î∏î Íµ¨Ï°∞Î•º ÌôïÏù∏Ìï¥Ï£ºÏÑ∏Ïöî.'
            });
        }
        
        console.log('‚úÖ Ìà¨Ïûê Ïã†Ï≤≠ ÏÉùÏÑ± ÏÑ±Í≥µ:', investment.id);
        res.json({ 
            success: true, 
            message: 'Ìà¨Ïûê Ïã†Ï≤≠Ïù¥ ÏôÑÎ£åÎêòÏóàÏäµÎãàÎã§. Í¥ÄÎ¶¨Ïûê ÏäπÏù∏ ÌõÑ Ï≤òÎ¶¨Îê©ÎãàÎã§.',
            investmentId: investment.id
        });
        
    } catch (error) {
        console.error('üí• Ìà¨Ïûê Ïã†Ï≤≠ Ï≤òÎ¶¨ ÏòàÏô∏ Ïò§Î•ò:', error);
        console.error('üí• Ïò§Î•ò Ïä§ÌÉù:', error.stack);
        res.status(500).json({ 
            success: false, 
            message: 'ÏÑúÎ≤Ñ Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§.',
            error: error.message
        });
    }
});

// Í¥ÄÎ¶¨Ïûê: Î™®Îì† Ìà¨Ïûê Ïã†Ï≤≠ Ï°∞Ìöå API
app.get('/api/admin/investments', requireAdmin, async (req, res) => {
    try {
        console.log('üîç Í¥ÄÎ¶¨Ïûê Ìà¨Ïûê Ï°∞Ìöå API Ìò∏Ï∂úÎê®');
        
        const { data: investments, error } = await supabase
            .from('investments')
            .select(`
                *,
                member:members!investments_member_id_fkey(
                    name, 
                    username, 
                    email, 
                    phone, 
                    bank_name, 
                    account_number, 
                    address, 
                    detail_address
                )
            `)
            .order('created_at', { ascending: false });
        
        if (error) {
            console.error('Í¥ÄÎ¶¨Ïûê Ìà¨Ïûê Ï°∞Ìöå Ïò§Î•ò:', error);
            return res.status(500).json({ 
                success: false, 
                message: 'Ìà¨Ïûê ÎÇ¥Ïó≠ Ï°∞Ìöå Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§.' 
            });
        }
        
        console.log('‚úÖ Í¥ÄÎ¶¨Ïûê Ìà¨Ïûê Ï°∞Ìöå ÏÑ±Í≥µ:', investments?.length || 0, 'Í±¥');
        res.json({ 
            success: true, 
            investments: investments || [] 
        });
        
    } catch (error) {
        console.error('Í¥ÄÎ¶¨Ïûê Ìà¨Ïûê Ï°∞Ìöå Ï§ë Ïò§Î•ò:', error);
        res.status(500).json({ 
            success: false, 
            message: 'ÏÑúÎ≤Ñ Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§.' 
        });
    }
});

// Í¥ÄÎ¶¨Ïûê: Ìà¨Ïûê ÏÉÅÏÑ∏Î≥¥Í∏∞ API
app.get('/api/admin/investment/:id', requireAdmin, async (req, res) => {
    try {
        const investmentId = req.params.id;
        console.log('üîç Í¥ÄÎ¶¨Ïûê Ìà¨Ïûê ÏÉÅÏÑ∏Î≥¥Í∏∞ API Ìò∏Ï∂úÎê®:', investmentId);
        
        const { data: investment, error } = await supabase
            .from('investments')
            .select(`
                *,
                member:members!investments_member_id_fkey(
                    id,
                    name, 
                    username, 
                    email, 
                    phone, 
                    bank_name, 
                    account_number, 
                    address, 
                    detail_address,
                    created_at,
                    updated_at
                )
            `)
            .eq('id', investmentId)
            .single();
        
        if (error) {
            console.error('Ìà¨Ïûê ÏÉÅÏÑ∏Î≥¥Í∏∞ Ï°∞Ìöå Ïò§Î•ò:', error);
            return res.status(404).json({ 
                success: false, 
                message: 'Ìà¨Ïûê Ï†ïÎ≥¥Î•º Ï∞æÏùÑ Ïàò ÏóÜÏäµÎãàÎã§.' 
            });
        }
        
        console.log('‚úÖ Ìà¨Ïûê ÏÉÅÏÑ∏Î≥¥Í∏∞ Ï°∞Ìöå ÏÑ±Í≥µ:', investment.id);
        res.json({ 
            success: true, 
            investment: investment 
        });
        
    } catch (error) {
        console.error('Ìà¨Ïûê ÏÉÅÏÑ∏Î≥¥Í∏∞ Ï§ë Ïò§Î•ò:', error);
        res.status(500).json({ 
            success: false, 
            message: 'ÏÑúÎ≤Ñ Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§.' 
        });
    }
});

// Í¥ÄÎ¶¨Ïûê: ÎåÄÏãúÎ≥¥Îìú ÌÜµÍ≥Ñ Ï°∞Ìöå API
app.get('/api/admin/dashboard-stats', requireAdmin, async (req, res) => {
    try {
        console.log('üìä Í¥ÄÎ¶¨Ïûê ÎåÄÏãúÎ≥¥Îìú ÌÜµÍ≥Ñ Ï°∞Ìöå API Ìò∏Ï∂úÎê®');
        
        // ÌöåÏõê Ïàò Ï°∞Ìöå (Í¥ÄÎ¶¨Ïûê Ï†úÏô∏)
        const { data: members, error: membersError } = await supabase
            .from('members')
            .select('id, status')
            .neq('role', 'admin');
        
        // Î™®Îì† Ìà¨Ïûê Îç∞Ïù¥ÌÑ∞ Ï°∞Ìöå (ÌöåÏõê Ï†ïÎ≥¥ Ìè¨Ìï®)
        const { data: investments, error: investmentsError } = await supabase
            .from('investments')
            .select(`
                *,
                member:members!investments_member_id_fkey(name, username)
            `);
        
        // Ìä∏ÎûúÏû≠ÏÖò Îç∞Ïù¥ÌÑ∞ Ï°∞Ìöå (ÎåÄÍ∏∞Ï§ëÏù∏ Í≤ÉÎßå)
        const { data: transactions, error: transactionsError } = await supabase
            .from('transactions')
            .select('*')
            .eq('status', 'pending');
        
        if (membersError) {
            console.error('ÌöåÏõê Îç∞Ïù¥ÌÑ∞ Ï°∞Ìöå Ïò§Î•ò:', membersError);
        }
        if (investmentsError) {
            console.error('Ìà¨Ïûê Îç∞Ïù¥ÌÑ∞ Ï°∞Ìöå Ïò§Î•ò:', investmentsError);
        }
        if (transactionsError) {
            console.error('Ìä∏ÎûúÏû≠ÏÖò Îç∞Ïù¥ÌÑ∞ Ï°∞Ìöå Ïò§Î•ò:', transactionsError);
        }
        
        // ÌöåÏõê ÌÜµÍ≥Ñ Í≥ÑÏÇ∞
        const totalMembers = members?.length || 0;
        const activeMembers = members?.filter(m => m.status === 'approved').length || 0;
        
        // Ìà¨Ïûê ÌÜµÍ≥Ñ Í≥ÑÏÇ∞
        const allInvestments = investments || [];
        const approvedInvestments = allInvestments.filter(inv => inv.status === 'approved');
        const pendingInvestments = allInvestments.filter(inv => inv.status === 'pending');
        const rejectedInvestments = allInvestments.filter(inv => inv.status === 'rejected');
        
        // Ï¥ù Ìà¨Ïûê Í∏àÏï° Í≥ÑÏÇ∞ (ÏäπÏù∏Îêú Ìà¨ÏûêÎßå)
        const totalInvestmentAmount = approvedInvestments.reduce((sum, inv) => {
            const amount = parseFloat(
                inv.investment_amount || 
                inv.amount || 
                inv.invest_amount || 
                0
            );
            return sum + amount;
        }, 0);
        
        // ÎåÄÍ∏∞Ï§ëÏù∏ Ìà¨Ïûê Í∏àÏï° Í≥ÑÏÇ∞
        const pendingInvestmentAmount = pendingInvestments.reduce((sum, inv) => {
            const amount = parseFloat(
                inv.investment_amount || 
                inv.amount || 
                inv.invest_amount || 
                0
            );
            return sum + amount;
        }, 0);
        
        // Í≥†Ïú† Ìà¨ÏûêÏûê Ïàò Í≥ÑÏÇ∞ (ÏäπÏù∏Îêú Ìà¨Ïûê Í∏∞Ï§Ä)
        const uniqueInvestors = new Set(approvedInvestments.map(inv => inv.member_id)).size;
        
        // ÏµúÍ∑º Ìà¨Ïûê ÌôúÎèô (ÏµúÍ∑º 7Ïùº)
        const sevenDaysAgo = new Date();
        sevenDaysAgo.setDate(sevenDaysAgo.getDate() - 7);
        const recentInvestments = allInvestments.filter(inv => 
            new Date(inv.created_at) >= sevenDaysAgo
        );
        
        // Ïù¥Î≤à Îã¨ Ìà¨Ïûê Í∏àÏï° Í≥ÑÏÇ∞
        const currentMonth = new Date();
        const startOfMonth = new Date(currentMonth.getFullYear(), currentMonth.getMonth(), 1);
        const thisMonthInvestments = approvedInvestments.filter(inv => 
            new Date(inv.created_at) >= startOfMonth
        );
        const thisMonthAmount = thisMonthInvestments.reduce((sum, inv) => {
            const amount = parseFloat(
                inv.investment_amount || 
                inv.amount || 
                inv.invest_amount || 
                0
            );
            return sum + amount;
        }, 0);
        
        const stats = {
            // Í∏∞Î≥∏ ÌÜµÍ≥Ñ
            totalMembers: totalMembers,
            activeMembers: activeMembers,
            totalInvestmentAmount: totalInvestmentAmount,
            uniqueInvestors: uniqueInvestors,
            
            // Ìà¨Ïûê ÏÉÅÌÉúÎ≥Ñ ÌÜµÍ≥Ñ
            totalInvestments: allInvestments.length,
            approvedInvestments: approvedInvestments.length,
            pendingInvestments: pendingInvestments.length,
            rejectedInvestments: rejectedInvestments.length,
            
            // Í∏àÏï° ÌÜµÍ≥Ñ
            pendingInvestmentAmount: pendingInvestmentAmount,
            thisMonthAmount: thisMonthAmount,
            
            // ÌôúÎèô ÌÜµÍ≥Ñ
            recentInvestments: recentInvestments.length,
            pendingTransactions: transactions?.length || 0,
            
            // ÏÉÅÏÑ∏ Îç∞Ïù¥ÌÑ∞ (ÏµúÍ∑º ÌôúÎèô)
            recentInvestmentList: recentInvestments.slice(0, 5).map(inv => ({
                id: inv.id,
                memberName: inv.member?.name || 'Ïïå Ïàò ÏóÜÏùå',
                amount: parseFloat(inv.investment_amount || inv.amount || 0),
                status: inv.status,
                createdAt: inv.created_at
            }))
        };
        
        console.log('‚úÖ Í¥ÄÎ¶¨Ïûê ÎåÄÏãúÎ≥¥Îìú ÌÜµÍ≥Ñ Ï°∞Ìöå ÏÑ±Í≥µ:', {
            Ï¥ùÌöåÏõêÏàò: stats.totalMembers,
            ÌôúÏÑ±ÌöåÏõêÏàò: stats.activeMembers,
            Ï¥ùÌà¨ÏûêÍ∏àÏï°: stats.totalInvestmentAmount.toLocaleString(),
            ÏäπÏù∏ÎêúÌà¨Ïûê: stats.approvedInvestments,
            ÎåÄÍ∏∞Ï§ëÌà¨Ïûê: stats.pendingInvestments
        });
        
        res.json({ 
            success: true, 
            stats: stats
        });
        
    } catch (error) {
        console.error('Í¥ÄÎ¶¨Ïûê ÎåÄÏãúÎ≥¥Îìú ÌÜµÍ≥Ñ Ï°∞Ìöå Ï§ë Ïò§Î•ò:', error);
        res.status(500).json({ 
            success: false, 
            message: 'ÏÑúÎ≤Ñ Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§.' 
        });
    }
});

// Í¥ÄÎ¶¨Ïûê: Ìà¨Ïûê ÏäπÏù∏/Í±∞Î∂Ä API
app.put('/api/admin/investment/:id', requireAdmin, async (req, res) => {
    try {
        const investmentId = req.params.id;
        const { action, note } = req.body; // action: 'approve' ÎòêÎäî 'reject'
        const adminId = req.session.user.id;
        
        if (!['approve', 'reject'].includes(action)) {
            return res.status(400).json({ 
                success: false, 
                message: 'Ïò¨Î∞îÎ•∏ Ïï°ÏÖòÏùÑ ÏÑ†ÌÉùÌï¥Ï£ºÏÑ∏Ïöî.' 
            });
        }
        
        // Ìà¨Ïûê Ïã†Ï≤≠ Ï°∞Ìöå
        const { data: investment, error: fetchError } = await supabase
            .from('investments')
            .select('*')
            .eq('id', investmentId)
            .single();
        
        if (fetchError || !investment) {
            return res.status(404).json({ 
                success: false, 
                message: 'Ìà¨Ïûê Ïã†Ï≤≠ÏùÑ Ï∞æÏùÑ Ïàò ÏóÜÏäµÎãàÎã§.' 
            });
        }
        
        if (investment.status !== 'pending') {
            return res.status(400).json({ 
                success: false, 
                message: 'Ïù¥ÎØ∏ Ï≤òÎ¶¨Îêú Ìà¨Ïûê Ïã†Ï≤≠ÏûÖÎãàÎã§.' 
            });
        }
        
        const newStatus = action === 'approve' ? 'approved' : 'rejected';
        
        // Ìà¨Ïûê ÏäπÏù∏Ïù∏ Í≤ΩÏö∞ ÏûîÏï°ÏóêÏÑú Ìà¨Ïûê Í∏àÏï° Ï∞®Í∞ê
        if (action === 'approve') {
            // ÌòÑÏû¨ ÏûîÏï° Ï°∞Ìöå
            const currentBalance = await getMemberBalance(investment.member_id);
            
            // ÏûîÏï° Î∂ÄÏ°± ÌôïÏù∏
            if (currentBalance < investment.amount) {
                return res.status(400).json({ 
                    success: false, 
                    message: 'Ï°∞Ìï©ÏõêÏùò ÏûîÏï°Ïù¥ Î∂ÄÏ°±Ìï©ÎãàÎã§.' 
                });
            }
            
            // ÏûîÏï°ÏóêÏÑú Ìà¨Ïûê Í∏àÏï° Ï∞®Í∞ê
            const newBalance = currentBalance - investment.amount;
            const { error: balanceError } = await supabase
                .from('member_balances')
                .update({ balance: newBalance })
                .eq('member_id', investment.member_id);
            
            if (balanceError) {
                console.error('ÏûîÏï° ÏóÖÎç∞Ïù¥Ìä∏ Ïò§Î•ò:', balanceError);
                return res.status(500).json({ 
                    success: false, 
                    message: 'ÏûîÏï° ÏóÖÎç∞Ïù¥Ìä∏ Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§.' 
                });
            }
            
            // Í±∞ÎûòÎÇ¥Ïó≠ Í∏∞Î°ù (Ìà¨Ïûê Ï∞®Í∞ê)
            const { error: transactionError } = await supabase
                .from('transactions')
                .insert({
                    member_id: investment.member_id,
                    type: 'investment',
                    amount: -investment.amount,
                    balance_after: newBalance,
                    description: `${investment.product_name} Ìà¨Ïûê`,
                    status: 'completed',
                    created_at: new Date().toISOString()
                });
                
            if (transactionError) {
                console.error('Í±∞ÎûòÎÇ¥Ïó≠ Í∏∞Î°ù Ïò§Î•ò:', transactionError);
                // Í±∞ÎûòÎÇ¥Ïó≠ Í∏∞Î°ù Ïã§Ìå®Ìï¥ÎèÑ Ìà¨Ïûê ÏäπÏù∏ÏùÄ ÏßÑÌñâ
            }
            
            console.log(`üí∞ Ìà¨Ïûê ÏäπÏù∏ÏúºÎ°ú ÏûîÏï° Ï∞®Í∞ê: ${investment.member_id}, Ï∞®Í∞êÏï°: ${investment.amount}, ÏûîÏï°: ${newBalance}`);
        }
        
        // Ìà¨Ïûê Ïã†Ï≤≠ ÏÉÅÌÉú ÏóÖÎç∞Ïù¥Ìä∏
        const { error: updateError } = await supabase
            .from('investments')
            .update({ 
                status: newStatus,
                admin_note: note,
                processed_by: adminId,
                processed_at: new Date().toISOString()
            })
            .eq('id', investmentId);
        
        if (updateError) {
            console.error('Ìà¨Ïûê Ïã†Ï≤≠ ÏóÖÎç∞Ïù¥Ìä∏ Ïò§Î•ò:', updateError);
            return res.status(500).json({ 
                success: false, 
                message: 'Ìà¨Ïûê Ïã†Ï≤≠ Ï≤òÎ¶¨ Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§.' 
            });
        }
        
        console.log(`‚úÖ Ìà¨Ïûê Ïã†Ï≤≠ ${action === 'approve' ? 'ÏäπÏù∏' : 'Í±∞Î∂Ä'} ÏÑ±Í≥µ:`, investmentId);
        res.json({ 
            success: true, 
            message: `Ìà¨Ïûê Ïã†Ï≤≠Ïù¥ ${action === 'approve' ? 'ÏäπÏù∏' : 'Í±∞Î∂Ä'}ÎêòÏóàÏäµÎãàÎã§.` 
        });
        
    } catch (error) {
        console.error('Ìà¨Ïûê Ïã†Ï≤≠ Ï≤òÎ¶¨ Ïò§Î•ò:', error);
        res.status(500).json({ 
            success: false, 
            message: 'ÏÑúÎ≤Ñ Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§.' 
        });
    }
});

// ÌÖåÏä§Ìä∏Ïö© Í∞ÑÎã®Ìïú API ÎùºÏö∞Ìä∏
app.post('/api/test-route', (req, res) => {
    console.log('üß™ ÌÖåÏä§Ìä∏ ÎùºÏö∞Ìä∏ Ïã§ÌñâÎê®!');
    res.json({ success: true, message: 'ÌÖåÏä§Ìä∏ ÎùºÏö∞Ìä∏ ÏûëÎèô' });
});

// ÏûÖÏ∂úÍ∏à Ïã†Ï≤≠ Ï≤òÎ¶¨ API
app.post('/api/transaction', async (req, res) => {
    console.log('üí≥üí≥üí≥ Ìä∏ÎûúÏû≠ÏÖò API ÎùºÏö∞Ìä∏ Ìï∏Îì§Îü¨ ÏßÑÏûÖ!!! (ÎØ∏Îì§Ïõ®Ïñ¥ Ï†úÍ±∞Îê®)');
    console.log('üí≥ Ìä∏ÎûúÏû≠ÏÖò API ÏöîÏ≤≠ Î∞õÏùå');
    console.log('üí≥ ÏöîÏ≤≠ Î≥∏Î¨∏:', req.body);
    console.log('üí≥ ÏÑ∏ÏÖò ÏÇ¨Ïö©Ïûê:', req.session.user);
    
    try {
        // ÏÇ¨Ïö©Ïûê Ïù∏Ï¶ù ÌôïÏù∏
        let currentUser = req.session.user;
        
        if (!currentUser) {
            // Ìó§ÎçîÏóêÏÑú ÏÇ¨Ïö©Ïûê Ï†ïÎ≥¥ ÌôïÏù∏
            const userHeader = req.headers['x-current-user'];
            if (userHeader) {
                try {
                    let user;
                    // Base64Î°ú Ïù∏ÏΩîÎî©Îêú Ìó§ÎçîÏù∏ÏßÄ ÌôïÏù∏ ÌõÑ ÎîîÏΩîÎî©
                    try {
                        const decodedBase64 = Buffer.from(userHeader, 'base64').toString('utf-8');
                        const decodedURI = decodeURIComponent(decodedBase64);
                        user = JSON.parse(decodedURI);
                    } catch (base64Error) {
                        // Base64 ÎîîÏΩîÎî© Ïã§Ìå®Ïãú Í∏∞Ï°¥ Î∞©ÏãùÏúºÎ°ú ÏãúÎèÑ
                        const decodedHeader = decodeURIComponent(userHeader);
                        user = JSON.parse(decodedHeader);
                    }
                    currentUser = user;
                    console.log('üí≥ Ìó§ÎçîÏóêÏÑú ÏÇ¨Ïö©Ïûê Ï†ïÎ≥¥ Ï∂îÏ∂ú:', currentUser?.username);
                } catch (e) {
                    console.log('üí≥ Ìó§Îçî ÌååÏã± Ïò§Î•ò:', e);
                }
            }
        }
        
        if (!currentUser) {
            console.log('üí≥ ÏÇ¨Ïö©Ïûê Ïù∏Ï¶ù Ïã§Ìå® - Î°úÍ∑∏Ïù∏ ÌïÑÏöî');
            return res.status(401).json({ 
                success: false, 
                message: 'Î°úÍ∑∏Ïù∏Ïù¥ ÌïÑÏöîÌï©ÎãàÎã§.' 
            });
        }
        
        console.log('üí≥ Ïù∏Ï¶ùÎêú ÏÇ¨Ïö©Ïûê:', currentUser.username);
        
        const { type, amount, bankTransferName, withdrawBankName, withdrawAccountNumber, withdrawAccountHolder } = req.body;
        const memberId = currentUser.id;
        
        console.log('üí≥ ÌååÏã±Îêú Îç∞Ïù¥ÌÑ∞:', { type, amount, bankTransferName, withdrawBankName, withdrawAccountNumber, withdrawAccountHolder, memberId });
        
        // ÏûÖÎ†• Í≤ÄÏ¶ù
        if (!type || !amount || isNaN(amount) || parseFloat(amount) <= 0) {
            return res.status(400).json({ 
                success: false, 
                message: 'Ïò¨Î∞îÎ•∏ Í∏àÏï°ÏùÑ ÏûÖÎ†•Ìï¥Ï£ºÏÑ∏Ïöî.' 
            });
        }
        
        const transactionAmount = parseFloat(amount);
        
        // Ï∂úÍ∏àÏùò Í≤ΩÏö∞ ÏûîÏï° ÌôïÏù∏
        if (type === 'withdraw') {
            const currentBalance = await getMemberBalance(memberId);
            if (transactionAmount > currentBalance) {
                return res.status(400).json({ 
                    success: false, 
                    message: 'ÏûîÏï°Ïù¥ Î∂ÄÏ°±Ìï©ÎãàÎã§.' 
                });
            }
            
            // ÏµúÏÜå Ï∂úÍ∏àÏï° ÌôïÏù∏
            if (transactionAmount < 10000) {
                return res.status(400).json({ 
                    success: false, 
                    message: 'ÏµúÏÜå Ï∂úÍ∏à Í∏àÏï°ÏùÄ 10,000ÏõêÏûÖÎãàÎã§.' 
                });
            }
            
            // Ï∂úÍ∏à Í≥ÑÏ¢å Ï†ïÎ≥¥ ÌôïÏù∏
            if (!withdrawBankName || !withdrawAccountNumber || !withdrawAccountHolder) {
                return res.status(400).json({ 
                    success: false, 
                    message: 'Ï∂úÍ∏à Í≥ÑÏ¢å Ï†ïÎ≥¥Î•º ÏûÖÎ†•Ìï¥Ï£ºÏÑ∏Ïöî.' 
                });
            }
        }
        
        // ÏûÖÍ∏àÏùò Í≤ΩÏö∞ ÏµúÏÜå Í∏àÏï° ÌôïÏù∏
        if (type === 'deposit' && transactionAmount < 50000) {
            return res.status(400).json({ 
                success: false, 
                message: 'ÏµúÏÜå ÏûÖÍ∏à Í∏àÏï°ÏùÄ 50,000ÏõêÏûÖÎãàÎã§.' 
            });
        }
        
        // Ìä∏ÎûúÏû≠ÏÖò ÏÉùÏÑ±
        const transactionData = {
            member_id: memberId,
            type: type,
            amount: transactionAmount,
            status: 'pending'
        };
        
        if (type === 'deposit') {
            transactionData.bank_transfer_name = bankTransferName || req.session.user.name;
        } else if (type === 'withdraw') {
            transactionData.withdraw_bank_name = withdrawBankName;
            transactionData.withdraw_account_number = withdrawAccountNumber;
            transactionData.withdraw_account_holder = withdrawAccountHolder;
        }
        
        const { data: transaction, error } = await supabase
            .from('transactions')
            .insert(transactionData)
            .select()
            .single();
        
        if (error) {
            console.error('Ìä∏ÎûúÏû≠ÏÖò ÏÉùÏÑ± Ïò§Î•ò:', error);
            return res.status(500).json({ 
                success: false, 
                message: 'Ïã†Ï≤≠ Ï≤òÎ¶¨ Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§.' 
            });
        }
        
        // Ìä∏ÎûúÏû≠ÏÖò Î°úÍ∑∏ ÏÉùÏÑ±
        await supabase
            .from('transaction_logs')
            .insert({
                transaction_id: transaction.id,
                previous_status: null,
                new_status: 'pending',
                note: `${type === 'deposit' ? 'ÏûÖÍ∏à' : 'Ï∂úÍ∏à'} Ïã†Ï≤≠ ÏÉùÏÑ±`
            });
        
        res.json({ 
            success: true, 
            message: `${type === 'deposit' ? 'ÏûÖÍ∏à' : 'Ï∂úÍ∏à'} Ïã†Ï≤≠Ïù¥ ÏôÑÎ£åÎêòÏóàÏäµÎãàÎã§. Í¥ÄÎ¶¨Ïûê ÏäπÏù∏ ÌõÑ Ï≤òÎ¶¨Îê©ÎãàÎã§.`,
            transactionId: transaction.id
        });
        
    } catch (error) {
        console.error('Ìä∏ÎûúÏû≠ÏÖò Ï≤òÎ¶¨ Ïò§Î•ò:', error);
        res.status(500).json({ 
            success: false, 
            message: 'ÏÑúÎ≤Ñ Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§.' 
        });
    }
});

// Ìä∏ÎûúÏû≠ÏÖò Î™©Î°ù Ï°∞Ìöå API
app.get('/api/transactions', requireLogin, async (req, res) => {
    try {
        const memberId = req.session.user.id;
        const { data: transactions, error } = await supabase
            .from('transactions')
            .select('*')
            .eq('member_id', memberId)
            .order('created_at', { ascending: false })
            .limit(20);
        
        if (error) {
            console.error('Ìä∏ÎûúÏû≠ÏÖò Ï°∞Ìöå Ïò§Î•ò:', error);
            return res.status(500).json({ 
                success: false, 
                message: 'Í±∞Îûò ÎÇ¥Ïó≠ Ï°∞Ìöå Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§.' 
            });
        }
        
        res.json({ 
            success: true, 
            transactions: transactions || [] 
        });
        
    } catch (error) {
        console.error('Ìä∏ÎûúÏû≠ÏÖò Ï°∞Ìöå Ï§ë Ïò§Î•ò:', error);
        res.status(500).json({ 
            success: false, 
            message: 'ÏÑúÎ≤Ñ Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§.' 
        });
    }
});

// Í¥ÄÎ¶¨Ïûê: Î™®Îì† Ìä∏ÎûúÏû≠ÏÖò Ï°∞Ìöå API
app.get('/api/admin/transactions', requireAdmin, async (req, res) => {
    try {
        console.log('üîç Í¥ÄÎ¶¨Ïûê Ìä∏ÎûúÏû≠ÏÖò Ï°∞Ìöå API Ìò∏Ï∂úÎê®');
        
        const { data: transactions, error } = await supabase
            .from('transactions')
            .select(`
                *,
                member:members!transactions_member_id_fkey(name, username)
            `)
            .order('created_at', { ascending: false });
        
        if (error) {
            console.error('Í¥ÄÎ¶¨Ïûê Ìä∏ÎûúÏû≠ÏÖò Ï°∞Ìöå Ïò§Î•ò:', error);
            return res.status(500).json({ 
                success: false, 
                message: 'Í±∞Îûò ÎÇ¥Ïó≠ Ï°∞Ìöå Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§.' 
            });
        }
        
        console.log('‚úÖ Í¥ÄÎ¶¨Ïûê Ìä∏ÎûúÏû≠ÏÖò Ï°∞Ìöå ÏÑ±Í≥µ:', transactions?.length || 0, 'Í±¥');
        res.json({ 
            success: true, 
            transactions: transactions || [] 
        });
        
    } catch (error) {
        console.error('Í¥ÄÎ¶¨Ïûê Ìä∏ÎûúÏû≠ÏÖò Ï°∞Ìöå Ï§ë Ïò§Î•ò:', error);
        res.status(500).json({ 
            success: false, 
            message: 'ÏÑúÎ≤Ñ Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§.' 
        });
    }
});

// Í¥ÄÎ¶¨Ïûê: Ìä∏ÎûúÏû≠ÏÖò ÏäπÏù∏/Í±∞Î∂Ä API
app.put('/api/admin/transaction/:id', requireAdmin, async (req, res) => {
    try {
        const transactionId = req.params.id;
        const { action, note } = req.body; // action: 'approve' ÎòêÎäî 'reject'
        const adminId = req.session.user.id;
        
        if (!['approve', 'reject'].includes(action)) {
            return res.status(400).json({ 
                success: false, 
                message: 'Ïò¨Î∞îÎ•∏ Ïï°ÏÖòÏùÑ ÏÑ†ÌÉùÌï¥Ï£ºÏÑ∏Ïöî.' 
            });
        }
        
        // Ìä∏ÎûúÏû≠ÏÖò Ï°∞Ìöå
        const { data: transaction, error: fetchError } = await supabase
            .from('transactions')
            .select('*')
            .eq('id', transactionId)
            .single();
        
        if (fetchError || !transaction) {
            return res.status(404).json({ 
                success: false, 
                message: 'Í±∞Îûò ÎÇ¥Ïó≠ÏùÑ Ï∞æÏùÑ Ïàò ÏóÜÏäµÎãàÎã§.' 
            });
        }
        
        if (transaction.status !== 'pending') {
            return res.status(400).json({ 
                success: false, 
                message: 'Ïù¥ÎØ∏ Ï≤òÎ¶¨Îêú Í±∞ÎûòÏûÖÎãàÎã§.' 
            });
        }
        
        const newStatus = action === 'approve' ? 'approved' : 'rejected';
        
        // ÏäπÏù∏Ïù∏ Í≤ΩÏö∞ ÏûîÏï° ÏóÖÎç∞Ïù¥Ìä∏
        if (action === 'approve') {
            const currentBalance = await getMemberBalance(transaction.member_id);
            
            if (transaction.type === 'deposit') {
                // ÏûÖÍ∏à ÏäπÏù∏: ÏûîÏï° Ï¶ùÍ∞Ä
                const newBalance = currentBalance + parseFloat(transaction.amount);
                const updateSuccess = await updateMemberBalance(transaction.member_id, newBalance);
                
                if (!updateSuccess) {
                    return res.status(500).json({ 
                        success: false, 
                        message: 'ÏûîÏï° ÏóÖÎç∞Ïù¥Ìä∏ Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§.' 
                    });
                }
            } else if (transaction.type === 'withdraw') {
                // Ï∂úÍ∏à ÏäπÏù∏: ÏûîÏï° Í∞êÏÜå
                if (currentBalance < parseFloat(transaction.amount)) {
                    return res.status(400).json({ 
                        success: false, 
                        message: 'ÏûîÏï°Ïù¥ Î∂ÄÏ°±ÌïòÏó¨ Ï∂úÍ∏àÏùÑ ÏäπÏù∏Ìï† Ïàò ÏóÜÏäµÎãàÎã§.' 
                    });
                }
                
                const newBalance = currentBalance - parseFloat(transaction.amount);
                const updateSuccess = await updateMemberBalance(transaction.member_id, newBalance);
                
                if (!updateSuccess) {
                    return res.status(500).json({ 
                        success: false, 
                        message: 'ÏûîÏï° ÏóÖÎç∞Ïù¥Ìä∏ Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§.' 
                    });
                }
            }
        }
        
        // Ìä∏ÎûúÏû≠ÏÖò ÏÉÅÌÉú ÏóÖÎç∞Ïù¥Ìä∏
        const { error: updateError } = await supabase
            .from('transactions')
            .update({ 
                status: newStatus,
                admin_note: note,
                processed_by: adminId,
                processed_at: new Date().toISOString()
            })
            .eq('id', transactionId);
        
        if (updateError) {
            console.error('Ìä∏ÎûúÏû≠ÏÖò ÏóÖÎç∞Ïù¥Ìä∏ Ïò§Î•ò:', updateError);
            return res.status(500).json({ 
                success: false, 
                message: 'Í±∞Îûò Ï≤òÎ¶¨ Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§.' 
            });
        }
        
        // Ìä∏ÎûúÏû≠ÏÖò Î°úÍ∑∏ ÏÉùÏÑ±
        await supabase
            .from('transaction_logs')
            .insert({
                transaction_id: transactionId,
                previous_status: 'pending',
                new_status: newStatus,
                admin_id: adminId,
                note: note || `Í¥ÄÎ¶¨ÏûêÏóê ÏùòÌï¥ ${action === 'approve' ? 'ÏäπÏù∏' : 'Í±∞Î∂Ä'}Îê®`
            });
        
        res.json({ 
            success: true, 
            message: `Í±∞ÎûòÍ∞Ä ${action === 'approve' ? 'ÏäπÏù∏' : 'Í±∞Î∂Ä'}ÎêòÏóàÏäµÎãàÎã§.` 
        });
        
    } catch (error) {
        console.error('Ìä∏ÎûúÏû≠ÏÖò Ï≤òÎ¶¨ Ïò§Î•ò:', error);
        res.status(500).json({ 
            success: false, 
            message: 'ÏÑúÎ≤Ñ Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§.' 
        });
    }
});

// ÏÑúÎ≤Ñ ÏãúÏûë
async function startServer() {
    try {
        console.log('üöÄ ÌïúÏñëÏóêÎÑàÏßÄ ÏÑúÎ≤ÑÎ•º ÏãúÏûëÌï©ÎãàÎã§...');
        
        // ÏÑúÎ≤ÑÎ•º Î®ºÏ†Ä ÏãúÏûëÌïòÏó¨ Îπ†Î•∏ ÏùëÎãµ Ï†úÍ≥µ
        const server = app.listen(PORT, () => {
            console.log(`‚úÖ ÌïúÏñëÏóêÎÑàÏßÄ ÏÑúÎ≤ÑÍ∞Ä Ìè¨Ìä∏ ${PORT}ÏóêÏÑú Ïã§Ìñâ Ï§ëÏûÖÎãàÎã§.`);
            console.log(`üåê Ï†ëÏÜç URL: ${NODE_ENV === 'production' ? 'https://hanyang-energy.onrender.com' : `http://localhost:${PORT}`}`);
        });

        // ÏÑúÎ≤Ñ ÌÉÄÏûÑÏïÑÏõÉ ÏÑ§Ï†ï (Render Î∞∞Ìè¨ ÌôòÍ≤ΩÏóêÏÑú Ï§ëÏöî)
        server.timeout = 30000; // 30Ï¥à
        server.keepAliveTimeout = 65000; // 65Ï¥à
        server.headersTimeout = 66000; // 66Ï¥à

        // Î∞±Í∑∏ÎùºÏö¥ÎìúÏóêÏÑú Ï¥àÍ∏∞Ìôî ÏûëÏóÖ ÏàòÌñâ (ÌÉÄÏûÑÏïÑÏõÉ Îã®Ï∂ï)
        const initTimeout = setTimeout(() => {
            console.warn('‚ö†Ô∏è Ï¥àÍ∏∞Ìôî ÏûëÏóÖÏù¥ 30Ï¥àÎ•º Ï¥àÍ≥ºÌñàÏäµÎãàÎã§. Í∏∞Î≥∏Í∞íÏúºÎ°ú Í≥ÑÏÜç ÏßÑÌñâÌï©ÎãàÎã§.');
        }, 30000);

        Promise.all([
            Promise.race([
                loadDataFromSupabase(),
                new Promise((_, reject) => setTimeout(() => reject(new Error('timeout')), 20000))
            ]).catch(err => {
                console.warn('‚ö†Ô∏è Supabase Îç∞Ïù¥ÌÑ∞ Î°úÎìú Ïã§Ìå®:', err.message);
                return null;
            }),
            Promise.race([
                convertHtmlToEjs(),
                new Promise((_, reject) => setTimeout(() => reject(new Error('timeout')), 10000))
            ]).catch(err => {
                console.warn('‚ö†Ô∏è HTML to EJS Î≥ÄÌôò Ïã§Ìå®:', err.message);
                return null;
            }),
            Promise.race([
                ensureBasicAccounts(),
                new Promise((_, reject) => setTimeout(() => reject(new Error('timeout')), 15000))
            ]).catch(err => {
                console.warn('‚ö†Ô∏è Í∏∞Î≥∏ Í≥ÑÏ†ï ÏÉùÏÑ± Ïã§Ìå®:', err.message);
                return null;
            })
        ]).then(() => {
            clearTimeout(initTimeout);
            console.log('‚úÖ ÏÑúÎ≤Ñ Ï¥àÍ∏∞Ìôî ÏôÑÎ£å');
        }).catch(err => {
            clearTimeout(initTimeout);
            console.error('‚ùå ÏÑúÎ≤Ñ Ï¥àÍ∏∞Ìôî Ï§ë ÏùºÎ∂Ä Ïò§Î•ò Î∞úÏÉù:', err);
        });

        // ÏÑúÎ≤Ñ Ï¢ÖÎ£å Ïãú Ï†ïÎ¶¨
        process.on('SIGTERM', () => {
            console.log('üîÑ ÏÑúÎ≤ÑÎ•º Ï†ïÏÉÅÏ†ÅÏúºÎ°ú Ï¢ÖÎ£åÌï©ÎãàÎã§...');
            server.close(() => {
                console.log('‚úÖ ÏÑúÎ≤ÑÍ∞Ä Ï†ïÏÉÅÏ†ÅÏúºÎ°ú Ï¢ÖÎ£åÎêòÏóàÏäµÎãàÎã§.');
                process.exit(0);
            });
        });

        process.on('SIGINT', () => {
            console.log('üîÑ Ïù∏ÌÑ∞ÎüΩÌä∏ Ïã†Ìò∏Î•º Î∞õÏïòÏäµÎãàÎã§. ÏÑúÎ≤ÑÎ•º Ï¢ÖÎ£åÌï©ÎãàÎã§...');
            server.close(() => {
                console.log('‚úÖ ÏÑúÎ≤ÑÍ∞Ä Ï†ïÏÉÅÏ†ÅÏúºÎ°ú Ï¢ÖÎ£åÎêòÏóàÏäµÎãàÎã§.');
                process.exit(0);
            });
        });

        return server;
    } catch (error) {
        console.error('‚ùå ÏÑúÎ≤Ñ ÏãúÏûë Ï§ë Ïò§Î•ò:', error);
        process.exit(1);
    }
}

// ÏóêÎü¨ Ìï∏Îì§ÎßÅ (Î™®Îì† ÎùºÏö∞Ìä∏ Ï†ïÏùò ÌõÑÏóê ÏúÑÏπò)
app.use((err, req, res, next) => {
    console.error(err.stack);
    res.status(500).send('ÏÑúÎ≤Ñ Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§.');
});

// 404 Ìï∏Îì§ÎßÅ (Î™®Îì† ÎùºÏö∞Ìä∏ Ï†ïÏùò ÌõÑÏóê ÏúÑÏπò)
app.use((req, res) => {
    console.log('üö´ 404 - ÌéòÏù¥ÏßÄÎ•º Ï∞æÏùÑ Ïàò ÏóÜÏùå:', req.method, req.url);
    res.status(404).send('ÌéòÏù¥ÏßÄÎ•º Ï∞æÏùÑ Ïàò ÏóÜÏäµÎãàÎã§.');
});

startServer();

module.exports = app;
