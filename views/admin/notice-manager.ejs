<!DOCTYPE html>
<html lang="ko">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>공지사항 관리 - 한양에너지 관리자</title>
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/gh/orioncactus/pretendard/dist/web/static/pretendard.css">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
    <link rel="stylesheet" href="/admin/css/admin.css">
</head>
<body>
    <!-- 사이드바 -->
    <%- include('../partials/admin-sidebar', { currentPage: 'notice-manager' }) %>

    <!-- 메인 컨텐츠 -->
    <div class="main-content">
        <!-- 헤더 -->
        <%- include('../partials/admin-header', { pageTitle: '공지사항 관리', user: user }) %>

        <!-- 추가 헤더 컨트롤 -->
        <div class="page-controls">
            <div class="controls-left">
                <h2>공지사항 목록</h2>
            </div>
            <div class="controls-right">
                <input type="text" id="searchInput" placeholder="제목으로 검색..." style="padding: 8px; margin-right: 10px; border: 1px solid #ddd; border-radius: 5px;">
                <button class="btn btn-primary" onclick="showAddNoticeModal()">
                    <i class="fas fa-plus"></i> 새 공지사항 작성
                </button>
            </div>
        </div>
        </header>

        <!-- 공지사항 관리 컨텐츠 -->
        <div class="dashboard-content">
            <!-- 공지사항 목록 -->
            <div class="admin-table">
                <table id="noticeTable">
                    <thead>
                        <tr>
                            <th onclick="sortTable(this.parentNode.parentNode.parentNode, 0)">번호</th>
                            <th onclick="sortTable(this.parentNode.parentNode.parentNode, 1)">제목</th>
                            <th onclick="sortTable(this.parentNode.parentNode.parentNode, 2)">작성일</th>
                            <th onclick="sortTable(this.parentNode.parentNode.parentNode, 3)">조회수</th>
                            <th onclick="sortTable(this.parentNode.parentNode.parentNode, 4)">상태</th>
                            <th>관리</th>
                        </tr>
                    </thead>
                    <tbody id="noticeTableBody">
                        <!-- JavaScript로 동적 생성 -->
                    </tbody>
                </table>
            </div>

            <!-- 페이지네이션 -->
            <div id="paginationContainer"></div>
        </div>
    </div>

    <!-- 공지사항 추가/수정 모달 -->
    <div id="noticeModal" class="modal" style="display: none;">
        <div class="modal-content" style="max-width: 800px;">
            <div class="modal-header">
                <h3 id="modalTitle">새 공지사항 작성</h3>
                <button class="modal-close" onclick="hideNoticeModal()">&times;</button>
            </div>
            <div class="modal-body">
                <form id="noticeForm" class="admin-form">
                    <div class="form-group">
                        <label for="noticeTitle">제목</label>
                        <input type="text" id="noticeTitle" name="noticeTitle" required>
                    </div>
                    
                    <div class="form-group">
                        <label for="noticeContent">내용</label>
                        <textarea id="noticeContent" name="noticeContent" rows="10" required></textarea>
                    </div>
                    
                    <div class="form-group">
                        <label for="noticeStatus">상태</label>
                        <select id="noticeStatus" name="noticeStatus">
                            <option value="published">게시</option>
                            <option value="draft">임시저장</option>
                        </select>
                    </div>
                    
                    <div class="form-group">
                        <label>
                            <input type="checkbox" id="isPinned" name="isPinned">
                            상단 고정
                        </label>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" onclick="hideNoticeModal()">취소</button>
                <button type="button" class="btn btn-primary" onclick="saveNotice()">저장</button>
            </div>
        </div>
    </div>

    <!-- 모달 오버레이 -->
    <div id="modalOverlay" class="modal-overlay" style="display: none;" onclick="hideNoticeModal()"></div>

    <script src="/admin/js/admin.js"></script>
    <script src="/js/auth.js"></script>
    <%- include('../partials/admin-scripts') %>
    <script>
        // 전역 변수
        let editingNoticeId = null;
        // 공지사항 데이터 로드
        async function loadNotices() {
            try {
                const response = await fetch('/api/notices');
                const result = await response.json();
                
                if (result.success) {
                    renderNoticeTable(result.data);
                } else {
                    console.error('공지사항 목록 로드 실패:', result.message);
                    showAlert('error', '공지사항 목록을 불러올 수 없습니다.');
                }
            } catch (error) {
                console.error('공지사항 목록 로드 중 오류:', error);
                showAlert('error', '서버 연결에 실패했습니다.');
            }
        }

        // 공지사항 목록 렌더링
        function renderNoticeTable(data = []) {
            const tbody = document.getElementById('noticeTableBody');
            tbody.innerHTML = '';

            if (data.length === 0) {
                tbody.innerHTML = '<tr><td colspan="6" style="text-align: center; color: #666; padding: 40px;">등록된 공지사항이 없습니다.</td></tr>';
                return;
            }

            data.forEach((notice, index) => {
                const row = document.createElement('tr');
                row.innerHTML = `
                    <td>${notice.id}</td>
                    <td>
                        ${notice.isPinned ? '<i class="fas fa-thumbtack" style="color: #e74c3c; margin-right: 5px;"></i>' : ''}
                        ${notice.title}
                    </td>
                    <td>${new Date(notice.createdAt).toLocaleDateString('ko-KR')}</td>
                    <td>${notice.views ? notice.views.toLocaleString() : '0'}</td>
                    <td>
                        <span class="status-badge ${notice.status === 'published' ? 'status-active' : 'status-inactive'}">
                            ${notice.status === 'published' ? '게시' : '임시저장'}
                        </span>
                    </td>
                    <td>
                        <button class="btn btn-warning btn-sm" onclick="editNotice(${notice.id})">
                            <i class="fas fa-edit"></i> 수정
                        </button>
                        <button class="btn btn-danger btn-sm" onclick="deleteNotice(${notice.id})">
                            <i class="fas fa-trash"></i> 삭제
                        </button>
                    </td>
                `;
                tbody.appendChild(row);
            });
        }

        // 공지사항 추가 모달 표시
        function showAddNoticeModal() {
            editingNoticeId = null;
            document.getElementById('modalTitle').textContent = '새 공지사항 작성';
            document.getElementById('noticeForm').reset();
            showModal();
        }

        // 공지사항 수정 모달 표시
        async function editNotice(id) {
            try {
                const response = await fetch(`/api/notices/${id}`);
                const result = await response.json();
                
                if (result.success) {
                    const notice = result.data;
                    editingNoticeId = id;
                    document.getElementById('modalTitle').textContent = '공지사항 수정';
                    
                    // 폼에 데이터 채우기
                    document.getElementById('noticeTitle').value = notice.title;
                    document.getElementById('noticeContent').value = notice.content;
                    document.getElementById('noticeStatus').value = notice.status;
                    document.getElementById('isPinned').checked = notice.isPinned;
                    
                    showModal();
                } else {
                    showAlert('error', '공지사항 정보를 불러올 수 없습니다.');
                }
            } catch (error) {
                console.error('공지사항 정보 로드 중 오류:', error);
                showAlert('error', '서버 연결에 실패했습니다.');
            }
        }

        // 모달 표시
        function showModal() {
            document.getElementById('noticeModal').style.display = 'block';
            document.getElementById('modalOverlay').style.display = 'block';
            document.body.style.overflow = 'hidden';
        }

        // 모달 숨기기
        function hideNoticeModal() {
            document.getElementById('noticeModal').style.display = 'none';
            document.getElementById('modalOverlay').style.display = 'none';
            document.body.style.overflow = 'auto';
        }

        // 공지사항 저장
        async function saveNotice() {
            const form = document.getElementById('noticeForm');
            if (!validateForm(form)) {
                return;
            }

            const formData = new FormData(form);
            const noticeData = {
                title: formData.get('noticeTitle'),
                content: formData.get('noticeContent'),
                status: formData.get('noticeStatus'),
                isPinned: formData.has('isPinned')
            };

            try {
                let response;
                if (editingNoticeId) {
                    // 수정
                    response = await fetch(`/api/notices/${editingNoticeId}`, {
                        method: 'PUT',
                        headers: {
                            'Content-Type': 'application/json',
                        },
                        body: JSON.stringify(noticeData)
                    });
                } else {
                    // 새 등록
                    response = await fetch('/api/notices', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                        },
                        body: JSON.stringify(noticeData)
                    });
                }

                const result = await response.json();
                
                if (result.success) {
                    showAlert('success', result.message);
                    hideNoticeModal();
                    loadNotices(); // 목록 새로고침
                    form.reset();
                    editingNoticeId = null;
                } else {
                    showAlert('error', result.message || '저장에 실패했습니다.');
                }
            } catch (error) {
                console.error('공지사항 저장 중 오류:', error);
                showAlert('error', '서버 연결에 실패했습니다.');
            }
        }

        // 공지사항 삭제
        async function deleteNotice(id) {
            confirmAction('이 공지사항을 삭제하시겠습니까?', async () => {
                try {
                    const response = await fetch(`/api/notices/${id}`, {
                        method: 'DELETE'
                    });
                    
                    const result = await response.json();
                    
                    if (result.success) {
                        showAlert('success', '공지사항이 성공적으로 삭제되었습니다.');
                        loadNotices(); // 목록 새로고침
                    } else {
                        showAlert('error', result.message || '삭제에 실패했습니다.');
                    }
                } catch (error) {
                    console.error('공지사항 삭제 중 오류:', error);
                    showAlert('error', '서버 연결에 실패했습니다.');
                }
            });
        
        // 초기화
        document.addEventListener('DOMContentLoaded', function() {
            loadNotices(); // 서버에서 데이터 로드
            
            // 검색 기능 설정
            const searchInput = document.getElementById('searchInput');
            const table = document.getElementById('noticeTable');
            setupTableSearch(searchInput, table);
        });
    </script>

    <style>
        /* 모달 스타일 */
        .modal {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            z-index: 1001;
            display: flex;
            align-items: center;
            justify-content: center;
        }

        .modal-overlay {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(0, 0, 0, 0.5);
            z-index: 1000;
        }

        .modal-content {
            background: white;
            border-radius: 10px;
            max-width: 500px;
            width: 90%;
            max-height: 90vh;
            overflow-y: auto;
            z-index: 1002;
        }

        .modal-header {
            padding: 20px;
            border-bottom: 1px solid #eee;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }

        .modal-header h3 {
            margin: 0;
            color: #2c3e50;
        }

        .modal-close {
            background: none;
            border: none;
            font-size: 24px;
            cursor: pointer;
            color: #7f8c8d;
        }

        .modal-body {
            padding: 20px;
        }

        .modal-footer {
            padding: 20px;
            border-top: 1px solid #eee;
            display: flex;
            justify-content: flex-end;
            gap: 10px;
        }

        /* 상태 배지 */
        .status-badge {
            padding: 4px 8px;
            border-radius: 12px;
            font-size: 12px;
            font-weight: 500;
        }

        .status-active {
            background: #d4edda;
            color: #155724;
        }

        .status-inactive {
            background: #fff3cd;
            color: #856404;
        }

        /* 버튼 크기 */
        .btn-sm {
            padding: 5px 10px;
            font-size: 12px;
            margin-right: 5px;
        }

        .btn-secondary {
            background: #6c757d;
            color: white;
        }

        .btn-secondary:hover {
            background: #5a6268;
        }

        /* 테이블 헤더 정렬 가능 표시 */
        th {
            cursor: pointer;
            user-select: none;
        }

        th:hover {
            background: #e9ecef;
        }
    </style>
</body>
</html>
