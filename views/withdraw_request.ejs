<!DOCTYPE html>
<html lang="ko">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta name="description" content="한전과 20년 고정계약 체결, 안전한 태양광 수익 설계, 매월 이자수익 세전 최대 30% 지급">
    <meta name="keywords" content="태양광,태양광발전사업,태양열,태양광투자,신재생에너지,고수익,안정적인투자,안전한투자,1억투자,한양에너지,조합원,제테크">
    <meta name="author" content="한양에너지">
    <link rel="icon" href="img/favi.ico" type="image/jpeg">
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/gh/orioncactus/pretendard/dist/web/static/pretendard.css">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
    <link rel="stylesheet" href="css/global.css">
    <link rel="stylesheet" href="css/header.css">
    <link rel="stylesheet" href="css/footer.css">
    <script src="js/auth.js"></script>
    <script>
        // 디버깅용 전역 함수
        window.testWithdraw = function() {
            console.log('테스트 출금 함수 호출됨');
            alert('출금 테스트 함수가 작동합니다!');
        };
        
        // 출금 신청 함수를 전역으로 등록
        window.manualWithdrawSubmit = function() {
            console.log('수동 출금 신청 시작');
            const form = document.getElementById('withdraw-form');
            if (form) {
                const event = new Event('submit', { bubbles: true, cancelable: true });
                form.dispatchEvent(event);
            } else {
                console.error('출금 폼을 찾을 수 없음');
            }
        };
        
        // 직접 호출 함수
        window.handleWithdrawSubmitDirect = function() {
            console.log('직접 출금 신청 호출');
            const form = document.getElementById('withdraw-form');
            if (form) {
                // 가짜 이벤트 객체 생성
                const fakeEvent = {
                    preventDefault: function() { console.log('preventDefault 호출됨'); },
                    target: form
                };
                handleWithdrawSubmit(fakeEvent);
            } else {
                console.error('출금 폼을 찾을 수 없음');
            }
        };
        
        // requireLogin 함수 정의 (auth.js에서 로드되지 않을 경우를 대비)
        window.requireLogin = function() {
            const user = localStorage.getItem('currentUser');
            if (!user) {
                alert('로그인이 필요합니다.');
                window.location.href = '/login';
                return false;
            }
            return true;
        };
        
        // updateHeaderUserInfo 함수 정의 (auth.js에서 로드되지 않을 경우를 대비)
        window.updateHeaderUserInfo = function() {
            console.log('헤더 사용자 정보 업데이트 호출됨');
            // 간단한 구현
            const authArea = document.querySelector('.hy-auth-area');
            if (authArea) {
                const user = JSON.parse(localStorage.getItem('currentUser') || '{}');
                if (user.name) {
                    authArea.innerHTML = `
                        <div style="display: flex; align-items: center; gap: 10px;">
                            <span>${user.name}님</span>
                            <a href="/mypage" style="color: #4361ee;">마이페이지</a>
                            <button onclick="logout()" style="background: none; border: 1px solid #4361ee; color: #4361ee; padding: 5px 10px; border-radius: 5px;">로그아웃</button>
                        </div>
                    `;
                }
            }
        };
        
        // logout 함수 정의
        window.logout = function() {
            localStorage.removeItem('currentUser');
            window.location.href = '/login';
        };
        
        // loadTransactionHistory 함수 정의 (404 오류 방지)
        window.loadTransactionHistory = function() {
            console.log('거래 내역 로드 시도됨 (스킵)');
            // 404 오류를 피하기 위해 빈 함수로 처리
            return Promise.resolve();
        };
        
        // handleDepositSubmit 함수 정의
        window.handleDepositSubmit = async function(event) {
            console.log('입금 신청 함수 실행됨');
            event.preventDefault();
            
            const form = event.target;
            const submitButton = form.querySelector('.submit-button');
            const amount = document.getElementById('deposit-amount').value.replace(/,/g, '');
            const bankTransferName = document.getElementById('bank-transfer-name').value.trim();
            
            if (!amount || !bankTransferName) {
                showPopup('모든 필드를 입력해주세요.');
                return;
            }
            
            if (parseInt(amount) < 50000) {
                showPopup('최소 입금 금액은 50,000원입니다.');
                return;
            }
            
            submitButton.disabled = true;
            submitButton.textContent = '처리 중...';
            
            try {
                const response = await fetch('/api/transaction', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    credentials: 'include',
                    body: JSON.stringify({
                        type: 'deposit',
                        amount: parseInt(amount),
                        bankTransferName: bankTransferName
                    })
                });
                
                if (!response.ok) {
                    throw new Error(`HTTP error! status: ${response.status}`);
                }
                
                const result = await response.json();
                
                if (result.success) {
                    showPopup(result.message || '입금 신청이 완료되었습니다.');
                    form.reset();
                } else {
                    showPopup(result.message || '입금 신청 중 오류가 발생했습니다.');
                }
                
            } catch (error) {
                console.error('입금 신청 오류:', error);
                showPopup('서버 오류가 발생했습니다. 다시 시도해주세요.');
            } finally {
                submitButton.disabled = false;
                submitButton.textContent = '입금 신청하기';
            }
        };
        
        // showPopup 함수 정의
        window.showPopup = function(message) {
            console.log('팝업 표시:', message);
            const messageElement = document.querySelector('.popup-message');
            if (messageElement) {
                messageElement.textContent = message;
            }
            const overlayElement = document.getElementById('popup-overlay');
            if (overlayElement) {
                overlayElement.classList.add('active');
            }
        };
        
        // closePopup 함수 정의
        window.closePopup = function() {
            const overlayElement = document.getElementById('popup-overlay');
            if (overlayElement) {
                overlayElement.classList.remove('active');
            }
        };
        
        // handleWithdrawSubmit 함수 정의
        window.handleWithdrawSubmit = async function(event) {
            console.log('출금 신청 함수 실행됨');
            if (event && event.preventDefault) {
                event.preventDefault();
            }
            
            const form = document.getElementById('withdraw-form');
            const submitButton = form.querySelector('.submit-button');
            const amount = document.getElementById('withdraw-amount').value.replace(/,/g, '');
            const withdrawBankName = document.getElementById('withdraw-bank-name').value.trim();
            const withdrawAccountNumber = document.getElementById('withdraw-account-number').value.trim();
            const withdrawAccountHolder = document.getElementById('withdraw-account-holder').value.trim();
            
            console.log('출금 신청 데이터:', {
                amount,
                withdrawBankName,
                withdrawAccountNumber,
                withdrawAccountHolder
            });
            
            if (!amount || !withdrawBankName || !withdrawAccountNumber || !withdrawAccountHolder) {
                console.log('필드 검증 실패');
                showPopup('모든 필드를 입력해주세요.');
                return;
            }
            
            if (parseInt(amount) < 10000) {
                console.log('최소 금액 검증 실패');
                showPopup('최소 출금 금액은 10,000원입니다.');
                return;
            }
            
            console.log('서버 요청 시작');
            submitButton.disabled = true;
            submitButton.textContent = '처리 중...';
            
            try {
                const requestBody = {
                    type: 'withdraw',
                    amount: parseInt(amount),
                    withdrawBankName: withdrawBankName,
                    withdrawAccountNumber: withdrawAccountNumber,
                    withdrawAccountHolder: withdrawAccountHolder
                };
                
                console.log('서버로 전송할 데이터:', requestBody);
                
                const response = await fetch('/api/transaction', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    credentials: 'include',
                    body: JSON.stringify(requestBody)
                });
                
                console.log('서버 응답 상태:', response.status);
                
                if (!response.ok) {
                    const errorText = await response.text();
                    console.error('서버 오류 응답:', errorText);
                    throw new Error(`HTTP error! status: ${response.status}`);
                }
                
                const result = await response.json();
                console.log('서버 응답 데이터:', result);
                
                if (result.success) {
                    console.log('출금 신청 성공');
                    showPopup(result.message || '출금 신청이 완료되었습니다.');
                    form.reset();
                } else {
                    console.log('출금 신청 실패:', result.message);
                    showPopup(result.message || '출금 신청 중 오류가 발생했습니다.');
                }
                
            } catch (error) {
                console.error('출금 신청 오류 상세:', error);
                console.error('오류 스택:', error.stack);
                showPopup('서버 오류가 발생했습니다. 다시 시도해주세요. 오류: ' + error.message);
            } finally {
                console.log('출금 신청 처리 완료 - 버튼 복원');
                submitButton.disabled = false;
                submitButton.textContent = '출금 신청하기';
            }
        };
    </script>
    <style>
        :root {
            --primary: #4361ee;
            --primary-light: #eef2ff;
            --secondary: #3f37c9;
            --danger: #f72585;
            --success: #4cc9f0;
            --warning: #f8961e;
            --dark: #212529;
            --gray: #6c757d;
            --light: #f8f9fa;
            --white: #ffffff;
            --border-radius: 12px;
            --box-shadow: 0 8px 24px rgba(0, 0, 0, 0.08);
            --transition: all 0.3s cubic-bezier(0.25, 0.8, 0.25, 1);
        }

        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Pretendard', sans-serif;
            color: var(--dark);
            background-color: #f5f7ff;
            min-height: 100vh;
            display: flex;
            flex-direction: column;
            line-height: 1.6;
        }

        .container {
            max-width: 1200px;
            margin: 100px auto 20px;
            padding: 0 20px;
            flex: 1;
            width: 100%;
        }

        .page-title {
            font-size: 1.8rem;
            font-weight: 700;
            margin-bottom: 30px;
            text-align: center;
            color: var(--dark);
            position: relative;
            padding-bottom: 15px;
        }

        .page-title::after {
            content: '';
            position: absolute;
            bottom: 0;
            left: 50%;
            transform: translateX(-50%);
            width: 80px;
            height: 4px;
            background: linear-gradient(90deg, var(--primary), var(--danger));
            border-radius: 2px;
        }

        .account-summary {
            display: flex;
            gap: 20px;
            margin-bottom: 30px;
            flex-wrap: wrap;
        }

        .summary-card {
            flex: 1;
            min-width: 250px;
            background: var(--white);
            border-radius: var(--border-radius);
            padding: 25px;
            box-shadow: var(--box-shadow);
            transition: var(--transition);
            border-top: 4px solid var(--primary);
        }

        .summary-card:hover {
            transform: translateY(-5px);
            box-shadow: 0 12px 24px rgba(0, 0, 0, 0.12);
        }

        .card-title {
            font-size: 0.9rem;
            color: var(--gray);
            margin-bottom: 10px;
            display: flex;
            align-items: center;
            gap: 8px;
        }

        .card-value {
            font-size: 1.5rem;
            font-weight: 700;
            color: var(--primary);
        }

        .card-holder {
            font-size: 1.1rem;
            font-weight: 600;
            color: var(--secondary);
            margin-top: 5px;
        }

        .card-note {
            font-size: 0.85rem;
            color: var(--gray);
            margin-top: 8px;
        }

        .transaction-container {
            background: var(--white);
            border-radius: var(--border-radius);
            padding: 30px;
            box-shadow: var(--box-shadow);
            margin-bottom: 30px;
        }

        .tab-menu {
            display: flex;
            border-bottom: 1px solid var(--light);
            margin-bottom: 25px;
        }

        .tab-button {
            padding: 12px 24px;
            font-size: 1rem;
            font-weight: 500;
            color: var(--gray);
            background: none;
            border: none;
            cursor: pointer;
            position: relative;
            transition: var(--transition);
        }

        .tab-button.active {
            color: var(--primary);
            font-weight: 600;
        }

        .tab-button.active:after {
            content: '';
            position: absolute;
            bottom: -1px;
            left: 0;
            width: 100%;
            height: 2px;
            background: var(--primary);
        }

        .form-section {
            display: none;
            animation: fadeIn 0.3s ease;
        }

        .form-section.active {
            display: block;
        }

        .form-group {
            margin-bottom: 20px;
        }

        .form-label {
            display: block;
            font-size: 0.9rem;
            color: var(--gray);
            margin-bottom: 8px;
            font-weight: 500;
        }

        .form-control {
            width: 100%;
            padding: 14px 16px;
            font-size: 1rem;
            border: 1px solid var(--light);
            border-radius: var(--border-radius);
            transition: var(--transition);
        }

        .form-control:focus {
            outline: none;
            border-color: var(--primary);
            box-shadow: 0 0 0 3px var(--primary-light);
        }

        .amount-buttons {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(120px, 1fr));
            gap: 10px;
            margin-bottom: 25px;
        }

        .amount-button {
            padding: 12px;
            background: var(--primary-light);
            border: 1px solid var(--light);
            border-radius: var(--border-radius);
            font-size: 0.9rem;
            font-weight: 500;
            color: var(--primary);
            cursor: pointer;
            transition: var(--transition);
            text-align: center;
        }

        .amount-button:hover {
            background: rgba(67, 97, 238, 0.2);
        }

        .submit-button {
            width: 100%;
            padding: 16px;
            background: var(--primary);
            color: var(--white);
            font-size: 1rem;
            font-weight: 600;
            border: none;
            border-radius: var(--border-radius);
            cursor: pointer;
            transition: var(--transition);
        }

        .submit-button:hover {
            background: var(--secondary);
        }

        .account-info {
            padding: 16px;
            background: var(--light);
            border-radius: var(--border-radius);
            margin-bottom: 20px;
        }

        .account-info-title {
            font-weight: 600;
            margin-bottom: 5px;
        }

        .account-info-detail {
            color: var(--gray);
            font-size: 0.9rem;
        }

        .history-section {
            margin-top: 40px;
        }

        .section-title {
            font-size: 1.4rem;
            font-weight: 600;
            color: var(--dark);
            margin-bottom: 20px;
            padding-bottom: 10px;
            border-bottom: 1px solid var(--light);
        }

        .history-table {
            width: 100%;
            border-collapse: collapse;
            margin-top: 15px;
        }

        .history-table th {
            padding: 14px 16px;
            text-align: left;
            background: var(--light);
            font-size: 0.9rem;
            font-weight: 600;
            color: var(--gray);
            border-bottom: 2px solid var(--light);
        }

        .history-table td {
            padding: 14px 16px;
            font-size: 0.9rem;
            border-bottom: 1px solid var(--light);
        }

        .history-table tr:last-child td {
            border-bottom: none;
        }

        .type-cell {
            font-weight: 500;
        }

        .type-deposit {
            color: var(--success);
        }

        .type-withdraw {
            color: var(--secondary);
        }

        .amount-cell {
            font-weight: 600;
            text-align: right;
        }

        .status-cell {
            display: inline-block;
            padding: 6px 12px;
            border-radius: 20px;
            font-size: 0.8rem;
            font-weight: 500;
        }

        .status-pending {
            background: #FFF3E0;
            color: #FF6D00;
        }

        .status-completed {
            background: #E8F5E9;
            color: var(--success);
        }

        .status-rejected {
            background: #FFEBEE;
            color: var(--danger);
        }

        .no-history {
            text-align: center;
            padding: 40px;
            color: var(--gray);
        }

        .popup-overlay {
            position: fixed;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background: rgba(0, 0, 0, 0.5);
            display: flex;
            justify-content: center;
            align-items: center;
            z-index: 1000;
            opacity: 0;
            visibility: hidden;
            transition: var(--transition);
        }

        .popup-overlay.active {
            opacity: 1;
            visibility: visible;
        }

        .popup-card {
            background: var(--white);
            border-radius: var(--border-radius);
            padding: 30px;
            max-width: 400px;
            width: 90%;
            box-shadow: var(--box-shadow);
            text-align: center;
            transform: translateY(20px);
            transition: var(--transition);
        }

        .popup-overlay.active .popup-card {
            transform: translateY(0);
        }

        .popup-icon {
            font-size: 3rem;
            margin-bottom: 20px;
        }

        .popup-icon.success {
            color: var(--success);
        }

        .popup-icon.error {
            color: var(--danger);
        }

        .popup-message {
            font-size: 1.1rem;
            font-weight: 500;
            margin-bottom: 25px;
            line-height: 1.5;
        }

        .popup-button {
            padding: 12px 24px;
            background: var(--primary);
            color: var(--white);
            border: none;
            border-radius: var(--border-radius);
            font-size: 1rem;
            font-weight: 500;
            cursor: pointer;
            transition: var(--transition);
        }

        .popup-button:hover {
            background: var(--secondary);
        }

        @keyframes fadeIn {
            from { opacity: 0; }
            to { opacity: 1; }
        }

        .form-note {
            font-size: 0.9rem;
            color: var(--gray);
            margin-top: 8px;
            font-style: italic;
        }

        .deposit-notice,
        .withdraw-notice {
            background-color: var(--primary-light);
            border-left: 4px solid var(--primary);
            padding: 20px;
            margin: 20px 0;
            border-radius: 8px;
        }

        .deposit-notice h4,
        .withdraw-notice h4 {
            color: var(--primary);
            margin-bottom: 15px;
            font-size: 1.1rem;
            font-weight: 600;
        }

        .deposit-notice ul,
        .withdraw-notice ul {
            margin: 0;
            padding-left: 20px;
        }

        .deposit-notice li,
        .withdraw-notice li {
            margin-bottom: 8px;
            color: var(--dark);
            font-size: 0.95rem;
        }

        /* 로딩 상태 */
        .loading {
            opacity: 0.6;
            pointer-events: none;
        }

        .submit-button:disabled {
            background-color: var(--gray);
            cursor: not-allowed;
        }

        /* 반응형 디자인 */
        @media (max-width: 768px) {
            .container {
                padding: 0 15px;
                margin-top: 80px;
            }

            .account-summary {
                flex-direction: column;
                gap: 15px;
            }

            .summary-card {
                min-width: 100%;
            }

            .amount-buttons {
                grid-template-columns: repeat(2, 1fr);
            }

            .page-title {
                font-size: 1.5rem;
                margin-bottom: 20px;
            }

            .transaction-container {
                padding: 20px;
            }

            .tab-button {
                padding: 10px 15px;
                font-size: 0.9rem;
            }

            .history-table {
                display: block;
                overflow-x: auto;
            }
        }

        @media (max-width: 480px) {
            .amount-buttons {
                grid-template-columns: 1fr;
            }

            .history-table th,
            .history-table td {
                padding: 12px 10px;
                font-size: 0.85rem;
            }
        }


    </style>
    
    <title>입출금 신청 | 한양에너지</title>
</head>
<body>
    <!-- 헤더 -->
    <header class="hy-header">
        <div class="hy-container">
            <!-- 로고 영역 -->
            <div class="hy-logo">
                <a href="/">
                    <div style="font-size: 24px; font-weight: 800; color: #555555; letter-spacing: 0.5px; font-family: 'Arial', sans-serif; display: flex; align-items: center;">
                        HANYANG ENERGY<span style="width: 8px; height: 8px; background-color: #ff6600; border-radius: 50%; display: inline-block; margin-left: 0px; margin-top: 10px;"></span>
                    </div>
                </a>
            </div>

            <!-- 데스크탑 네비게이션 -->
            <nav class="hy-desktop-nav">
                <ul class="hy-main-menu">
                    <li class="hy-menu-item hy-has-dropdown">
                        <a href="/ceo_message">회사소개</a>
                        <ul class="hy-submenu">
                            <li><a href="/ceo_message">인사말</a></li>
                            <li><a href="/history">연혁</a></li>
                        </ul>
                    </li>
                    <li class="hy-menu-item hy-has-dropdown">
                        <a href="/introduce_service">서비스 소개</a>
                        <ul class="hy-submenu">
                            <li><a href="/introduce_service">서비스 소개</a></li>
                            <li><a href="/project_gallery">발전소 현황</a></li>
                        </ul>
                    </li>
                    <li class="hy-menu-item hy-has-dropdown">
                        <a href="/introduce_product">조합상품</a>
                        <ul class="hy-submenu">
                            <li><a href="/introduce_product">조합상품안내</a></li>
                            <li><a href="/product_list">조합원 상품신청</a></li>
                            <li><a href="/my_investments">조합원 출자현황</a></li>
                            <li><a href="/withdraw_request">조합원 입금/출금</a></li>
                        </ul>
                    </li>
                    <li class="hy-menu-item hy-has-dropdown">
                        <a href="/announcements">고객센터</a>
                        <ul class="hy-submenu">
                            <li><a href="/announcements">공지사항</a></li>
                            <li><a href="/faq">자주 묻는 질문</a></li>
                            <li><a href="/inquiry_list">1:1문의신청</a></li>
                        </ul>
                    </li>
                </ul>
            </nav>

            <!-- 사용자 인증 영역 -->
            <div class="hy-auth-area">
                <!-- JavaScript로 동적 생성됨 -->
            </div>

            <!-- 모바일 메뉴 토글 버튼 -->
            <button class="hy-mobile-toggle" aria-label="메뉴 열기">
                <span class="hy-toggle-bar"></span>
                <span class="hy-toggle-bar"></span>
                <span class="hy-toggle-bar"></span>
            </button>
        </div>

        <!-- 모바일 메뉴 -->
        <div class="hy-mobile-menu">
            <div class="hy-mobile-container">
                <div class="hy-mobile-header">
                    <button class="hy-mobile-close" aria-label="메뉴 닫기">✕</button>
                </div>
                
                <div class="hy-mobile-auth">
                    <!-- JavaScript로 동적 생성됨 -->
                </div>

                <nav class="hy-mobile-nav">
                    <ul>
                        <li class="hy-mobile-dropdown">
                            <button class="hy-mobile-menu-btn">회사소개</button>
                            <ul class="hy-mobile-submenu">
                                <li><a href="/ceo_message">인사말</a></li>
                                <li><a href="/history">연혁</a></li>
                            </ul>
                        </li>
                        <li class="hy-mobile-dropdown">
                            <button class="hy-mobile-menu-btn">서비스 소개</button>
                            <ul class="hy-mobile-submenu">
                                <li><a href="/introduce_service">서비스 소개</a></li>
                                <li><a href="/project_gallery">발전소 현황</a></li>
                            </ul>
                        </li>
                        <li class="hy-mobile-dropdown">
                            <button class="hy-mobile-menu-btn">조합상품</button>
                            <ul class="hy-mobile-submenu">
                                <li><a href="/introduce_product">조합상품안내</a></li>
                                <li><a href="/product_list">조합원 상품신청</a></li>
                                <li><a href="/my_investments">조합원 출자현황</a></li>
                                <li><a href="/withdraw_request">조합원 입금/출금</a></li>
                            </ul>
                        </li>
                        <li class="hy-mobile-dropdown">
                            <button class="hy-mobile-menu-btn">고객센터</button>
                            <ul class="hy-mobile-submenu">
                                <li><a href="/announcements">공지사항</a></li>
                                <li><a href="/faq">자주 묻는 질문</a></li>
                                <li><a href="/inquiry_list">1:1문의신청</a></li>
                            </ul>
                        </li>
                    </ul>
                </nav>
            </div>
        </div>
    </header>

    <!-- 메인 컨텐츠 -->
    <div class="container">
        <h1 class="page-title">입출금 관리</h1>
        
        <div class="account-summary">
            <div class="summary-card">
                <div class="card-title">
                    <i class="fas fa-wallet"></i>
                    보유 잔액
                </div>
                <div class="card-value">₩<%= typeof currentBalance !== 'undefined' ? currentBalance.toLocaleString() : '0' %></div>
                <div class="card-note">출금 가능 금액</div>
            </div>
            
            <div class="summary-card">
                <div class="card-title">
                    <i class="fas fa-piggy-bank"></i>
                    입금 계좌번호
                </div>
                <div class="card-value" id="company-account">새마을 9002-1942-6111-3</div>
                <div class="card-holder" id="company-account-holder">(주)한양에너지 조합장 박경읍</div>
                <div class="card-note">한양에너지 전용 계좌</div>
            </div>
        </div>
        
        <div class="transaction-container">
            <div class="tab-menu">
                <button class="tab-button active" data-tab="deposit">입금 신청</button>
                <button class="tab-button" data-tab="withdraw">출금 신청</button>
            </div>
            
            <form id="deposit-form" class="form-section active">
                <div class="form-group">
                    <label class="form-label" for="deposit-amount">입금 금액</label>
                    <input type="text" id="deposit-amount" name="amount" class="form-control" placeholder="최소 50,000원 이상 입력" required>
                </div>
                
                <div class="form-group">
                    <label class="form-label" for="bank-transfer-name">입금자명</label>
                    <input type="text" id="bank-transfer-name" name="bankTransferName" class="form-control" placeholder="입금자명 입력" value="<%= typeof user !== 'undefined' && user ? user.name : '' %>" required>
                    <div class="form-note">입금 시 위 이름으로 입금해 주세요</div>
                </div>
                
                <div class="amount-buttons">
                    <button type="button" class="amount-button" data-amount="50000">50,000원</button>
                    <button type="button" class="amount-button" data-amount="100000">100,000원</button>
                    <button type="button" class="amount-button" data-amount="500000">500,000원</button>
                    <button type="button" class="amount-button" data-amount="1000000">1,000,000원</button>
                    <button type="button" class="amount-button" data-amount="5000000">5,000,000원</button>
                </div>
                
                <div class="deposit-notice">
                    <h4>입금 안내</h4>
                    <ul>
                        <li>입금 후 관리자 확인을 거쳐 잔액에 반영됩니다</li>
                        <li>입금자명과 회원명이 일치해야 합니다</li>
                        <li>최소 입금 금액은 50,000원입니다</li>
                        <li>입금 확인은 영업일 기준 1~2일 소요됩니다</li>
                    </ul>
                </div>
                
                <button type="submit" class="submit-button">입금 신청하기</button>
            </form>
            
            <form id="withdraw-form" class="form-section">
                <div class="form-group">
                    <label class="form-label" for="withdraw-amount">출금 금액</label>
                    <input type="text" id="withdraw-amount" name="amount" class="form-control" placeholder="최소 10,000원 이상 입력" required>
                </div>
                
                <div class="amount-buttons">
                    <button type="button" class="amount-button" data-amount="50000">50,000원</button>
                    <button type="button" class="amount-button" data-amount="100000">100,000원</button>
                    <button type="button" class="amount-button" data-amount="500000">500,000원</button>
                    <button type="button" class="amount-button" data-amount="1000000">1,000,000원</button>
                    <button type="button" class="amount-button" data-amount="5000000">5,000,000원</button>
                </div>
                
                <div class="form-group">
                    <label class="form-label" for="withdraw-bank-name">출금 은행명</label>
                    <input type="text" id="withdraw-bank-name" name="withdrawBankName" class="form-control" placeholder="은행명 입력" value="<%= typeof userProfile !== 'undefined' && userProfile.bank_name ? userProfile.bank_name : '' %>" required>
                </div>
                
                <div class="form-group">
                    <label class="form-label" for="withdraw-account-number">출금 계좌번호</label>
                    <input type="text" id="withdraw-account-number" name="withdrawAccountNumber" class="form-control" placeholder="계좌번호 입력 (- 없이)" value="<%= typeof userProfile !== 'undefined' && userProfile.account_number ? userProfile.account_number : '' %>" required>
                </div>
                
                <div class="form-group">
                    <label class="form-label" for="withdraw-account-holder">예금주명</label>
                    <input type="text" id="withdraw-account-holder" name="withdrawAccountHolder" class="form-control" placeholder="예금주명 입력" value="<%= typeof user !== 'undefined' && user ? user.name : '' %>" required>
                </div>
                
                <div class="withdraw-notice">
                    <h4>출금 안내</h4>
                    <ul>
                        <li>출금 신청 후 관리자 승인을 거쳐 처리됩니다</li>
                        <li>예금주명과 회원명이 일치해야 합니다</li>
                        <li>최소 출금 금액은 10,000원입니다</li>
                        <li>출금 처리는 영업일 기준 1~3일 소요됩니다</li>
                        <li>출금 수수료는 없습니다</li>
                    </ul>
                </div>
                
                <button type="button" class="submit-button" onclick="handleWithdrawSubmitDirect()">출금 신청하기</button>
            </form>
        </div>
        
        <div class="history-section">
            <h2 class="section-title">최근 입출금 내역</h2>
            
            <table class="history-table">
                <thead>
                    <tr>
                        <th>유형</th>
                        <th>금액</th>
                        <th>신청일시</th>
                        <th>상태</th>
                        <th>관리자 메모</th>
                    </tr>
                </thead>
                <tbody id="transaction-history">
                    <tr>
                        <td colspan="5" style="text-align: center; padding: 40px; color: #666;">
                            거래 내역이 없습니다.
                        </td>
                    </tr>
                </tbody>
            </table>
        </div>
    </div>
    
    <div id="popup-overlay" class="popup-overlay">
        <div class="popup-card">
            <div class="popup-icon error">
                <i class="fas fa-exclamation-circle"></i>
            </div>
            <div class="popup-message"></div>
            <button class="popup-button" onclick="closePopup()">확인</button>
        </div>
    </div>
    
    <script>
        // 현재 사용자 정보 가져오기
        function getCurrentUser() {
            const userStr = localStorage.getItem('currentUser');
            if (userStr) {
                try {
                    return JSON.parse(userStr);
                } catch (error) {
                    console.error('사용자 정보 파싱 오류:', error);
                    return null;
                }
            }
            return null;
        }

        // 로그인 체크 함수
        function requireLogin() {
            const user = getCurrentUser();
            if (!user) {
                alert('로그인이 필요합니다.');
                window.location.href = '/login';
                return false;
            }
            return true;
        }

        // 헤더 사용자 정보 업데이트 함수
        function updateHeaderUserInfo() {
            const user = getCurrentUser();
            if (user) {
                console.log('헤더 사용자 정보 업데이트:', user.name);
                // header.js의 함수가 있으면 호출
                if (typeof window.updateHeaderUserInfo === 'function') {
                    window.updateHeaderUserInfo();
                }
            }
        }

        // 사이트 설정 로드 및 적용
        async function loadSiteSettings() {
            try {
                const response = await fetch('/api/settings');
                const result = await response.json();
                
                if (result.success) {
                    const settings = result.data;
                    
                    // 계좌번호와 예금주 분리 업데이트
                    if (settings.accountNumber) {
                        document.getElementById('company-account').textContent = settings.accountNumber;
                    }
                    if (settings.accountHolder) {
                        document.getElementById('company-account-holder').textContent = settings.accountHolder;
                    }
                }
            } catch (error) {
                console.error('사이트 설정 로드 오류:', error);
            }
        }

        // 거래 내역 로드
        async function loadTransactionHistory() {
            console.log('거래 내역 로드 시도');
            // 일단 빈 함수로 처리 (404 오류 방지)
            displayTransactionHistory([]);
        }

        // 거래 내역 표시
        function displayTransactionHistory(transactions) {
            const tbody = document.getElementById('transaction-history');
            
            if (transactions.length === 0) {
                tbody.innerHTML = `
                    <tr>
                        <td colspan="5" style="text-align: center; padding: 40px; color: #666;">
                            거래 내역이 없습니다.
                        </td>
                    </tr>
                `;
                return;
            }
            
            tbody.innerHTML = transactions.map(transaction => {
                const typeClass = transaction.type === 'deposit' ? 'type-deposit' : 'type-withdraw';
                const typeName = transaction.type === 'deposit' ? '입금' : '출금';
                
                let statusClass = '';
                let statusText = '';
                
                switch (transaction.status) {
                    case 'pending':
                        statusClass = 'status-pending';
                        statusText = '승인 대기';
                        break;
                    case 'approved':
                        statusClass = 'status-approved';
                        statusText = '승인 완료';
                        break;
                    case 'rejected':
                        statusClass = 'status-rejected';
                        statusText = '승인 거부';
                        break;
                    case 'completed':
                        statusClass = 'status-completed';
                        statusText = '처리 완료';
                        break;
                }
                
                const createdAt = new Date(transaction.created_at).toLocaleString('ko-KR');
                const amount = parseInt(transaction.amount).toLocaleString();
                const adminNote = transaction.admin_note || '-';
                
                return `
                    <tr>
                        <td class="type-cell ${typeClass}">${typeName}</td>
                        <td class="amount-cell">₩${amount}</td>
                        <td>${createdAt}</td>
                        <td><span class="status-cell ${statusClass}">${statusText}</span></td>
                        <td style="max-width: 200px; word-break: break-word;">${adminNote}</td>
                    </tr>
                `;
            }).join('');
        }

        // 입금 신청 처리
        async function handleDepositSubmit(event) {
            event.preventDefault();
            console.log('입금 신청 처리 시작');
            
            const form = event.target;
            const submitButton = form.querySelector('.submit-button');
            const amount = document.getElementById('deposit-amount').value.replace(/,/g, '');
            const bankTransferName = document.getElementById('bank-transfer-name').value.trim();
            
            console.log('입금 데이터:', { amount, bankTransferName });
            
            if (!amount || !bankTransferName) {
                showPopup('모든 필드를 입력해주세요.');
                return;
            }
            
            if (parseInt(amount) < 50000) {
                showPopup('최소 입금 금액은 50,000원입니다.');
                return;
            }
            
            submitButton.disabled = true;
            submitButton.textContent = '처리 중...';
            
            try {
                const user = getCurrentUser();
                console.log('현재 사용자:', user);
                
                if (!user) {
                    showPopup('로그인 정보를 찾을 수 없습니다. 다시 로그인해주세요.');
                    return;
                }
                
                const requestData = {
                    type: 'deposit',
                    amount: parseInt(amount),
                    bankTransferName: bankTransferName
                };
                
                console.log('서버로 전송할 데이터:', requestData);
                console.log('헤더 정보:', {
                    'Content-Type': 'application/json',
                    'x-current-user': encodeURIComponent(JSON.stringify(user))
                });
                console.log('사용자 정보 원본:', user);
                console.log('인코딩된 사용자 정보:', encodeURIComponent(JSON.stringify(user)));
                
                const response = await fetch('/api/transaction', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'x-current-user': encodeURIComponent(JSON.stringify(user))
                    },
                    credentials: 'include',
                    body: JSON.stringify(requestData)
                });
                
                console.log('입금 서버 응답 상태:', response.status);
                
                if (!response.ok) {
                    const errorText = await response.text();
                    console.error('서버 오류 응답:', errorText);
                    throw new Error(`HTTP error! status: ${response.status}`);
                }
                
                const result = await response.json();
                console.log('입금 서버 응답:', result);
                
                if (result.success) {
                    showPopup(result.message || '입금 신청이 완료되었습니다.');
                    form.reset();
                } else {
                    showPopup(result.message || '입금 신청 중 오류가 발생했습니다.');
                }
                
            } catch (error) {
                console.error('입금 신청 오류:', error);
                showPopup('서버 오류가 발생했습니다. 다시 시도해주세요.');
            } finally {
                submitButton.disabled = false;
                submitButton.textContent = '입금 신청하기';
            }
        }

        // 출금 신청 처리
        async function handleWithdrawSubmit(event) {
            console.log('출금 신청 함수 실행됨');
            event.preventDefault();
            
            const form = event.target;
            const submitButton = form.querySelector('.submit-button');
            const amount = document.getElementById('withdraw-amount').value.replace(/,/g, '');
            const withdrawBankName = document.getElementById('withdraw-bank-name').value.trim();
            const withdrawAccountNumber = document.getElementById('withdraw-account-number').value.trim();
            const withdrawAccountHolder = document.getElementById('withdraw-account-holder').value.trim();
            
            console.log('출금 신청 데이터:', {
                amount,
                withdrawBankName,
                withdrawAccountNumber,
                withdrawAccountHolder
            });
            
            if (!amount || !withdrawBankName || !withdrawAccountNumber || !withdrawAccountHolder) {
                console.log('필드 검증 실패');
                showPopup('모든 필드를 입력해주세요.');
                return;
            }
            
            if (parseInt(amount) < 10000) {
                console.log('최소 금액 검증 실패');
                showPopup('최소 출금 금액은 10,000원입니다.');
                return;
            }
            
            console.log('서버 요청 시작');
            submitButton.disabled = true;
            submitButton.textContent = '처리 중...';
            
            try {
                const user = getCurrentUser();
                console.log('현재 사용자:', user);
                
                if (!user) {
                    showPopup('로그인 정보를 찾을 수 없습니다. 다시 로그인해주세요.');
                    return;
                }
                
                const requestBody = {
                    type: 'withdraw',
                    amount: parseInt(amount),
                    withdrawBankName: withdrawBankName,
                    withdrawAccountNumber: withdrawAccountNumber,
                    withdrawAccountHolder: withdrawAccountHolder
                };
                
                console.log('서버로 전송할 데이터:', requestBody);
                
                const response = await fetch('/api/transaction', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'x-current-user': encodeURIComponent(JSON.stringify(user))
                    },
                    credentials: 'include',
                    body: JSON.stringify(requestBody)
                });
                
                console.log('서버 응답 상태:', response.status);
                
                if (!response.ok) {
                    const errorText = await response.text();
                    console.error('서버 오류 응답:', errorText);
                    throw new Error(`HTTP error! status: ${response.status}`);
                }
                
                const result = await response.json();
                console.log('서버 응답 데이터:', result);
                
                if (result.success) {
                    console.log('출금 신청 성공');
                    showPopup(result.message || '출금 신청이 완료되었습니다.');
                    form.reset();
                } else {
                    console.log('출금 신청 실패:', result.message);
                    showPopup(result.message || '출금 신청 중 오류가 발생했습니다.');
                }
                
            } catch (error) {
                console.error('출금 신청 오류 상세:', error);
                showPopup('서버 오류가 발생했습니다. 다시 시도해주세요. 오류: ' + error.message);
            } finally {
                console.log('출금 신청 처리 완료 - 버튼 복원');
                submitButton.disabled = false;
                submitButton.textContent = '출금 신청하기';
            }
        }

        // 출금 버튼 직접 클릭 처리 (onclick 용)
        function handleWithdrawSubmitDirect() {
            console.log('직접 출금 버튼 클릭됨');
            const withdrawForm = document.getElementById('withdraw-form');
            if (withdrawForm) {
                const fakeEvent = { 
                    preventDefault: () => {},
                    target: withdrawForm
                };
                handleWithdrawSubmit(fakeEvent);
            }
        }

        // 팝업 표시
        function showPopup(message) {
            console.log('팝업 표시:', message);
            const messageElement = document.querySelector('.popup-message');
            if (messageElement) {
                messageElement.textContent = message;
            }
            const overlayElement = document.getElementById('popup-overlay');
            if (overlayElement) {
                overlayElement.classList.add('active');
            }
        }

        // 팝업 닫기
        function closePopup() {
            const overlayElement = document.getElementById('popup-overlay');
            if (overlayElement) {
                overlayElement.classList.remove('active');
            }
        }

        // 페이지 초기화
        document.addEventListener('DOMContentLoaded', async function() {
            console.log('페이지 로드 완료');
            
            // 로그인 체크
            if (!requireLogin()) {
                return;
            }
            
            // 헤더 사용자 정보 업데이트
            updateHeaderUserInfo();
            
            // 사이트 설정 로드
            await loadSiteSettings();
            
            // 거래 내역 로드
            await loadTransactionHistory();
            
            // 탭 전환 기능
            const tabButtons = document.querySelectorAll('.tab-button');
            const formSections = document.querySelectorAll('.form-section');
            
            tabButtons.forEach(button => {
                button.addEventListener('click', () => {
                    const tabId = button.getAttribute('data-tab');
                    
                    // 모든 탭 버튼 비활성화
                    tabButtons.forEach(btn => btn.classList.remove('active'));
                    // 모든 폼 섹션 숨기기
                    formSections.forEach(section => section.classList.remove('active'));
                    
                    // 현재 탭 활성화
                    button.classList.add('active');
                    document.getElementById(`${tabId}-form`).classList.add('active');
                });
            });
            
            // 입금 폼 이벤트 리스너
            const depositForm = document.getElementById('deposit-form');
            if (depositForm) {
                console.log('입금 폼 이벤트 리스너 등록');
                depositForm.addEventListener('submit', handleDepositSubmit);
            }
            
            // 출금 폼 이벤트 리스너
            const withdrawForm = document.getElementById('withdraw-form');
            if (withdrawForm) {
                console.log('출금 폼 이벤트 리스너 등록');
                withdrawForm.addEventListener('submit', handleWithdrawSubmit);
            }
            
            // 금액 버튼 이벤트
            document.querySelectorAll('.amount-button').forEach(button => {
                button.addEventListener('click', function() {
                    const amount = this.getAttribute('data-amount');
                    const activeTab = document.querySelector('.tab-button.active').getAttribute('data-tab');
                    const targetInput = activeTab === 'deposit' ? 
                        document.getElementById('deposit-amount') : 
                        document.getElementById('withdraw-amount');
                    
                    if (targetInput) {
                        targetInput.value = parseInt(amount).toLocaleString();
                    }
                });
            });
            
            console.log('모든 이벤트 리스너 등록 완료');
        });
    </script>
    
    <script src="js/header.js"></script>
    <%- include('partials/footer') %>
